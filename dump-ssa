package unicode:
  var   ASCII_Hex_Digit                     *RangeTable
  var   Adlam                               *RangeTable
  var   Ahom                                *RangeTable
  var   Anatolian_Hieroglyphs               *RangeTable
  var   Arabic                              *RangeTable
  var   Armenian                            *RangeTable
  var   Avestan                             *RangeTable
  var   AzeriCase                           SpecialCase
  var   Balinese                            *RangeTable
  var   Bamum                               *RangeTable
  var   Bassa_Vah                           *RangeTable
  var   Batak                               *RangeTable
  var   Bengali                             *RangeTable
  var   Bhaiksuki                           *RangeTable
  var   Bidi_Control                        *RangeTable
  var   Bopomofo                            *RangeTable
  var   Brahmi                              *RangeTable
  var   Braille                             *RangeTable
  var   Buginese                            *RangeTable
  var   Buhid                               *RangeTable
  var   C                                   *RangeTable
  var   Canadian_Aboriginal                 *RangeTable
  var   Carian                              *RangeTable
  type  CaseRange                           struct{Lo uint32; Hi uint32; Delta d}
  var   CaseRanges                          []CaseRange
  var   Categories                          map[string]*RangeTable
  var   Caucasian_Albanian                  *RangeTable
  var   Cc                                  *RangeTable
  var   Cf                                  *RangeTable
  var   Chakma                              *RangeTable
  var   Cham                                *RangeTable
  var   Cherokee                            *RangeTable
  var   Co                                  *RangeTable
  var   Common                              *RangeTable
  var   Coptic                              *RangeTable
  var   Cs                                  *RangeTable
  var   Cuneiform                           *RangeTable
  var   Cypriot                             *RangeTable
  var   Cyrillic                            *RangeTable
  var   Dash                                *RangeTable
  var   Deprecated                          *RangeTable
  var   Deseret                             *RangeTable
  var   Devanagari                          *RangeTable
  var   Diacritic                           *RangeTable
  var   Digit                               *RangeTable
  var   Duployan                            *RangeTable
  var   Egyptian_Hieroglyphs                *RangeTable
  var   Elbasan                             *RangeTable
  var   Ethiopic                            *RangeTable
  var   Extender                            *RangeTable
  var   FoldCategory                        map[string]*RangeTable
  var   FoldScript                          map[string]*RangeTable
  var   Georgian                            *RangeTable
  var   Glagolitic                          *RangeTable
  var   Gothic                              *RangeTable
  var   Grantha                             *RangeTable
  var   GraphicRanges                       []*RangeTable
  var   Greek                               *RangeTable
  var   Gujarati                            *RangeTable
  var   Gurmukhi                            *RangeTable
  var   Han                                 *RangeTable
  var   Hangul                              *RangeTable
  var   Hanunoo                             *RangeTable
  var   Hatran                              *RangeTable
  var   Hebrew                              *RangeTable
  var   Hex_Digit                           *RangeTable
  var   Hiragana                            *RangeTable
  var   Hyphen                              *RangeTable
  var   IDS_Binary_Operator                 *RangeTable
  var   IDS_Trinary_Operator                *RangeTable
  var   Ideographic                         *RangeTable
  var   Imperial_Aramaic                    *RangeTable
  func  In                                  func(r rune, ranges ...*RangeTable) bool
  var   Inherited                           *RangeTable
  var   Inscriptional_Pahlavi               *RangeTable
  var   Inscriptional_Parthian              *RangeTable
  func  Is                                  func(rangeTab *RangeTable, r rune) bool
  func  IsControl                           func(r rune) bool
  func  IsDigit                             func(r rune) bool
  func  IsGraphic                           func(r rune) bool
  func  IsLetter                            func(r rune) bool
  func  IsLower                             func(r rune) bool
  func  IsMark                              func(r rune) bool
  func  IsNumber                            func(r rune) bool
  func  IsOneOf                             func(ranges []*RangeTable, r rune) bool
  func  IsPrint                             func(r rune) bool
  func  IsPunct                             func(r rune) bool
  func  IsSpace                             func(r rune) bool
  func  IsSymbol                            func(r rune) bool
  func  IsTitle                             func(r rune) bool
  func  IsUpper                             func(r rune) bool
  var   Javanese                            *RangeTable
  var   Join_Control                        *RangeTable
  var   Kaithi                              *RangeTable
  var   Kannada                             *RangeTable
  var   Katakana                            *RangeTable
  var   Kayah_Li                            *RangeTable
  var   Kharoshthi                          *RangeTable
  var   Khmer                               *RangeTable
  var   Khojki                              *RangeTable
  var   Khudawadi                           *RangeTable
  var   L                                   *RangeTable
  var   Lao                                 *RangeTable
  var   Latin                               *RangeTable
  var   Lepcha                              *RangeTable
  var   Letter                              *RangeTable
  var   Limbu                               *RangeTable
  var   Linear_A                            *RangeTable
  var   Linear_B                            *RangeTable
  var   Lisu                                *RangeTable
  var   Ll                                  *RangeTable
  var   Lm                                  *RangeTable
  var   Lo                                  *RangeTable
  var   Logical_Order_Exception             *RangeTable
  var   Lower                               *RangeTable
  const LowerCase                           LowerCase = 1:untyped int
  var   Lt                                  *RangeTable
  var   Lu                                  *RangeTable
  var   Lycian                              *RangeTable
  var   Lydian                              *RangeTable
  var   M                                   *RangeTable
  var   Mahajani                            *RangeTable
  var   Malayalam                           *RangeTable
  var   Mandaic                             *RangeTable
  var   Manichaean                          *RangeTable
  var   Marchen                             *RangeTable
  var   Mark                                *RangeTable
  const MaxASCII                            MaxASCII = 127:untyped rune
  const MaxCase                             MaxCase = 3:untyped int
  const MaxLatin1                           MaxLatin1 = 255:untyped rune
  const MaxRune                             MaxRune = 1114111:untyped rune
  var   Mc                                  *RangeTable
  var   Me                                  *RangeTable
  var   Meetei_Mayek                        *RangeTable
  var   Mende_Kikakui                       *RangeTable
  var   Meroitic_Cursive                    *RangeTable
  var   Meroitic_Hieroglyphs                *RangeTable
  var   Miao                                *RangeTable
  var   Mn                                  *RangeTable
  var   Modi                                *RangeTable
  var   Mongolian                           *RangeTable
  var   Mro                                 *RangeTable
  var   Multani                             *RangeTable
  var   Myanmar                             *RangeTable
  var   N                                   *RangeTable
  var   Nabataean                           *RangeTable
  var   Nd                                  *RangeTable
  var   New_Tai_Lue                         *RangeTable
  var   Newa                                *RangeTable
  var   Nko                                 *RangeTable
  var   Nl                                  *RangeTable
  var   No                                  *RangeTable
  var   Noncharacter_Code_Point             *RangeTable
  var   Number                              *RangeTable
  var   Ogham                               *RangeTable
  var   Ol_Chiki                            *RangeTable
  var   Old_Hungarian                       *RangeTable
  var   Old_Italic                          *RangeTable
  var   Old_North_Arabian                   *RangeTable
  var   Old_Permic                          *RangeTable
  var   Old_Persian                         *RangeTable
  var   Old_South_Arabian                   *RangeTable
  var   Old_Turkic                          *RangeTable
  var   Oriya                               *RangeTable
  var   Osage                               *RangeTable
  var   Osmanya                             *RangeTable
  var   Other                               *RangeTable
  var   Other_Alphabetic                    *RangeTable
  var   Other_Default_Ignorable_Code_Point  *RangeTable
  var   Other_Grapheme_Extend               *RangeTable
  var   Other_ID_Continue                   *RangeTable
  var   Other_ID_Start                      *RangeTable
  var   Other_Lowercase                     *RangeTable
  var   Other_Math                          *RangeTable
  var   Other_Uppercase                     *RangeTable
  var   P                                   *RangeTable
  var   Pahawh_Hmong                        *RangeTable
  var   Palmyrene                           *RangeTable
  var   Pattern_Syntax                      *RangeTable
  var   Pattern_White_Space                 *RangeTable
  var   Pau_Cin_Hau                         *RangeTable
  var   Pc                                  *RangeTable
  var   Pd                                  *RangeTable
  var   Pe                                  *RangeTable
  var   Pf                                  *RangeTable
  var   Phags_Pa                            *RangeTable
  var   Phoenician                          *RangeTable
  var   Pi                                  *RangeTable
  var   Po                                  *RangeTable
  var   Prepended_Concatenation_Mark        *RangeTable
  var   PrintRanges                         []*RangeTable
  var   Properties                          map[string]*RangeTable
  var   Ps                                  *RangeTable
  var   Psalter_Pahlavi                     *RangeTable
  var   Punct                               *RangeTable
  var   Quotation_Mark                      *RangeTable
  var   Radical                             *RangeTable
  type  Range16                             struct{Lo uint16; Hi uint16; Stride uint16}
  type  Range32                             struct{Lo uint32; Hi uint32; Stride uint32}
  type  RangeTable                          struct{R16 []Range16; R32 []Range32; LatinOffset int}
  var   Rejang                              *RangeTable
  const ReplacementChar                     ReplacementChar = 65533:untyped rune
  var   Runic                               *RangeTable
  var   S                                   *RangeTable
  var   STerm                               *RangeTable
  var   Samaritan                           *RangeTable
  var   Saurashtra                          *RangeTable
  var   Sc                                  *RangeTable
  var   Scripts                             map[string]*RangeTable
  var   Sentence_Terminal                   *RangeTable
  var   Sharada                             *RangeTable
  var   Shavian                             *RangeTable
  var   Siddham                             *RangeTable
  var   SignWriting                         *RangeTable
  func  SimpleFold                          func(r rune) rune
  var   Sinhala                             *RangeTable
  var   Sk                                  *RangeTable
  var   Sm                                  *RangeTable
  var   So                                  *RangeTable
  var   Soft_Dotted                         *RangeTable
  var   Sora_Sompeng                        *RangeTable
  var   Space                               *RangeTable
  type  SpecialCase                         []CaseRange
    method (SpecialCase) ToLower(r rune) rune
    method (SpecialCase) ToTitle(r rune) rune
    method (SpecialCase) ToUpper(r rune) rune
  var   Sundanese                           *RangeTable
  var   Syloti_Nagri                        *RangeTable
  var   Symbol                              *RangeTable
  var   Syriac                              *RangeTable
  var   Tagalog                             *RangeTable
  var   Tagbanwa                            *RangeTable
  var   Tai_Le                              *RangeTable
  var   Tai_Tham                            *RangeTable
  var   Tai_Viet                            *RangeTable
  var   Takri                               *RangeTable
  var   Tamil                               *RangeTable
  var   Tangut                              *RangeTable
  var   Telugu                              *RangeTable
  var   Terminal_Punctuation                *RangeTable
  var   Thaana                              *RangeTable
  var   Thai                                *RangeTable
  var   Tibetan                             *RangeTable
  var   Tifinagh                            *RangeTable
  var   Tirhuta                             *RangeTable
  var   Title                               *RangeTable
  const TitleCase                           TitleCase = 2:untyped int
  func  To                                  func(_case int, r rune) rune
  func  ToLower                             func(r rune) rune
  func  ToTitle                             func(r rune) rune
  func  ToUpper                             func(r rune) rune
  var   TurkishCase                         SpecialCase
  var   Ugaritic                            *RangeTable
  var   Unified_Ideograph                   *RangeTable
  var   Upper                               *RangeTable
  const UpperCase                           UpperCase = 0:untyped int
  const UpperLower                          UpperLower = 1114112:untyped rune
  var   Vai                                 *RangeTable
  var   Variation_Selector                  *RangeTable
  const Version                             Version = "9.0.0":untyped string
  var   Warang_Citi                         *RangeTable
  var   White_Space                         *RangeTable
  var   Yi                                  *RangeTable
  var   Z                                   *RangeTable
  var   Zl                                  *RangeTable
  var   Zp                                  *RangeTable
  var   Zs                                  *RangeTable
  var   _ASCII_Hex_Digit                    *RangeTable
  var   _Adlam                              *RangeTable
  var   _Ahom                               *RangeTable
  var   _Anatolian_Hieroglyphs              *RangeTable
  var   _Arabic                             *RangeTable
  var   _Armenian                           *RangeTable
  var   _Avestan                            *RangeTable
  var   _Balinese                           *RangeTable
  var   _Bamum                              *RangeTable
  var   _Bassa_Vah                          *RangeTable
  var   _Batak                              *RangeTable
  var   _Bengali                            *RangeTable
  var   _Bhaiksuki                          *RangeTable
  var   _Bidi_Control                       *RangeTable
  var   _Bopomofo                           *RangeTable
  var   _Brahmi                             *RangeTable
  var   _Braille                            *RangeTable
  var   _Buginese                           *RangeTable
  var   _Buhid                              *RangeTable
  var   _C                                  *RangeTable
  var   _Canadian_Aboriginal                *RangeTable
  var   _Carian                             *RangeTable
  var   _CaseRanges                         []CaseRange
  var   _Caucasian_Albanian                 *RangeTable
  var   _Cc                                 *RangeTable
  var   _Cf                                 *RangeTable
  var   _Chakma                             *RangeTable
  var   _Cham                               *RangeTable
  var   _Cherokee                           *RangeTable
  var   _Co                                 *RangeTable
  var   _Common                             *RangeTable
  var   _Coptic                             *RangeTable
  var   _Cs                                 *RangeTable
  var   _Cuneiform                          *RangeTable
  var   _Cypriot                            *RangeTable
  var   _Cyrillic                           *RangeTable
  var   _Dash                               *RangeTable
  var   _Deprecated                         *RangeTable
  var   _Deseret                            *RangeTable
  var   _Devanagari                         *RangeTable
  var   _Diacritic                          *RangeTable
  var   _Duployan                           *RangeTable
  var   _Egyptian_Hieroglyphs               *RangeTable
  var   _Elbasan                            *RangeTable
  var   _Ethiopic                           *RangeTable
  var   _Extender                           *RangeTable
  var   _Georgian                           *RangeTable
  var   _Glagolitic                         *RangeTable
  var   _Gothic                             *RangeTable
  var   _Grantha                            *RangeTable
  var   _Greek                              *RangeTable
  var   _Gujarati                           *RangeTable
  var   _Gurmukhi                           *RangeTable
  var   _Han                                *RangeTable
  var   _Hangul                             *RangeTable
  var   _Hanunoo                            *RangeTable
  var   _Hatran                             *RangeTable
  var   _Hebrew                             *RangeTable
  var   _Hex_Digit                          *RangeTable
  var   _Hiragana                           *RangeTable
  var   _Hyphen                             *RangeTable
  var   _IDS_Binary_Operator                *RangeTable
  var   _IDS_Trinary_Operator               *RangeTable
  var   _Ideographic                        *RangeTable
  var   _Imperial_Aramaic                   *RangeTable
  var   _Inherited                          *RangeTable
  var   _Inscriptional_Pahlavi              *RangeTable
  var   _Inscriptional_Parthian             *RangeTable
  var   _Javanese                           *RangeTable
  var   _Join_Control                       *RangeTable
  var   _Kaithi                             *RangeTable
  var   _Kannada                            *RangeTable
  var   _Katakana                           *RangeTable
  var   _Kayah_Li                           *RangeTable
  var   _Kharoshthi                         *RangeTable
  var   _Khmer                              *RangeTable
  var   _Khojki                             *RangeTable
  var   _Khudawadi                          *RangeTable
  var   _L                                  *RangeTable
  var   _Lao                                *RangeTable
  var   _Latin                              *RangeTable
  var   _Lepcha                             *RangeTable
  var   _Limbu                              *RangeTable
  var   _Linear_A                           *RangeTable
  var   _Linear_B                           *RangeTable
  var   _Lisu                               *RangeTable
  var   _Ll                                 *RangeTable
  var   _Lm                                 *RangeTable
  var   _Lo                                 *RangeTable
  var   _Logical_Order_Exception            *RangeTable
  var   _Lt                                 *RangeTable
  var   _Lu                                 *RangeTable
  var   _Lycian                             *RangeTable
  var   _Lydian                             *RangeTable
  var   _M                                  *RangeTable
  var   _Mahajani                           *RangeTable
  var   _Malayalam                          *RangeTable
  var   _Mandaic                            *RangeTable
  var   _Manichaean                         *RangeTable
  var   _Marchen                            *RangeTable
  var   _Mc                                 *RangeTable
  var   _Me                                 *RangeTable
  var   _Meetei_Mayek                       *RangeTable
  var   _Mende_Kikakui                      *RangeTable
  var   _Meroitic_Cursive                   *RangeTable
  var   _Meroitic_Hieroglyphs               *RangeTable
  var   _Miao                               *RangeTable
  var   _Mn                                 *RangeTable
  var   _Modi                               *RangeTable
  var   _Mongolian                          *RangeTable
  var   _Mro                                *RangeTable
  var   _Multani                            *RangeTable
  var   _Myanmar                            *RangeTable
  var   _N                                  *RangeTable
  var   _Nabataean                          *RangeTable
  var   _Nd                                 *RangeTable
  var   _New_Tai_Lue                        *RangeTable
  var   _Newa                               *RangeTable
  var   _Nko                                *RangeTable
  var   _Nl                                 *RangeTable
  var   _No                                 *RangeTable
  var   _Noncharacter_Code_Point            *RangeTable
  var   _Ogham                              *RangeTable
  var   _Ol_Chiki                           *RangeTable
  var   _Old_Hungarian                      *RangeTable
  var   _Old_Italic                         *RangeTable
  var   _Old_North_Arabian                  *RangeTable
  var   _Old_Permic                         *RangeTable
  var   _Old_Persian                        *RangeTable
  var   _Old_South_Arabian                  *RangeTable
  var   _Old_Turkic                         *RangeTable
  var   _Oriya                              *RangeTable
  var   _Osage                              *RangeTable
  var   _Osmanya                            *RangeTable
  var   _Other_Alphabetic                   *RangeTable
  var   _Other_Default_Ignorable_Code_Point *RangeTable
  var   _Other_Grapheme_Extend              *RangeTable
  var   _Other_ID_Continue                  *RangeTable
  var   _Other_ID_Start                     *RangeTable
  var   _Other_Lowercase                    *RangeTable
  var   _Other_Math                         *RangeTable
  var   _Other_Uppercase                    *RangeTable
  var   _P                                  *RangeTable
  var   _Pahawh_Hmong                       *RangeTable
  var   _Palmyrene                          *RangeTable
  var   _Pattern_Syntax                     *RangeTable
  var   _Pattern_White_Space                *RangeTable
  var   _Pau_Cin_Hau                        *RangeTable
  var   _Pc                                 *RangeTable
  var   _Pd                                 *RangeTable
  var   _Pe                                 *RangeTable
  var   _Pf                                 *RangeTable
  var   _Phags_Pa                           *RangeTable
  var   _Phoenician                         *RangeTable
  var   _Pi                                 *RangeTable
  var   _Po                                 *RangeTable
  var   _Prepended_Concatenation_Mark       *RangeTable
  var   _Ps                                 *RangeTable
  var   _Psalter_Pahlavi                    *RangeTable
  var   _Quotation_Mark                     *RangeTable
  var   _Radical                            *RangeTable
  var   _Rejang                             *RangeTable
  var   _Runic                              *RangeTable
  var   _S                                  *RangeTable
  var   _Samaritan                          *RangeTable
  var   _Saurashtra                         *RangeTable
  var   _Sc                                 *RangeTable
  var   _Sentence_Terminal                  *RangeTable
  var   _Sharada                            *RangeTable
  var   _Shavian                            *RangeTable
  var   _Siddham                            *RangeTable
  var   _SignWriting                        *RangeTable
  var   _Sinhala                            *RangeTable
  var   _Sk                                 *RangeTable
  var   _Sm                                 *RangeTable
  var   _So                                 *RangeTable
  var   _Soft_Dotted                        *RangeTable
  var   _Sora_Sompeng                       *RangeTable
  var   _Sundanese                          *RangeTable
  var   _Syloti_Nagri                       *RangeTable
  var   _Syriac                             *RangeTable
  var   _Tagalog                            *RangeTable
  var   _Tagbanwa                           *RangeTable
  var   _Tai_Le                             *RangeTable
  var   _Tai_Tham                           *RangeTable
  var   _Tai_Viet                           *RangeTable
  var   _Takri                              *RangeTable
  var   _Tamil                              *RangeTable
  var   _Tangut                             *RangeTable
  var   _Telugu                             *RangeTable
  var   _Terminal_Punctuation               *RangeTable
  var   _Thaana                             *RangeTable
  var   _Thai                               *RangeTable
  var   _Tibetan                            *RangeTable
  var   _Tifinagh                           *RangeTable
  var   _Tirhuta                            *RangeTable
  var   _TurkishCase                        SpecialCase
  var   _Ugaritic                           *RangeTable
  var   _Unified_Ideograph                  *RangeTable
  var   _Vai                                *RangeTable
  var   _Variation_Selector                 *RangeTable
  var   _Warang_Citi                        *RangeTable
  var   _White_Space                        *RangeTable
  var   _Yi                                 *RangeTable
  var   _Z                                  *RangeTable
  var   _Zl                                 *RangeTable
  var   _Zp                                 *RangeTable
  var   _Zs                                 *RangeTable
  var   asciiFold                           [128]uint16
  var   caseOrbit                           []foldPair
  type  d                                   [3]rune
  var   foldCommon                          *RangeTable
  var   foldGreek                           *RangeTable
  var   foldInherited                       *RangeTable
  var   foldL                               *RangeTable
  var   foldLl                              *RangeTable
  var   foldLt                              *RangeTable
  var   foldLu                              *RangeTable
  var   foldM                               *RangeTable
  var   foldMn                              *RangeTable
  type  foldPair                            struct{From uint16; To uint16}
  func  init                                func()
  var   init$guard                          bool
  func  is16                                func(ranges []Range16, r uint16) bool
  func  is32                                func(ranges []Range32, r uint32) bool
  func  isExcludingLatin                    func(rangeTab *RangeTable, r rune) bool
  const linearMax                           linearMax = 18:untyped int
  const pC                                  pC = 1:untyped int
  const pLl                                 pLl = 64:untyped int
  const pLmask                              pLmask = 96:untyped int
  const pLo                                 pLo = 96:untyped int
  const pLu                                 pLu = 32:untyped int
  const pN                                  pN = 4:untyped int
  const pP                                  pP = 2:untyped int
  const pS                                  pS = 8:untyped int
  const pZ                                  pZ = 16:untyped int
  const pg                                  pg = 144:untyped int
  const pp                                  pp = 128:untyped int
  var   properties                          [256]uint8
  func  to                                  func(_case int, r rune, caseRange []CaseRange) rune

package runtime:
  func  BlockProfile                          func(p []BlockProfileRecord) (n int, ok bool)
  type  BlockProfileRecord                    struct{Count int64; Cycles int64; StackRecord}
    method (*BlockProfileRecord) Stack() []uintptr
  func  Breakpoint                            func()
  func  CPUProfile                            func() []byte
  func  Caller                                func(skip int) (pc uintptr, file string, line int, ok bool)
  func  Callers                               func(skip int, pc []uintptr) int
  func  CallersFrames                         func(callers []uintptr) *Frames
  const Compiler                              Compiler = "gc":untyped string
  type  Error                                 interface{RuntimeError(); error}
    method (Error) Error() string
    method (Error) RuntimeError()
  type  Frame                                 struct{PC uintptr; Func *Func; Function string; File string; Line int; Entry uintptr}
  type  Frames                                struct{callers []uintptr; wasPanic bool; frames *[]Frame}
    method (*Frames) Next() (frame Frame, more bool)
    method (*Frames) cgoNext(pc uintptr, more bool) (Frame, bool)
  type  Func                                  struct{opaque struct{}}
    method (*Func) Entry() uintptr
    method (*Func) FileLine(pc uintptr) (file string, line int)
    method (*Func) Name() string
    method (*Func) raw() *_func
  func  FuncForPC                             func(pc uintptr) *Func
  func  GC                                    func()
  const GOARCH                                GOARCH = "amd64":string
  func  GOMAXPROCS                            func(n int) int
  const GOOS                                  GOOS = "linux":string
  func  GOROOT                                func() string
  func  Goexit                                func()
  func  GoroutineProfile                      func(p []StackRecord) (n int, ok bool)
  func  Gosched                               func()
  func  KeepAlive                             func(interface{})
  func  LockOSThread                          func()
  func  MemProfile                            func(p []MemProfileRecord, inuseZero bool) (n int, ok bool)
  var   MemProfileRate                        int
  type  MemProfileRecord                      struct{AllocBytes int64; FreeBytes int64; AllocObjects int64; FreeObjects int64; Stack0 [32]uintptr}
    method (*MemProfileRecord) InUseBytes() int64
    method (*MemProfileRecord) InUseObjects() int64
    method (*MemProfileRecord) Stack() []uintptr
  type  MemStats                              struct{Alloc uint64; TotalAlloc uint64; Sys uint64; Lookups uint64; Mallocs uint64; Frees uint64; HeapAlloc uint64; HeapSys uint64; HeapIdle uint64; HeapInuse uint64; HeapReleased uint64; HeapObjects uint64; StackInuse uint64; StackSys uint64; MSpanInuse uint64; MSpanSys uint64; MCacheInuse uint64; MCacheSys uint64; BuckHashSys uint64; GCSys uint64; OtherSys uint64; NextGC uint64; LastGC uint64; PauseTotalNs uint64; PauseNs [256]uint64; PauseEnd [256]uint64; NumGC uint32; GCCPUFraction float64; EnableGC bool; DebugGC bool; BySize [61]struct{Size uint32; Mallocs uint64; Frees uint64}}
  func  NumCPU                                func() int
  func  NumCgoCall                            func() int64
  func  NumGoroutine                          func() int
  func  ReadMemStats                          func(m *MemStats)
  func  ReadTrace                             func() []byte
  func  SetBlockProfileRate                   func(rate int)
  func  SetCPUProfileRate                     func(hz int)
  func  SetCgoTraceback                       func(version int, traceback unsafe.Pointer, context unsafe.Pointer, symbolizer unsafe.Pointer)
  func  SetFinalizer                          func(obj interface{}, finalizer interface{})
  func  Stack                                 func(buf []byte, all bool) int
  type  StackRecord                           struct{Stack0 [32]uintptr}
    method (*StackRecord) Stack() []uintptr
  func  StartTrace                            func() error
  func  StopTrace                             func()
  func  ThreadCreateProfile                   func(p []StackRecord) (n int, ok bool)
  type  TypeAssertionError                    struct{interfaceString string; concreteString string; assertedString string; missingMethod string}
    method (*TypeAssertionError) Error() string
    method (*TypeAssertionError) RuntimeError()
  func  UnlockOSThread                        func()
  func  Version                               func() string
  const _64bit                                _64bit = 1:untyped int
  const _AF_UNIX                              _AF_UNIX = 1:untyped int
  const _AT_NULL                              _AT_NULL = 0:untyped int
  const _AT_PAGESZ                            _AT_PAGESZ = 6:untyped int
  const _AT_RANDOM                            _AT_RANDOM = 25:untyped int
  const _AT_SYSINFO_EHDR                      _AT_SYSINFO_EHDR = 33:untyped int
  const _ArgsSizeUnknown                      _ArgsSizeUnknown = -2147483648:untyped int
  const _BUS_ADRALN                           _BUS_ADRALN = 1:untyped int
  const _BUS_ADRERR                           _BUS_ADRERR = 2:untyped int
  const _BUS_OBJERR                           _BUS_OBJERR = 3:untyped int
  const _CLONE_CHILD_CLEARTID                 _CLONE_CHILD_CLEARTID = 2097152:untyped int
  const _CLONE_CHILD_SETTID                   _CLONE_CHILD_SETTID = 16777216:untyped int
  const _CLONE_FILES                          _CLONE_FILES = 1024:untyped int
  const _CLONE_FS                             _CLONE_FS = 512:untyped int
  const _CLONE_NEWIPC                         _CLONE_NEWIPC = 134217728:untyped int
  const _CLONE_NEWNS                          _CLONE_NEWNS = 131072:untyped int
  const _CLONE_NEWUTS                         _CLONE_NEWUTS = 67108864:untyped int
  const _CLONE_PARENT                         _CLONE_PARENT = 32768:untyped int
  const _CLONE_PARENT_SETTID                  _CLONE_PARENT_SETTID = 1048576:untyped int
  const _CLONE_PTRACE                         _CLONE_PTRACE = 8192:untyped int
  const _CLONE_SETTLS                         _CLONE_SETTLS = 524288:untyped int
  const _CLONE_SIGHAND                        _CLONE_SIGHAND = 2048:untyped int
  const _CLONE_STOPPED                        _CLONE_STOPPED = 33554432:untyped int
  const _CLONE_SYSVSEM                        _CLONE_SYSVSEM = 262144:untyped int
  const _CLONE_THREAD                         _CLONE_THREAD = 65536:untyped int
  const _CLONE_UNTRACED                       _CLONE_UNTRACED = 8388608:untyped int
  const _CLONE_VFORK                          _CLONE_VFORK = 16384:untyped int
  const _CLONE_VM                             _CLONE_VM = 256:untyped int
  const _ConcurrentSweep                      _ConcurrentSweep = true:untyped bool
  const _DT_HASH                              _DT_HASH = 4:untyped int
  const _DT_NULL                              _DT_NULL = 0:untyped int
  const _DT_STRTAB                            _DT_STRTAB = 5:untyped int
  const _DT_SYMTAB                            _DT_SYMTAB = 6:untyped int
  const _DT_VERDEF                            _DT_VERDEF = 1879048188:untyped int
  const _DT_VERSYM                            _DT_VERSYM = 1879048176:untyped int
  const _DebugGC                              _DebugGC = 0:untyped int
  const _EACCES                               _EACCES = 13:untyped int
  const _EAGAIN                               _EAGAIN = 11:untyped int
  const _EINTR                                _EINTR = 4:untyped int
  const _EINVAL                               _EINVAL = 22:untyped int
  const _EI_NIDENT                            _EI_NIDENT = 16:untyped int
  func  _ELF64_ST_BIND                        func(val byte) byte
  func  _ELF64_ST_TYPE                        func(val byte) byte
  const _ENOMEM                               _ENOMEM = 12:untyped int
  const _EPOLLERR                             _EPOLLERR = 8:untyped int
  const _EPOLLET                              _EPOLLET = 2147483648:untyped int
  const _EPOLLHUP                             _EPOLLHUP = 16:untyped int
  const _EPOLLIN                              _EPOLLIN = 1:untyped int
  const _EPOLLOUT                             _EPOLLOUT = 4:untyped int
  const _EPOLLRDHUP                           _EPOLLRDHUP = 8192:untyped int
  const _EPOLL_CLOEXEC                        _EPOLL_CLOEXEC = 524288:untyped int
  const _EPOLL_CTL_ADD                        _EPOLL_CTL_ADD = 1:untyped int
  const _EPOLL_CTL_DEL                        _EPOLL_CTL_DEL = 2:untyped int
  const _EPOLL_CTL_MOD                        _EPOLL_CTL_MOD = 3:untyped int
  func  _ExternalCode                         func()
  const _FPE_FLTDIV                           _FPE_FLTDIV = 3:untyped int
  const _FPE_FLTINV                           _FPE_FLTINV = 7:untyped int
  const _FPE_FLTOVF                           _FPE_FLTOVF = 4:untyped int
  const _FPE_FLTRES                           _FPE_FLTRES = 6:untyped int
  const _FPE_FLTSUB                           _FPE_FLTSUB = 8:untyped int
  const _FPE_FLTUND                           _FPE_FLTUND = 5:untyped int
  const _FPE_INTDIV                           _FPE_INTDIV = 1:untyped int
  const _FPE_INTOVF                           _FPE_INTOVF = 2:untyped int
  const _FUNCDATA_ArgsPointerMaps             _FUNCDATA_ArgsPointerMaps = 0:untyped int
  const _FUNCDATA_LocalsPointerMaps           _FUNCDATA_LocalsPointerMaps = 1:untyped int
  const _FUTEX_WAIT                           _FUTEX_WAIT = 0:untyped int
  const _FUTEX_WAKE                           _FUTEX_WAKE = 1:untyped int
  const _F_SETFL                              _F_SETFL = 4:untyped int
  const _FinBlockSize                         _FinBlockSize = 4096:untyped int
  const _FixAllocChunk                        _FixAllocChunk = 16384:untyped int
  const _FixedStack                           _FixedStack = 2048:untyped int
  const _FixedStack0                          _FixedStack0 = 2048:untyped int
  const _FixedStack1                          _FixedStack1 = 2047:untyped int
  const _FixedStack2                          _FixedStack2 = 2047:untyped int
  const _FixedStack3                          _FixedStack3 = 2047:untyped int
  const _FixedStack4                          _FixedStack4 = 2047:untyped int
  const _FixedStack5                          _FixedStack5 = 2047:untyped int
  const _FixedStack6                          _FixedStack6 = 2047:untyped int
  func  _GC                                   func()
  const _GCmark                               _GCmark = 1:untyped int
  const _GCmarktermination                    _GCmarktermination = 2:untyped int
  const _GCoff                                _GCoff = 0:untyped int
  const _Gcopystack                           _Gcopystack = 8:untyped int
  const _Gdead                                _Gdead = 6:untyped int
  const _Genqueue_unused                      _Genqueue_unused = 7:untyped int
  const _Gidle                                _Gidle = 0:untyped int
  const _Gmoribund_unused                     _Gmoribund_unused = 5:untyped int
  const _GoidCacheBatch                       _GoidCacheBatch = 16:untyped int
  const _Grunnable                            _Grunnable = 1:untyped int
  const _Grunning                             _Grunning = 2:untyped int
  const _Gscan                                _Gscan = 4096:untyped int
  const _Gscanrunnable                        _Gscanrunnable = 4097:untyped int
  const _Gscanrunning                         _Gscanrunning = 4098:untyped int
  const _Gscansyscall                         _Gscansyscall = 4099:untyped int
  const _Gscanwaiting                         _Gscanwaiting = 4100:untyped int
  const _Gsyscall                             _Gsyscall = 3:untyped int
  const _Gwaiting                             _Gwaiting = 4:untyped int
  const _HeapAllocChunk                       _HeapAllocChunk = 1048576:untyped int
  const _ITIMER_PROF                          _ITIMER_PROF = 2:untyped int
  const _ITIMER_REAL                          _ITIMER_REAL = 0:untyped int
  const _ITIMER_VIRTUAL                       _ITIMER_VIRTUAL = 1:untyped int
  const _KindSpecialFinalizer                 _KindSpecialFinalizer = 1:untyped int
  const _KindSpecialProfile                   _KindSpecialProfile = 2:untyped int
  const _LockExternal                         _LockExternal = 1:untyped int
  const _LockInternal                         _LockInternal = 2:untyped int
  const _MADV_DONTNEED                        _MADV_DONTNEED = 4:untyped int
  const _MADV_HUGEPAGE                        _MADV_HUGEPAGE = 14:untyped int
  const _MADV_NOHUGEPAGE                      _MADV_NOHUGEPAGE = 15:untyped int
  const _MAP_ANON                             _MAP_ANON = 32:untyped int
  const _MAP_FIXED                            _MAP_FIXED = 16:untyped int
  const _MAP_PRIVATE                          _MAP_PRIVATE = 2:untyped int
  const _MHeapMap_Bits                        _MHeapMap_Bits = 26:untyped int
  const _MHeapMap_TotalBits                   _MHeapMap_TotalBits = 39:untyped int
  const _MSpanDead                            _MSpanDead = 3:untyped int
  const _MSpanFree                            _MSpanFree = 2:untyped int
  const _MSpanInUse                           _MSpanInUse = 0:untyped int
  const _MSpanStack                           _MSpanStack = 1:untyped int
  const _MaxArena32                           _MaxArena32 = 4294967295:untyped int
  const _MaxGcproc                            _MaxGcproc = 32:untyped int
  const _MaxGomaxprocs                        _MaxGomaxprocs = 256:untyped int
  const _MaxMHeapList                         _MaxMHeapList = 128:untyped int
  const _MaxMem                               _MaxMem = 549755813887:uintptr
  const _MaxSmallSize                         _MaxSmallSize = 32768:untyped int
  const _NSIG                                 _NSIG = 65:untyped int
  const _NoArgs                               _NoArgs = 18446744073709551615:uintptr
  const _NumSizeClasses                       _NumSizeClasses = 67:untyped int
  const _NumStackOrders                       _NumStackOrders = 4:untyped int
  const _O_CLOEXEC                            _O_CLOEXEC = 524288:untyped int
  const _O_RDONLY                             _O_RDONLY = 0:untyped int
  const _PCDATA_StackMapIndex                 _PCDATA_StackMapIndex = 0:untyped int
  const _PROT_EXEC                            _PROT_EXEC = 4:untyped int
  const _PROT_NONE                            _PROT_NONE = 0:untyped int
  const _PROT_READ                            _PROT_READ = 1:untyped int
  const _PROT_WRITE                           _PROT_WRITE = 2:untyped int
  const _PT_DYNAMIC                           _PT_DYNAMIC = 2:untyped int
  const _PT_LOAD                              _PT_LOAD = 1:untyped int
  const _PageMask                             _PageMask = 8191:untyped int
  const _PageShift                            _PageShift = 13:untyped int
  const _PageSize                             _PageSize = 8192:untyped int
  const _Pdead                                _Pdead = 4:untyped int
  const _Pgcstop                              _Pgcstop = 3:untyped int
  const _Pidle                                _Pidle = 0:untyped int
  const _Prunning                             _Prunning = 1:untyped int
  const _Psyscall                             _Psyscall = 2:untyped int
  const _RLIMIT_AS                            _RLIMIT_AS = 9:untyped int
  const _SA_ONSTACK                           _SA_ONSTACK = 134217728:untyped int
  const _SA_RESTART                           _SA_RESTART = 268435456:untyped int
  const _SA_RESTORER                          _SA_RESTORER = 67108864:untyped int
  const _SA_SIGINFO                           _SA_SIGINFO = 4:untyped int
  const _SEGV_ACCERR                          _SEGV_ACCERR = 2:untyped int
  const _SEGV_MAPERR                          _SEGV_MAPERR = 1:untyped int
  const _SHN_UNDEF                            _SHN_UNDEF = 0:untyped int
  const _SHT_DYNSYM                           _SHT_DYNSYM = 11:untyped int
  const _SIGABRT                              _SIGABRT = 6:untyped int
  const _SIGALRM                              _SIGALRM = 14:untyped int
  const _SIGBUS                               _SIGBUS = 7:untyped int
  const _SIGCHLD                              _SIGCHLD = 17:untyped int
  const _SIGCONT                              _SIGCONT = 18:untyped int
  const _SIGFPE                               _SIGFPE = 8:untyped int
  const _SIGHUP                               _SIGHUP = 1:untyped int
  const _SIGILL                               _SIGILL = 4:untyped int
  const _SIGINT                               _SIGINT = 2:untyped int
  const _SIGIO                                _SIGIO = 29:untyped int
  const _SIGKILL                              _SIGKILL = 9:untyped int
  const _SIGPIPE                              _SIGPIPE = 13:untyped int
  const _SIGPROF                              _SIGPROF = 27:untyped int
  const _SIGPWR                               _SIGPWR = 30:untyped int
  const _SIGQUIT                              _SIGQUIT = 3:untyped int
  const _SIGSEGV                              _SIGSEGV = 11:untyped int
  const _SIGSTKFLT                            _SIGSTKFLT = 16:untyped int
  const _SIGSTOP                              _SIGSTOP = 19:untyped int
  const _SIGSYS                               _SIGSYS = 31:untyped int
  const _SIGTRAP                              _SIGTRAP = 5:untyped int
  const _SIGTSTP                              _SIGTSTP = 20:untyped int
  const _SIGTTIN                              _SIGTTIN = 21:untyped int
  const _SIGTTOU                              _SIGTTOU = 22:untyped int
  const _SIGURG                               _SIGURG = 23:untyped int
  const _SIGUSR1                              _SIGUSR1 = 10:untyped int
  const _SIGUSR2                              _SIGUSR2 = 12:untyped int
  const _SIGVTALRM                            _SIGVTALRM = 26:untyped int
  const _SIGWINCH                             _SIGWINCH = 28:untyped int
  const _SIGXCPU                              _SIGXCPU = 24:untyped int
  const _SIGXFSZ                              _SIGXFSZ = 25:untyped int
  const _SIG_BLOCK                            _SIG_BLOCK = 0:untyped int
  const _SIG_DFL                              _SIG_DFL = 0:uintptr
  const _SIG_IGN                              _SIG_IGN = 1:uintptr
  const _SIG_SETMASK                          _SIG_SETMASK = 2:untyped int
  const _SIG_UNBLOCK                          _SIG_UNBLOCK = 1:untyped int
  const _SI_USER                              _SI_USER = 0:untyped int
  const _SOCK_DGRAM                           _SOCK_DGRAM = 2:untyped int
  const _SS_DISABLE                           _SS_DISABLE = 2:untyped int
  const _STB_GLOBAL                           _STB_GLOBAL = 1:untyped int
  const _STB_WEAK                             _STB_WEAK = 2:untyped int
  const _STT_FUNC                             _STT_FUNC = 2:untyped int
  const _SigDefault                           _SigDefault = 16:untyped int
  const _SigGoExit                            _SigGoExit = 64:untyped int
  const _SigHandling                          _SigHandling = 32:untyped int
  const _SigKill                              _SigKill = 2:untyped int
  const _SigNotify                            _SigNotify = 1:untyped int
  const _SigPanic                             _SigPanic = 8:untyped int
  const _SigSetStack                          _SigSetStack = 128:untyped int
  const _SigThrow                             _SigThrow = 4:untyped int
  const _SigUnblock                           _SigUnblock = 256:untyped int
  const _StackBig                             _StackBig = 4096:untyped int
  const _StackCacheSize                       _StackCacheSize = 32768:untyped int
  const _StackFork                            _StackFork = 18446744073709550382:untyped int
  const _StackGuard                           _StackGuard = 720:untyped int
  const _StackLimit                           _StackLimit = 592:untyped int
  const _StackMin                             _StackMin = 2048:untyped int
  const _StackPreempt                         _StackPreempt = 18446744073709550302:untyped int
  const _StackSmall                           _StackSmall = 128:untyped int
  const _StackSystem                          _StackSystem = 0:untyped int
  func  _System                               func()
  const _TinySize                             _TinySize = 16:untyped int
  const _TinySizeClass                        _TinySizeClass = 2:untyped int
  const _TraceJumpStack                       _TraceJumpStack = 4:untyped int
  const _TraceRuntimeFrames                   _TraceRuntimeFrames = 1:untyped int
  const _TraceTrap                            _TraceTrap = 2:untyped int
  const _TracebackMaxFrames                   _TracebackMaxFrames = 100:untyped int
  const _VER_FLG_BASE                         _VER_FLG_BASE = 1:untyped int
  const _WorkbufSize                          _WorkbufSize = 2048:untyped int
  var   __vdso_clock_gettime_sym              uintptr
  var   __vdso_gettimeofday_sym               uintptr
  var   __vdso_time_sym                       uintptr
  var   _cgo_callers                          unsafe.Pointer
  var   _cgo_init                             unsafe.Pointer
  var   _cgo_mmap                             unsafe.Pointer
  var   _cgo_notify_runtime_init_done         unsafe.Pointer
  func  _cgo_panic_internal                   func(p *byte)
  var   _cgo_set_context_function             unsafe.Pointer
  var   _cgo_setenv                           unsafe.Pointer
  var   _cgo_sys_thread_create                unsafe.Pointer
  var   _cgo_thread_start                     unsafe.Pointer
  var   _cgo_unsetenv                         unsafe.Pointer
  type  _defer                                struct{siz int32; started bool; sp uintptr; pc uintptr; fn *funcval; _panic *_panic; link *_defer}
  type  _func                                 struct{entry uintptr; nameoff int32; args int32; _ int32; pcsp int32; pcfile int32; pcln int32; npcdata int32; nfuncdata int32}
  type  _panic                                struct{argp unsafe.Pointer; arg interface{}; link *_panic; recovered bool; aborted bool}
  type  _type                                 struct{size uintptr; ptrdata uintptr; hash uint32; tflag tflag; align uint8; fieldalign uint8; kind uint8; alg *typeAlg; gcdata *byte; str nameOff; ptrToThis typeOff}
    method (*_type) name() string
    method (*_type) nameOff(off nameOff) name
    method (*_type) string() string
    method (*_type) textOff(off textOff) unsafe.Pointer
    method (*_type) typeOff(off typeOff) *_type
    method (*_type) uncommon() *uncommontype
  func  acquireSudog                          func() *sudog
  func  acquirem                              func() *m
  func  acquirep                              func(_p_ *p)
  func  acquirep1                             func(_p_ *p)
  const active_spin                           active_spin = 4:untyped int
  const active_spin_cnt                       active_spin_cnt = 30:untyped int
  func  add                                   func(p unsafe.Pointer, x uintptr) unsafe.Pointer
  func  add1                                  func(p *byte) *byte
  func  addb                                  func(p *byte, n uintptr) *byte
  func  addfinalizer                          func(p unsafe.Pointer, f *funcval, nret uintptr, fint *_type, ot *ptrtype) bool
  func  additab                               func(m *itab, locked bool, canfail bool)
  const addrBits                              addrBits = 48:untyped int
  func  addrspace_free                        func(v unsafe.Pointer, n uintptr) bool
  var   addrspace_vec                         [1]byte
  func  addspecial                            func(p unsafe.Pointer, s *special) bool
  func  addtimer                              func(t *timer)
  func  addtimerLocked                        func(t *timer)
  func  adjustctxt                            func(gp *g, adjinfo *adjustinfo)
  func  adjustdefers                          func(gp *g, adjinfo *adjustinfo)
  func  adjustframe                           func(frame *stkframe, arg unsafe.Pointer) bool
  type  adjustinfo                            struct{old stack; delta uintptr; cache pcvalueCache; sghi uintptr}
  func  adjustpanics                          func(gp *g, adjinfo *adjustinfo)
  func  adjustpointer                         func(adjinfo *adjustinfo, vpp unsafe.Pointer)
  func  adjustpointers                        func(scanp unsafe.Pointer, cbv *bitvector, adjinfo *adjustinfo, f *_func)
  func  adjuststkbar                          func(gp *g, adjinfo *adjustinfo)
  func  adjustsudogs                          func(gp *g, adjinfo *adjustinfo)
  func  aeshash                               func(p unsafe.Pointer, h uintptr, s uintptr) uintptr
  func  aeshash32                             func(p unsafe.Pointer, h uintptr) uintptr
  func  aeshash64                             func(p unsafe.Pointer, h uintptr) uintptr
  func  aeshashstr                            func(p unsafe.Pointer, h uintptr) uintptr
  var   aeskeysched                           [128]byte
  func  afterfork                             func()
  const alg_CPLX128                           alg_CPLX128 = 13:untyped int
  const alg_CPLX64                            alg_CPLX64 = 12:untyped int
  const alg_FLOAT32                           alg_FLOAT32 = 10:untyped int
  const alg_FLOAT64                           alg_FLOAT64 = 11:untyped int
  const alg_INTER                             alg_INTER = 8:untyped int
  const alg_MEM0                              alg_MEM0 = 1:untyped int
  const alg_MEM128                            alg_MEM128 = 6:untyped int
  const alg_MEM16                             alg_MEM16 = 3:untyped int
  const alg_MEM32                             alg_MEM32 = 4:untyped int
  const alg_MEM64                             alg_MEM64 = 5:untyped int
  const alg_MEM8                              alg_MEM8 = 2:untyped int
  const alg_NILINTER                          alg_NILINTER = 9:untyped int
  const alg_NOEQ                              alg_NOEQ = 0:untyped int
  const alg_STRING                            alg_STRING = 7:untyped int
  const alg_max                               alg_max = 14:untyped int
  var   algarray                              [14]typeAlg
  func  alginit                               func()
  var   allfin                                *finblock
  func  allgadd                               func(gp *g)
  var   allglen                               uintptr
  var   allglock                              mutex
  var   allgs                                 []*g
  var   allm                                  *m
  func  allocm                                func(_p_ *p, fn func()) *m
  func  allocmcache                           func() *mcache
  var   allp                                  [257]*p
  func  archauxv                              func(tag uintptr, val uintptr)
  var   argc                                  int32
  func  args                                  func(c int32, v **byte)
  var   argslice                              []string
  var   argv                                  **byte
  func  argv_index                            func(argv **byte, i int32) *byte
  type  arraytype                             struct{typ _type; elem *_type; slice *_type; len uintptr}
  func  asmcgocall                            func(fn unsafe.Pointer, arg unsafe.Pointer) int32
  func  asminit                               func()
  func  assertE2E                             func(inter *interfacetype, e eface, r *eface)
  func  assertE2E2                            func(inter *interfacetype, e eface, r *eface) bool
  func  assertE2I                             func(inter *interfacetype, e eface, r *iface)
  func  assertE2I2                            func(inter *interfacetype, e eface, r *iface) bool
  func  assertE2T                             func(t *_type, e eface, r unsafe.Pointer)
  func  assertE2T2                            func(t *_type, e eface, r unsafe.Pointer) bool
  func  assertI2E                             func(inter *interfacetype, i iface, r *eface)
  func  assertI2E2                            func(inter *interfacetype, i iface, r *eface) bool
  func  assertI2I                             func(inter *interfacetype, i iface, r *iface)
  func  assertI2I2                            func(inter *interfacetype, i iface, r *iface) bool
  func  assertI2T                             func(t *_type, i iface, r unsafe.Pointer)
  func  assertI2T2                            func(t *_type, i iface, r unsafe.Pointer) bool
  const assoc                                 assoc = 4:untyped int
  func  atoi                                  func(s string) int
  func  atomicstorep                          func(ptr unsafe.Pointer, new unsafe.Pointer)
  const bad                                   bad = 65533:untyped int
  func  badcgocallback                        func()
  func  badmcall                              func(fn func(*g))
  func  badmcall2                             func(fn func(*g))
  func  badreflectcall                        func()
  func  badsignal                             func(sig uintptr, c *sigctxt)
  func  badsignalgo                           func(sig uintptr, c *sigctxt)
  func  badsystemstack                        func()
  func  badunlockosthread                     func()
  var   bbuckets                              *bucket
  func  beforefork                            func()
  func  bestFit                               func(list *mSpanList, npage uintptr, best *mspan) *mspan
  func  bgsweep                               func(c chan int)
  var   bgsweepPC                             uintptr
  const bias32                                bias32 = -127:untyped int
  const bias64                                bias64 = -1023:untyped int
  const bit1                                  bit1 = 7:untyped int
  const bit2                                  bit2 = 5:untyped int
  const bit3                                  bit3 = 4:untyped int
  const bit4                                  bit4 = 3:untyped int
  const bit5                                  bit5 = 2:untyped int
  const bitMarked                             bitMarked = 16:untyped int
  const bitMarkedAll                          bitMarkedAll = 240:untyped int
  const bitPointer                            bitPointer = 1:untyped int
  const bitPointerAll                         bitPointerAll = 15:untyped int
  type  bitvector                             struct{n int32; bytedata *uint8}
  const bitx                                  bitx = 6:untyped int
  func  block                                 func()
  const blockProfile                          blockProfile = 2:bucketType
  type  blockRecord                           struct{count int64; cycles int64}
  func  blockevent                            func(cycles int64, skip int)
  var   blockprofilerate                      uint64
  type  bmap                                  struct{tophash [8]uint8}
    method (*bmap) overflow(t *maptype) *bmap
  func  breakpoint                            func()
  const buckHashSize                          buckHashSize = 179999:untyped int
  type  bucket                                struct{next *bucket; allnext *bucket; typ bucketType; hash uintptr; size uintptr; nstk uintptr}
    method (*bucket) bp() *blockRecord
    method (*bucket) mp() *memRecord
    method (*bucket) stk() []uintptr
  const bucketCnt                             bucketCnt = 8:untyped int
  const bucketCntBits                         bucketCntBits = 3:untyped int
  type  bucketType                            int
  var   bucketmem                             uintptr
  var   buckhash                              *[179999]*bucket
  var   buf                                   [4096]byte
  const bufSize                               bufSize = 4096:untyped int
  var   buildVersion                          string
  func  bulkBarrierBitmap                     func(p uintptr, size uintptr, maskOffset uintptr, bits *uint8)
  func  bytes                                 func(s string) (ret []byte)
  func  bytesHash                             func(b []byte, seed uintptr) uintptr
  const c0                                    c0 = 33054211828000289:uintptr
  const c1                                    c1 = 23344194077549503:uintptr
  func  c128equal                             func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  c128hash                              func(p unsafe.Pointer, h uintptr) uintptr
  func  c64equal                              func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  c64hash                               func(p unsafe.Pointer, h uintptr) uintptr
  func  cachestats                            func()
  func  call1024                              func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call1048576                           func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call1073741824                        func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call128                               func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call131072                            func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call134217728                         func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call16384                             func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call16777216                          func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call2048                              func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call2097152                           func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call256                               func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call262144                            func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call268435456                         func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call32                                func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call32768                             func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call33554432                          func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call4096                              func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call4194304                           func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call512                               func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call524288                            func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call536870912                         func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call64                                func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call65536                             func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call67108864                          func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call8192                              func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  call8388608                           func(fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  func  callCgoMmap                           func(addr unsafe.Pointer, n uintptr, prot int32, flags int32, fd int32, off uint32) uintptr
  func  callCgoSymbolizer                     func(arg *cgoSymbolizerArg)
  func  callers                               func(skip int, pcbuf []uintptr) int
  func  callwritebarrier                      func(typ *_type, frame unsafe.Pointer, framesize uintptr, retoffset uintptr)
  func  canpanic                              func(gp *g) bool
  func  cansemacquire                         func(addr *uint32) bool
  const caseDefault                           caseDefault = 3:untyped int
  const caseRecv                              caseRecv = 1:untyped int
  const caseSend                              caseSend = 2:untyped int
  func  casfrom_Gscanstatus                   func(gp *g, oldval uint32, newval uint32)
  func  casgcopystack                         func(gp *g) uint32
  func  casgstatus                            func(gp *g, oldval uint32, newval uint32)
  func  casp                                  func(ptr *unsafe.Pointer, old unsafe.Pointer, new unsafe.Pointer) bool
  func  castogscanstatus                      func(gp *g, oldval uint32, newval uint32) bool
  func  cfuncname                             func(f *_func) *byte
  var   cgoAlwaysFalse                        bool
  type  cgoCallers                            [32]uintptr
  func  cgoCheckArg                           func(t *_type, p unsafe.Pointer, indir bool, top bool, msg string)
  func  cgoCheckBits                          func(src unsafe.Pointer, gcbits *byte, off uintptr, size uintptr)
  func  cgoCheckMemmove                       func(typ *_type, dst unsafe.Pointer, src unsafe.Pointer, off uintptr, size uintptr)
  func  cgoCheckPointer                       func(ptr interface{}, args ...interface{}) interface{}
  const cgoCheckPointerFail                   cgoCheckPointerFail = "cgo argument has ...":untyped string
  func  cgoCheckResult                        func(val interface{})
  func  cgoCheckSliceCopy                     func(typ *_type, dst slice, src slice, n int)
  func  cgoCheckTypedBlock                    func(typ *_type, src unsafe.Pointer, off uintptr, size uintptr)
  func  cgoCheckUnknownPointer                func(p unsafe.Pointer, msg string) (base uintptr, i uintptr)
  func  cgoCheckUsingType                     func(typ *_type, src unsafe.Pointer, off uintptr, size uintptr)
  func  cgoCheckWriteBarrier                  func(dst *uintptr, src uintptr)
  var   cgoContext                            unsafe.Pointer
  type  cgoContextArg                         struct{context uintptr}
  func  cgoContextPCs                         func(ctxt uintptr, buf []uintptr)
  var   cgoHasExtraM                          bool
  func  cgoInRange                            func(p unsafe.Pointer, start uintptr, end uintptr) bool
  func  cgoIsGoPointer                        func(p unsafe.Pointer) bool
  const cgoResultFail                         cgoResultFail = "cgo result has Go...":untyped string
  func  cgoSigtramp                           func()
  var   cgoSymbolizer                         unsafe.Pointer
  type  cgoSymbolizerArg                      struct{pc uintptr; file *byte; lineno uintptr; funcName *byte; entry uintptr; more uintptr; data uintptr}
  var   cgoThreadStart                        unsafe.Pointer
  var   cgoTraceback                          unsafe.Pointer
  type  cgoTracebackArg                       struct{context uintptr; sigContext uintptr; buf *uintptr; max uintptr}
  func  cgoUse                                func(interface{})
  const cgoWriteBarrierFail                   cgoWriteBarrierFail = "Go pointer stored...":untyped string
  func  cgocall                               func(fn unsafe.Pointer, arg unsafe.Pointer) int32
  func  cgocallback                           func(fn unsafe.Pointer, frame unsafe.Pointer, framesize uintptr, ctxt uintptr)
  func  cgocallback_gofunc                    func(fv uintptr, frame uintptr, framesize uintptr, ctxt uintptr)
  var   cgocallback_gofuncPC                  uintptr
  func  cgocallbackg                          func(ctxt uintptr)
  func  cgocallbackg1                         func(ctxt uintptr)
  type  cgothreadstart                        struct{g guintptr; tls *uint64; fn unsafe.Pointer}
  func  cgounimpl                             func()
  func  chanbuf                               func(c *hchan, i uint) unsafe.Pointer
  func  chanrecv                              func(t *chantype, c *hchan, ep unsafe.Pointer, block bool) (selected bool, received bool)
  func  chanrecv1                             func(t *chantype, c *hchan, elem unsafe.Pointer)
  func  chanrecv2                             func(t *chantype, c *hchan, elem unsafe.Pointer) (received bool)
  var   chanrecvpc                            uintptr
  func  chansend                              func(t *chantype, c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool
  func  chansend1                             func(t *chantype, c *hchan, elem unsafe.Pointer)
  var   chansendpc                            uintptr
  type  chantype                              struct{typ _type; elem *_type; dir uintptr}
  func  charntorune                           func(s string) (rune, int)
  func  check                                 func()
  func  checkASM                              func() bool
  func  checkdead                             func()
  func  checkmcount                           func()
  type  childInfo                             struct{argoff uintptr; arglen uintptr; args bitvector; sp *uint8; depth uintptr}
  var   class_to_allocnpages                  [67]int32
  var   class_to_divmagic                     [67]divMagic
  var   class_to_size                         [67]int32
  func  clearCheckmarks                       func()
  func  clearpools                            func()
  func  clone                                 func(flags int32, stk unsafe.Pointer, mm unsafe.Pointer, gg unsafe.Pointer, fn unsafe.Pointer) int32
  const cloneFlags                            cloneFlags = 69376:untyped int
  func  closechan                             func(c *hchan)
  func  closefd                               func(fd int32) int32
  func  closeonexec                           func(fd int32)
  const cntBits                               cntBits = 19:untyped int
  func  complex128div                         func(n complex128, d complex128) complex128
  func  computeDivMagic                       func(d uint32) divMagic
  func  concatstring2                         func(buf *tmpBuf, a [2]string) string
  func  concatstring3                         func(buf *tmpBuf, a [3]string) string
  func  concatstring4                         func(buf *tmpBuf, a [4]string) string
  func  concatstring5                         func(buf *tmpBuf, a [5]string) string
  func  concatstrings                         func(buf *tmpBuf, a []string) string
  const concurrentSweep                       concurrentSweep = true:untyped bool
  func  contains                              func(s string, t string) bool
  func  convI2E                               func(i iface) (r eface)
  func  convI2I                               func(inter *interfacetype, i iface) (r iface)
  func  convT2E                               func(t *_type, elem unsafe.Pointer, x unsafe.Pointer) (e eface)
  func  convT2I                               func(tab *itab, elem unsafe.Pointer, x unsafe.Pointer) (i iface)
  func  copystack                             func(gp *g, newsize uintptr, sync bool)
  type  cpuProfile                            struct{on bool; wait note; count uintptr; evicts uintptr; lost uintptr; hash [1024]struct{entry [4]cpuprofEntry}; log [2][65536]uintptr; nlog int; toggle int32; handoff uint32; wtoggle uint32; wholding bool; flushing bool; eodSent bool}
    method (*cpuProfile) add(pc []uintptr)
    method (*cpuProfile) addNonGo(pc []uintptr)
    method (*cpuProfile) addWithFlushlog(pc []uintptr, flushlog func() bool)
    method (*cpuProfile) evict(e *cpuprofEntry, flushlog func() bool) bool
    method (*cpuProfile) flushlog() bool
    method (*cpuProfile) getprofile() []byte
  var   cpuid_ebx7                            uint32
  var   cpuid_ecx                             uint32
  var   cpuid_edx                             uint32
  var   cpuprof                               *cpuProfile
  type  cpuprofEntry                          struct{count uintptr; depth int; stack [64]uintptr}
  var   cpuprofLock                           mutex
  func  cputicks                              func() int64
  func  crash                                 func()
  var   crashing                              int32
  func  createfing                            func()
  func  cstring                               func(s string) unsafe.Pointer
  const dataOffset                            dataOffset = 8:uintptr
  type  dbgVar                                struct{name string; value *int32}
  var   dbgvars                               []dbgVar
  var   deadlock                              mutex
  var   debug                                 struct{allocfreetrace int32; cgocheck int32; efence int32; gccheckmark int32; gcpacertrace int32; gcshrinkstackoff int32; gcstackbarrieroff int32; gcstackbarrierall int32; gcstoptheworld int32; gctrace int32; invalidptr int32; sbrk int32; scavenge int32; scheddetail int32; schedtrace int32; wbshadow int32}
  const debugChan                             debugChan = false:untyped bool
  const debugMalloc                           debugMalloc = false:untyped bool
  const debugPcln                             debugPcln = false:untyped bool
  var   debugPtrmask                          struct{lock mutex; data *byte}
  const debugSelect                           debugSelect = false:untyped bool
  const debugStackBarrier                     debugStackBarrier = false:untyped bool
  var   debuglock                             mutex
  func  deductSweepCredit                     func(spanBytes uintptr, callerSweepPages uintptr)
  const defaultHeapMinimum                    defaultHeapMinimum = 4194304:untyped int
  func  deferArgs                             func(d *_defer) unsafe.Pointer
  const deferHeaderSize                       deferHeaderSize = 48:uintptr
  var   deferType                             *_type
  func  deferclass                            func(siz uintptr) uintptr
  func  deferproc                             func(siz int32, fn *funcval)
  func  deferreturn                           func(arg0 uintptr)
  func  deltimer                              func(t *timer) bool
  func  dequeueRescan                         func(gp *g)
  var   didothers                             bool
  func  dieFromSignal                         func(sig int32)
  var   disableSigChan                        chan uint32
  type  divMagic                              struct{shift uint8; mul uint32; shift2 uint8; baseMask uintptr}
  var   divideError                           error
  func  divlu                                 func(u1 uint64, u0 uint64, v uint64) (q uint64, r uint64)
  func  dolockOSThread                        func()
  func  dopanic                               func(unused int)
  func  dopanic_m                             func(gp *g, pc uintptr, sp uintptr)
  func  dounlockOSThread                      func()
  func  dropg                                 func()
  func  dropm                                 func()
  func  dumpGCProg                            func(p *byte)
  func  dumpbool                              func(b bool)
  func  dumpbv                                func(cbv *bitvector, offset uintptr)
  func  dumpbvtypes                           func(bv *bitvector, base unsafe.Pointer)
  var   dumpfd                                uintptr
  func  dumpfields                            func(bv bitvector)
  func  dumpfinalizer                         func(obj unsafe.Pointer, fn *funcval, fint *_type, ot *ptrtype)
  func  dumpframe                             func(s *stkframe, arg unsafe.Pointer) bool
  func  dumpgoroutine                         func(gp *g)
  func  dumpgs                                func()
  func  dumpgstatus                           func(gp *g)
  var   dumphdr                               []byte
  func  dumpint                               func(v uint64)
  func  dumpitabs                             func()
  func  dumpmemprof                           func()
  func  dumpmemprof_callback                  func(b *bucket, nstk uintptr, pstk *uintptr, size uintptr, allocs uintptr, frees uintptr)
  func  dumpmemrange                          func(data unsafe.Pointer, len uintptr)
  func  dumpmemstats                          func()
  func  dumpms                                func()
  func  dumpobj                               func(obj unsafe.Pointer, size uintptr, bv bitvector)
  func  dumpobjs                              func()
  func  dumpotherroot                         func(description string, to unsafe.Pointer)
  func  dumpparams                            func()
  func  dumpregs                              func(c *sigctxt)
  func  dumproots                             func()
  func  dumpslice                             func(b []byte)
  func  dumpstr                               func(s string)
  func  dumptype                              func(t *_type)
  func  dwrite                                func(data unsafe.Pointer, len uintptr)
  func  dwritebyte                            func(b byte)
  var   earlycgocallback                      []byte
  type  eface                                 struct{_type *_type; data unsafe.Pointer}
  func  efaceHash                             func(i interface{}, seed uintptr) uintptr
  func  efaceOf                               func(ep *interface{}) *eface
  func  efaceeq                               func(x eface, y eface) bool
  type  elf64Auxv                             struct{a_type uint64; a_val uint64}
  type  elf64Dyn                              struct{d_tag int64; d_val uint64}
  type  elf64Ehdr                             struct{e_ident [16]byte; e_type uint16; e_machine uint16; e_version uint32; e_entry uint64; e_phoff uint64; e_shoff uint64; e_flags uint32; e_ehsize uint16; e_phentsize uint16; e_phnum uint16; e_shentsize uint16; e_shnum uint16; e_shstrndx uint16}
  type  elf64Phdr                             struct{p_type uint32; p_flags uint32; p_offset uint64; p_vaddr uint64; p_paddr uint64; p_filesz uint64; p_memsz uint64; p_align uint64}
  type  elf64Shdr                             struct{sh_name uint32; sh_type uint32; sh_flags uint64; sh_addr uint64; sh_offset uint64; sh_size uint64; sh_link uint32; sh_info uint32; sh_addralign uint64; sh_entsize uint64}
  type  elf64Sym                              struct{st_name uint32; st_info byte; st_other byte; st_shndx uint16; st_value uint64; st_size uint64}
  type  elf64Verdaux                          struct{vda_name uint32; vda_next uint32}
  type  elf64Verdef                           struct{vd_version uint16; vd_flags uint16; vd_ndx uint16; vd_cnt uint16; vd_hash uint32; vd_aux uint32; vd_next uint32}
  const empty                                 empty = 0:untyped int
  var   emptymspan                            mspan
  var   emptystring                           string
  var   enableSigChan                         chan uint32
  func  endcgo                                func(mp *m)
  func  ensureSigM                            func()
  func  entersyscall                          func(dummy int32)
  func  entersyscall_gcwait                   func()
  func  entersyscall_sysmon                   func()
  func  entersyscallblock                     func(dummy int32)
  func  entersyscallblock_handoff             func()
  func  environ                               func() []string
  var   envs                                  []string
  var   eod                                   [3]uintptr
  var   epfd                                  int32
  func  epollcreate                           func(size int32) int32
  func  epollcreate1                          func(flags int32) int32
  func  epollctl                              func(epfd int32, op int32, fd int32, ev *epollevent) int32
  type  epollevent                            struct{events uint32; data [8]byte}
  func  epollwait                             func(epfd int32, ev *epollevent, nev int32, timeout int32) int32
  func  eqslice                               func(x []uintptr, y []uintptr) bool
  type  errorString                           string
    method (errorString) Error() string
    method (errorString) RuntimeError()
  func  evacuate                              func(t *maptype, h *hmap, oldbucket uintptr)
  func  evacuated                             func(b *bmap) bool
  const evacuatedEmpty                        evacuatedEmpty = 1:untyped int
  const evacuatedX                            evacuatedX = 2:untyped int
  const evacuatedY                            evacuatedY = 3:untyped int
  func  execute                               func(gp *g, inheritTime bool)
  func  exit                                  func(code int32)
  func  exit1                                 func(code int32)
  func  exitsyscall                           func(dummy int32)
  func  exitsyscall0                          func(gp *g)
  func  exitsyscallfast                       func() bool
  func  exitsyscallfast_pidle                 func() bool
  const expbits32                             expbits32 = 8:uint
  const expbits64                             expbits64 = 11:uint
  func  extendRandom                          func(r []byte, n int)
  var   externalthreadhandlerp                uintptr
  var   extraMWaiters                         uint32
  var   extram                                uintptr
  func  f32equal                              func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  f32hash                               func(p unsafe.Pointer, h uintptr) uintptr
  func  f32to64                               func(f uint32) uint64
  func  f64equal                              func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  f64hash                               func(p unsafe.Pointer, h uintptr) uintptr
  func  f64to32                               func(f uint64) uint32
  func  f64toint                              func(f uint64) (val int64, ok bool)
  func  fadd64                                func(f uint64, g uint64) uint64
  var   failallocatestack                     []byte
  var   failthreadcreate                      []byte
  var   faketime                              int64
  func  fastlog2                              func(x float64) float64
  var   fastlog2Table                         [33]float64
  const fastlogNumBits                        fastlogNumBits = 5:untyped int
  func  fastrand1                             func() uint32
  func  fcmp64                                func(f uint64, g uint64) (cmp int32, isnan bool)
  func  fdiv64                                func(f uint64, g uint64) uint64
  const fieldKindEface                        fieldKindEface = 3:untyped int
  const fieldKindEol                          fieldKindEol = 0:untyped int
  const fieldKindIface                        fieldKindIface = 2:untyped int
  const fieldKindPtr                          fieldKindPtr = 1:untyped int
  func  fillstack                             func(stk stack, b byte)
  type  finalizer                             struct{fn *funcval; arg unsafe.Pointer; nret uintptr; fint *_type; ot *ptrtype}
  var   finalizer1                            [5]byte
  type  finblock                              struct{alllink *finblock; next *finblock; cnt int32; _ int32; fin [101]finalizer}
  var   finc                                  *finblock
  func  findObject                            func(v unsafe.Pointer) (s *mspan, x unsafe.Pointer, n uintptr)
  func  findfunc                              func(pc uintptr) *_func
  type  findfuncbucket                        struct{idx uint32; subbuckets [16]byte}
  func  findmoduledatap                       func(pc uintptr) *moduledata
  func  findnull                              func(s *byte) int
  func  findnullw                             func(s *uint16) int
  func  findrunnable                          func() (gp *g, inheritTime bool)
  func  findsghi                              func(gp *g, stk stack) uintptr
  var   fing                                  *g
  var   fingCreate                            uint32
  var   fingRunning                           bool
  var   fingwait                              bool
  var   fingwake                              bool
  func  finishsweep_m                         func(stw bool)
  var   finlock                               mutex
  var   finptrmask                            [64]byte
  var   finq                                  *finblock
  func  finq_callback                         func(fn *funcval, obj unsafe.Pointer, nret uintptr, fint *_type, ot *ptrtype)
  func  fintto64                              func(val int64) (f uint64)
  var   firstStackBarrierOffset               int
  var   firstmoduledata                       moduledata
  type  fixalloc                              struct{size uintptr; first func(arg unsafe.Pointer, p unsafe.Pointer); arg unsafe.Pointer; list *mlink; chunk unsafe.Pointer; nchunk uint32; inuse uintptr; stat *uint64}
    method (*fixalloc) alloc() unsafe.Pointer
    method (*fixalloc) free(p unsafe.Pointer)
    method (*fixalloc) init(size uintptr, first func(arg unsafe.Pointer, p unsafe.Pointer), arg unsafe.Pointer, stat *uint64)
  const fixedRootCount                        fixedRootCount = 3:untyped int
  const fixedRootFinalizers                   fixedRootFinalizers = 0:untyped int
  const fixedRootFlushCaches                  fixedRootFlushCaches = 1:untyped int
  const fixedRootFreeGStacks                  fixedRootFreeGStacks = 2:untyped int
  const float64Bias                           float64Bias = 1023:untyped int
  const float64Inf                            float64Inf = 9218868437227405312:untyped int
  const float64Mask                           float64Mask = 2047:untyped int
  const float64NaN                            float64NaN = 9221120237041090561:untyped int
  const float64Shift                          float64Shift = 52:untyped int
  func  float64bits                           func(f float64) uint64
  var   floatError                            error
  func  flush                                 func()
  func  flushallmcaches                       func()
  func  fmtNSAsMS                             func(buf []byte, ns uint64) []byte
  func  fmul64                                func(f uint64, g uint64) uint64
  func  fneg64                                func(f uint64) uint64
  func  forEachP                              func(fn func(*p))
  const forcePreemptNS                        forcePreemptNS = 10000000:untyped int
  var   forcegc                               forcegcstate
  func  forcegchelper                         func()
  var   forcegchelperPC                       uintptr
  var   forcegcperiod                         int64
  type  forcegcstate                          struct{lock mutex; g *g; idle uint32}
  func  fpack32                               func(sign uint32, mant uint32, exp int, trunc uint32) uint32
  func  fpack64                               func(sign uint64, mant uint64, exp int, trunc uint64) uint64
  type  fpreg1                                struct{significand [4]uint16; exponent uint16}
  type  fpstate                               struct{cwd uint16; swd uint16; ftw uint16; fop uint16; rip uint64; rdp uint64; mxcsr uint32; mxcr_mask uint32; _st [8]fpxreg; _xmm [16]xmmreg; padding [24]uint32}
  type  fpstate1                              struct{cwd uint16; swd uint16; ftw uint16; fop uint16; rip uint64; rdp uint64; mxcsr uint32; mxcr_mask uint32; _st [8]fpxreg1; _xmm [16]xmmreg1; padding [24]uint32}
  type  fpxreg                                struct{significand [4]uint16; exponent uint16; padding [3]uint16}
  type  fpxreg1                               struct{significand [4]uint16; exponent uint16; padding [3]uint16}
  var   framepointer_enabled                  bool
  func  freeStackSpans                        func()
  func  freedefer                             func(d *_defer)
  func  freedeferfn                           func()
  func  freedeferpanic                        func()
  var   freemark                              [1024]bool
  func  freemcache                            func(c *mcache)
  func  freespecial                           func(s *special, p unsafe.Pointer, size uintptr)
  const freezeStopWait                        freezeStopWait = 2147483647:untyped int
  func  freezetheworld                        func()
  func  fsub64                                func(f uint64, g uint64) uint64
  func  funcPC                                func(f interface{}) uintptr
  func  funcdata                              func(f *_func, i int32) unsafe.Pointer
  func  funcline                              func(f *_func, targetpc uintptr) (file string, line int32)
  func  funcline1                             func(f *_func, targetpc uintptr, strict bool) (file string, line int32)
  func  funcname                              func(f *_func) string
  func  funcspdelta                           func(f *_func, targetpc uintptr, cache *pcvalueCache) int32
  type  functab                               struct{entry uintptr; funcoff uintptr}
  type  functype                              struct{typ _type; inCount uint16; outCount uint16}
    method (*functype) dotdotdot() bool
    method (*functype) in() []*_type
    method (*functype) out() []*_type
  type  funcval                               struct{fn uintptr}
  func  funpack32                             func(f uint32) (sign uint32, mant uint32, exp int, inf bool, nan bool)
  func  funpack64                             func(f uint64) (sign uint64, mant uint64, exp int, inf bool, nan bool)
  func  futex                                 func(addr unsafe.Pointer, op int32, val uint32, ts unsafe.Pointer, addr2 unsafe.Pointer, val3 uint32) int32
  func  futexsleep                            func(addr *uint32, val uint32, ns int64)
  func  futexwakeup                           func(addr *uint32, cnt uint32)
  var   fwdSig                                [65]uintptr
  type  g                                     struct{stack stack; stackguard0 uintptr; stackguard1 uintptr; _panic *_panic; _defer *_defer; m *m; stackAlloc uintptr; sched gobuf; syscallsp uintptr; syscallpc uintptr; stkbar []stkbar; stkbarPos uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; waitsince int64; waitreason string; schedlink guintptr; preempt bool; paniconfault bool; preemptscan bool; gcscandone bool; gcscanvalid bool; throwsplit bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp puintptr; lockedm *m; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; startpc uintptr; racectx uintptr; waiting *sudog; cgoCtxt []uintptr; gcRescan int32; gcAssistBytes int64}
  var   g0                                    g
  var   gStatusStrings                        [9]string
  func  gcAssistAlloc                         func(gp *g)
  const gcAssistTimeSlack                     gcAssistTimeSlack = 5000:untyped int
  const gcBackgroundMode                      gcBackgroundMode = 0:gcMode
  func  gcBgMarkPrepare                       func()
  func  gcBgMarkStartWorkers                  func()
  func  gcBgMarkWorker                        func(_p_ *p)
  var   gcBgMarkWorkerPC                      uintptr
  type  gcBits                                struct{free uintptr; next *gcBits; bits [65520]uint8}
  var   gcBitsArenas                          struct{lock mutex; free *gcBits; next *gcBits; current *gcBits; previous *gcBits}
  const gcBitsChunkBytes                      gcBitsChunkBytes = 65536:uintptr
  type  gcBitsHeader                          struct{free uintptr; next uintptr}
  const gcBitsHeaderBytes                     gcBitsHeaderBytes = 16:uintptr
  var   gcBlackenEnabled                      uint32
  var   gcBlackenPromptly                     bool
  var   gcController                          gcControllerState
  type  gcControllerState                     struct{scanWork int64; bgScanCredit int64; assistTime int64; dedicatedMarkTime int64; fractionalMarkTime int64; idleMarkTime int64; markStartTime int64; heapGoal uint64; dedicatedMarkWorkersNeeded int64; assistWorkPerByte float64; assistBytesPerWork float64; fractionalUtilizationGoal float64; triggerRatio float64; _ [64]byte; fractionalMarkWorkersNeeded int64; _ [64]byte}
    method (*gcControllerState) endCycle()
    method (*gcControllerState) enlistWorker()
    method (*gcControllerState) findRunnableGCWorker(_p_ *p) *g
    method (*gcControllerState) revise()
    method (*gcControllerState) startCycle()
  func  gcCopySpans                           func()
  const gcCreditSlack                         gcCreditSlack = 2000:untyped int
  func  gcDrain                               func(gcw *gcWork, flags gcDrainFlags)
  const gcDrainBlock                          gcDrainBlock = 0:gcDrainFlags
  type  gcDrainFlags                          int
  const gcDrainFlushBgCredit                  gcDrainFlushBgCredit = 4:gcDrainFlags
  func  gcDrainN                              func(gcw *gcWork, scanWork int64) int64
  const gcDrainNoBlock                        gcDrainNoBlock = 2:gcDrainFlags
  const gcDrainUntilPreempt                   gcDrainUntilPreempt = 1:gcDrainFlags
  func  gcDumpObject                          func(label string, obj uintptr, off uintptr)
  func  gcFlushBgCredit                       func(scanWork int64)
  func  gcFlushGCWork                         func()
  const gcForceBlockMode                      gcForceBlockMode = 2:gcMode
  const gcForceMode                           gcForceMode = 1:gcMode
  const gcGoalUtilization                     gcGoalUtilization = 0.25:untyped float
  func  gcInstallStackBarrier                 func(gp *g, frame *stkframe) bool
  func  gcLockStackBarriers                   func(gp *g)
  func  gcMark                                func(start_time int64)
  func  gcMarkDone                            func()
  func  gcMarkRootCheck                       func()
  func  gcMarkRootPrepare                     func()
  func  gcMarkTermination                     func()
  func  gcMarkWorkAvailable                   func(p *p) bool
  const gcMarkWorkerDedicatedMode             gcMarkWorkerDedicatedMode = 0:gcMarkWorkerMode
  const gcMarkWorkerFractionalMode            gcMarkWorkerFractionalMode = 1:gcMarkWorkerMode
  const gcMarkWorkerIdleMode                  gcMarkWorkerIdleMode = 2:gcMarkWorkerMode
  type  gcMarkWorkerMode                      int
  func  gcMaxStackBarriers                    func(stackSize int) (n int)
  type  gcMode                                int
  const gcOverAssistWork                      gcOverAssistWork = 65536:untyped int
  func  gcPrintStkbars                        func(gp *g, marker int)
  func  gcRemoveStackBarrier                  func(gp *g, stkbar stkbar)
  func  gcRemoveStackBarriers                 func(gp *g)
  func  gcResetMarkState                      func()
  func  gcShouldStart                         func(forceTrigger bool) bool
  func  gcStart                               func(mode gcMode, forceTrigger bool)
  func  gcSweep                               func(mode gcMode)
  func  gcTryLockStackBarriers                func(gp *g) bool
  func  gcTryRemoveAllStackBarriers           func(gps []*g)
  func  gcUnlockStackBarriers                 func(gp *g)
  func  gcUnwindBarriers                      func(gp *g, sp uintptr)
  func  gcWakeAllAssists                      func()
  type  gcWork                                struct{wbuf1 wbufptr; wbuf2 wbufptr; bytesMarked uint64; scanWork int64}
    method (*gcWork) balance()
    method (*gcWork) dispose()
    method (*gcWork) empty() bool
    method (*gcWork) get() uintptr
    method (*gcWork) init()
    method (*gcWork) put(obj uintptr)
    method (*gcWork) putFast(obj uintptr) bool
    method (*gcWork) tryGet() uintptr
    method (*gcWork) tryGetFast() uintptr
  func  gcallers                              func(gp *g, skip int, pcbuf []uintptr) int
  func  gcd                                   func(a uint32, b uint32) uint32
  func  gcenable                              func()
  func  gchelper                              func()
  func  gchelperstart                         func()
  func  gcinit                                func()
  type  gclink                                struct{next gclinkptr}
  type  gclinkptr                             uintptr
    method (gclinkptr) ptr() *gclink
  func  gcmarknewobject                       func(obj uintptr, size uintptr, scanSize uintptr)
  func  gcmarkwb_m                            func(slot *uintptr, ptr uintptr)
  func  gcount                                func() int32
  var   gcpercent                             int32
  var   gcphase                               uint32
  func  gcprocs                               func() int32
  type  gcstats                               struct{nhandoff uint64; nhandoffcnt uint64; nprocyield uint64; nosyield uint64; nsleep uint64}
  func  gcstopm                               func()
  func  gentraceback                          func(pc0 uintptr, sp0 uintptr, lr0 uintptr, gp *g, skip int, pcbuf *uintptr, max int, callback func(*stkframe, unsafe.Pointer) bool, v unsafe.Pointer, flags uint) int
  func  getArgInfo                            func(frame *stkframe, f *_func, needArgMap bool) (arglen uintptr, argmap *bitvector)
  func  getRandomData                         func(r []byte)
  func  getargp                               func(x int) uintptr
  func  getcallerpc                           func(argp unsafe.Pointer) uintptr
  func  getcallersp                           func(argp unsafe.Pointer) uintptr
  func  getempty                              func() *workbuf
  func  getfull                               func() *workbuf
  func  getg                                  func() *g
  func  getgcmask                             func(ep interface{}) (mask []byte)
  func  getgcmaskcb                           func(frame *stkframe, ctxt unsafe.Pointer) bool
  func  getitab                               func(inter *interfacetype, typ *_type, canfail bool) *itab
  func  getm                                  func() uintptr
  func  getproccount                          func() int32
  func  getrlimit                             func(kind int32, limit unsafe.Pointer) int32
  func  getsig                                func(i int32) uintptr
  func  gettid                                func() uint32
  func  gfget                                 func(_p_ *p) *g
  func  gfpurge                               func(_p_ *p)
  func  gfput                                 func(_p_ *p, gp *g)
  var   globalAlloc                           struct{mutex; persistentAlloc}
  func  globrunqget                           func(_p_ *p, max int32) *g
  func  globrunqput                           func(gp *g)
  func  globrunqputbatch                      func(ghead *g, gtail *g, n int32)
  func  globrunqputhead                       func(gp *g)
  func  goargs                                func()
  var   goarm                                 uint8
  type  gobitvector                           struct{n uintptr; bytedata []uint8}
  type  gobuf                                 struct{sp uintptr; pc uintptr; g guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}
  func  gobv                                  func(bv bitvector) gobitvector
  func  gobytes                               func(p *byte, n int) []byte
  func  goenvs                                func()
  func  goenvs_unix                           func()
  func  goexit                                func(neverCallThisFunction)
  func  goexit0                               func(gp *g)
  func  goexit1                               func()
  var   goexitPC                              uintptr
  func  gogetenv                              func(key string) string
  func  gogo                                  func(buf *gobuf)
  var   gogoPC                                uintptr
  var   gomaxprocs                            int32
  func  gomcache                              func() *mcache
  func  gopanic                               func(e interface{})
  func  gopark                                func(unlockf func(*g, unsafe.Pointer) bool, lock unsafe.Pointer, reason string, traceEv byte, traceskip int)
  func  goparkunlock                          func(lock *mutex, reason string, traceEv byte, traceskip int)
  func  gopreempt_m                           func(gp *g)
  func  goready                               func(gp *g, traceskip int)
  func  gorecover                             func(argp uintptr) interface{}
  func  goroutineReady                        func(arg interface{}, seq uintptr)
  func  goroutineheader                       func(gp *g)
  func  gosave                                func(buf *gobuf)
  func  goschedImpl                           func(gp *g)
  func  gosched_m                             func(gp *g)
  func  gostartcall                           func(buf *gobuf, fn unsafe.Pointer, ctxt unsafe.Pointer)
  func  gostartcallfn                         func(gobuf *gobuf, fv *funcval)
  func  gostring                              func(p *byte) string
  func  gostringn                             func(p *byte, l int) string
  func  gostringnocopy                        func(str *byte) string
  func  gostringw                             func(strw *uint16) string
  func  gosweepdone                           func() bool
  func  gosweepone                            func() uintptr
  func  gotraceback                           func() (level int32, all bool, crash bool)
  func  greyobject                            func(obj uintptr, base uintptr, off uintptr, hbits heapBits, span *mspan, gcw *gcWork, objIndex uintptr)
  func  growWork                              func(t *maptype, h *hmap, bucket uintptr)
  func  growslice                             func(et *_type, old slice, cap int) slice
  type  guintptr                              uintptr
    method (*guintptr) cas(old guintptr, new guintptr) bool
    method (guintptr) ptr() *g
    method (*guintptr) set(g *g)
  func  gwrite                                func(b []byte)
  var   h_allspans                            []*mspan
  var   h_spans                               []*mspan
  func  handoff                               func(b *workbuf) *workbuf
  func  handoffp                              func(_p_ *p)
  func  hasPrefix                             func(s string, prefix string) bool
  var   hash                                  [1009]*itab
  func  hashGrow                              func(t *maptype, h *hmap)
  var   hashLoad                              float64
  const hashRandomBytes                       hashRandomBytes = 128:untyped int
  const hashSize                              hashSize = 1009:untyped int
  const hashWriting                           hashWriting = 4:untyped int
  var   hashkey                               [4]uintptr
  func  hasprefix                             func(s string, t string) bool
  func  haveexperiment                        func(name string) bool
  type  hchan                                 struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *_type; sendx uint; recvx uint; recvq waitq; sendq waitq; lock mutex}
    method (*hchan) sortkey() uintptr
  const hchanSize                             hchanSize = 96:uintptr
  const heapBitmapScale                       heapBitmapScale = 32:untyped int
  type  heapBits                              struct{bitp *uint8; shift uint32}
    method (heapBits) bits() uint32
    method (heapBits) clearCheckmarkSpan(size uintptr, n uintptr, total uintptr)
    method (heapBits) forward(n uintptr) heapBits
    method (heapBits) hasPointers(size uintptr) bool
    method (heapBits) initCheckmarkSpan(size uintptr, n uintptr, total uintptr)
    method (heapBits) initSpan(s *mspan)
    method (heapBits) isCheckmarked(size uintptr) bool
    method (heapBits) isPointer() bool
    method (heapBits) morePointers() bool
    method (heapBits) next() heapBits
    method (heapBits) prefetch()
    method (heapBits) setCheckmarked(size uintptr)
  func  heapBitsBulkBarrier                   func(p uintptr, size uintptr)
  func  heapBitsForAddr                       func(addr uintptr) heapBits
  func  heapBitsForObject                     func(p uintptr, refBase uintptr, refOff uintptr) (base uintptr, hbits heapBits, s *mspan, objIndex uintptr)
  func  heapBitsForSpan                       func(base uintptr) (hbits heapBits)
  func  heapBitsSetType                       func(x uintptr, size uintptr, dataSize uintptr, typ *_type)
  func  heapBitsSetTypeGCProg                 func(h heapBits, progSize uintptr, elemSize uintptr, dataSize uintptr, allocSize uintptr, prog *byte)
  func  heapBitsSetTypeNoScan                 func(x uintptr)
  const heapBitsShift                         heapBitsShift = 1:untyped int
  var   heapminimum                           uint64
  func  helpgc                                func(nproc int32)
  type  hex                                   uint64
  type  hiter                                 struct{key unsafe.Pointer; value unsafe.Pointer; t *maptype; h *hmap; buckets unsafe.Pointer; bptr *bmap; overflow [2]*[]*bmap; startBucket uintptr; offset uint8; wrapped bool; B uint8; i uint8; bucket uintptr; checkBucket uintptr}
  type  hmap                                  struct{count int; flags uint8; B uint8; hash0 uint32; buckets unsafe.Pointer; oldbuckets unsafe.Pointer; nevacuate uintptr; overflow *[2]*[]*bmap}
    method (*hmap) createOverflow()
    method (*hmap) setoverflow(t *maptype, b *bmap, ovf *bmap)
  type  hselect                               struct{tcase uint16; ncase uint16; pollorder *uint16; lockorder *uint16; scase [1]scase}
  type  iface                                 struct{tab *itab; data unsafe.Pointer}
  func  ifaceHash                             func(i interface{F()}, seed uintptr) uintptr
  var   ifaceLock                             mutex
  func  ifaceeq                               func(x iface, y iface) bool
  type  imethod                               struct{name nameOff; ityp typeOff}
  func  inHeapOrStack                         func(b uintptr) bool
  func  incidlelocked                         func(v int32)
  func  index                                 func(s string, t string) int
  var   indexError                            error
  const inf32                                 inf32 = 2139095040:uint32
  const inf64                                 inf64 = 9218868437227405312:uint64
  func  inheap                                func(b uintptr) bool
  func  init                                  func()
  func  init#1                                func()
  func  init#2                                func()
  func  init#3                                func()
  func  init#4                                func()
  var   init$guard                            bool
  func  initCheckmarks                        func()
  var   initSigmask                           sigset
  func  initSizes                             func()
  func  initsig                               func(preinit bool)
  func  injectglist                           func(glist *g)
  func  int32Hash                             func(i uint32, seed uintptr) uintptr
  func  int64Hash                             func(i uint64, seed uintptr) uintptr
  func  interequal                            func(p unsafe.Pointer, q unsafe.Pointer) bool
  type  interfacetype                         struct{typ _type; pkgpath name; mhdr []imethod}
  func  interhash                             func(p unsafe.Pointer, h uintptr) uintptr
  func  intstring                             func(buf *[4]byte, v int64) string
  func  isDirectIface                         func(t *_type) bool
  func  isExportedRuntime                     func(name string) bool
  func  isSystemGoroutine                     func(gp *g) bool
  var   isarchive                             bool
  var   iscgo                                 bool
  var   islibrary                             bool
  func  ismapkey                              func(t *_type) bool
  func  isnan                                 func(f float64) bool
  func  isnanu                                func(ix uint64) bool
  func  isneginf                              func(f float64) bool
  func  isposinf                              func(f float64) bool
  func  isscanstatus                          func(status uint32) bool
  type  itab                                  struct{inter *interfacetype; _type *_type; link *itab; bad int32; unused int32; fun [1]uintptr}
  func  itab_callback                         func(tab *itab)
  func  itabhash                              func(inter *interfacetype, typ *_type) uint32
  func  itabsinit                             func()
  func  iterate_finq                          func(callback func(*funcval, unsafe.Pointer, uintptr, *_type, *ptrtype))
  func  iterate_itabs                         func(fn func(*itab))
  func  iterate_memprof                       func(fn func(*bucket, uintptr, *uintptr, uintptr, uintptr, uintptr))
  const iterator                              iterator = 1:untyped int
  type  itimerval                             struct{it_interval timeval; it_value timeval}
  func  itoaDiv                               func(buf []byte, val uint64, dec int) []byte
  func  jmpdefer                              func(fv *funcval, argp uintptr)
  var   jmpdeferPC                            uintptr
  func  key32                                 func(p *uintptr) *uint32
  const kindArray                             kindArray = 17:untyped int
  const kindBool                              kindBool = 1:untyped int
  const kindChan                              kindChan = 18:untyped int
  const kindComplex128                        kindComplex128 = 16:untyped int
  const kindComplex64                         kindComplex64 = 15:untyped int
  const kindDirectIface                       kindDirectIface = 32:untyped int
  const kindFloat32                           kindFloat32 = 13:untyped int
  const kindFloat64                           kindFloat64 = 14:untyped int
  const kindFunc                              kindFunc = 19:untyped int
  const kindGCProg                            kindGCProg = 64:untyped int
  const kindInt                               kindInt = 2:untyped int
  const kindInt16                             kindInt16 = 4:untyped int
  const kindInt32                             kindInt32 = 5:untyped int
  const kindInt64                             kindInt64 = 6:untyped int
  const kindInt8                              kindInt8 = 3:untyped int
  const kindInterface                         kindInterface = 20:untyped int
  const kindMap                               kindMap = 21:untyped int
  const kindMask                              kindMask = 31:untyped int
  const kindNoPointers                        kindNoPointers = 128:untyped int
  const kindPtr                               kindPtr = 22:untyped int
  const kindSlice                             kindSlice = 23:untyped int
  const kindString                            kindString = 24:untyped int
  const kindStruct                            kindStruct = 25:untyped int
  const kindUint                              kindUint = 7:untyped int
  const kindUint16                            kindUint16 = 9:untyped int
  const kindUint32                            kindUint32 = 10:untyped int
  const kindUint64                            kindUint64 = 11:untyped int
  const kindUint8                             kindUint8 = 8:untyped int
  const kindUintptr                           kindUintptr = 12:untyped int
  const kindUnsafePointer                     kindUnsafePointer = 26:untyped int
  func  largeAlloc                            func(size uintptr, needzero bool) *mspan
  var   lastmoduledatap                       *moduledata
  func  less                                  func(a uint32, b uint32) bool
  var   lfenceBeforeRdtsc                     bool
  type  lfnode                                struct{next uint64; pushcnt uintptr}
  func  lfstackPack                           func(node *lfnode, cnt uintptr) uint64
  func  lfstackUnpack                         func(val uint64) *lfnode
  func  lfstackpop                            func(head *uint64) unsafe.Pointer
  func  lfstackpush                           func(head *uint64, node *lfnode)
  type  libcall                               struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}
  func  libpreinit                            func()
  var   linux26                               version_key
  const loadFactor                            loadFactor = 6.5:untyped float
  func  lock                                  func(l *mutex)
  func  lockOSThread                          func()
  func  lockedOSThread                        func() bool
  func  lockextra                             func(nilokay bool) *m
  const logSize                               logSize = 131072:untyped int
  func  lostProfileData                       func()
  type  m                                     struct{g0 *g; morebuf gobuf; divmod uint32; procid uint64; gsignal *g; sigmask sigset; tls [6]uintptr; mstartfn func(); curg *g; caughtsig guintptr; p puintptr; nextp puintptr; id int32; mallocing int32; throwing int32; preemptoff string; locks int32; softfloat int32; dying int32; profilehz int32; helpgc int32; spinning bool; blocked bool; inwb bool; newSigstack bool; printlock int8; fastrand uint32; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *cgoCallers; park note; alllink *m; schedlink muintptr; mcache *mcache; lockedg *g; createstack [32]uintptr; freglo [16]uint32; freghi [16]uint32; fflag uint32; locked uint32; nextwaitm uintptr; gcstats gcstats; needextram bool; traceback uint8; waitunlockf unsafe.Pointer; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; thread uintptr; libcall libcall; libcallpc uintptr; libcallsp uintptr; libcallg guintptr; syscall libcall; mOS}
  var   m0                                    m
  const m1                                    m1 = 16877499708836156737:untyped int
  const m2                                    m2 = 2820277070424839065:untyped int
  const m3                                    m3 = 9497967016996688599:untyped int
  const m4                                    m4 = 15839092249703872147:untyped int
  type  mOS                                   struct{}
  func  mProf_Free                            func(b *bucket, size uintptr)
  func  mProf_GC                              func()
  func  mProf_Malloc                          func(p unsafe.Pointer, size uintptr)
  const mSpanInUse                            mSpanInUse = 0:untyped int
  type  mSpanList                             struct{first *mspan; last **mspan}
    method (*mSpanList) init()
    method (*mSpanList) insert(span *mspan)
    method (*mSpanList) insertBack(span *mspan)
    method (*mSpanList) isEmpty() bool
    method (*mSpanList) remove(span *mspan)
  func  mSysStatDec                           func(sysStat *uint64, n uintptr)
  func  mSysStatInc                           func(sysStat *uint64, n uintptr)
  func  madvise                               func(addr unsafe.Pointer, n uintptr, flags int32)
  func  main                                  func()
  func  main_init                             func()
  var   main_init_done                        chan bool
  func  main_main                             func()
  func  makechan                              func(t *chantype, size int64) *hchan
  func  makeheapobjbv                         func(p uintptr, size uintptr) bitvector
  func  makemap                               func(t *maptype, hint int64, h *hmap, bucket unsafe.Pointer) *hmap
  func  makeslice                             func(et *_type, len64 int64, cap64 int64) slice
  func  malg                                  func(stacksize int32) *g
  func  mallocgc                              func(size uintptr, typ *_type, needzero bool) unsafe.Pointer
  func  mallocinit                            func()
  const mantbits32                            mantbits32 = 23:uint
  const mantbits64                            mantbits64 = 52:uint
  func  mapaccess1                            func(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer
  func  mapaccess1_fast32                     func(t *maptype, h *hmap, key uint32) unsafe.Pointer
  func  mapaccess1_fast64                     func(t *maptype, h *hmap, key uint64) unsafe.Pointer
  func  mapaccess1_faststr                    func(t *maptype, h *hmap, ky string) unsafe.Pointer
  func  mapaccess1_fat                        func(t *maptype, h *hmap, key unsafe.Pointer, zero unsafe.Pointer) unsafe.Pointer
  func  mapaccess2                            func(t *maptype, h *hmap, key unsafe.Pointer) (unsafe.Pointer, bool)
  func  mapaccess2_fast32                     func(t *maptype, h *hmap, key uint32) (unsafe.Pointer, bool)
  func  mapaccess2_fast64                     func(t *maptype, h *hmap, key uint64) (unsafe.Pointer, bool)
  func  mapaccess2_faststr                    func(t *maptype, h *hmap, ky string) (unsafe.Pointer, bool)
  func  mapaccess2_fat                        func(t *maptype, h *hmap, key unsafe.Pointer, zero unsafe.Pointer) (unsafe.Pointer, bool)
  func  mapaccessK                            func(t *maptype, h *hmap, key unsafe.Pointer) (unsafe.Pointer, unsafe.Pointer)
  func  mapassign1                            func(t *maptype, h *hmap, key unsafe.Pointer, val unsafe.Pointer)
  func  mapdelete                             func(t *maptype, h *hmap, key unsafe.Pointer)
  func  mapiterinit                           func(t *maptype, h *hmap, it *hiter)
  func  mapiternext                           func(it *hiter)
  type  maptype                               struct{typ _type; key *_type; elem *_type; bucket *_type; hmap *_type; keysize uint8; indirectkey bool; valuesize uint8; indirectvalue bool; bucketsize uint16; reflexivekey bool; needkeyupdate bool}
  type  markBits                              struct{bytep *uint8; mask uint8; index uintptr}
    method (*markBits) advance()
    method (markBits) clearMarked()
    method (markBits) clearMarkedNonAtomic()
    method (markBits) isMarked() bool
    method (markBits) setMarked()
    method (markBits) setMarkedNonAtomic()
  func  markBitsForAddr                       func(p uintptr) markBits
  func  markBitsForSpan                       func(base uintptr) (mbits markBits)
  func  markroot                              func(gcw *gcWork, i uint32)
  func  markrootBlock                         func(b0 uintptr, n0 uintptr, ptrmask0 *uint8, gcw *gcWork, shard int)
  func  markrootFreeGStacks                   func()
  func  markrootSpans                         func(gcw *gcWork, shard int)
  var   maskUpdatedChan                       chan struct{}
  const maskx                                 maskx = 63:untyped int
  const maxAlign                              maxAlign = 8:untyped int
  const maxCPUProfStack                       maxCPUProfStack = 64:untyped int
  var   maxElems                              [33]uintptr
  const maxFloat64                            maxFloat64 = 1.79769e+308:untyped float
  const maxKeySize                            maxKeySize = 128:untyped int
  const maxObjsPerSpan                        maxObjsPerSpan = 1024:untyped int
  func  maxSliceCap                           func(elemsize uintptr) uintptr
  const maxSmallSize                          maxSmallSize = 32768:untyped int
  const maxStack                              maxStack = 32:untyped int
  const maxTinySize                           maxTinySize = 16:untyped int
  const maxValueSize                          maxValueSize = 128:untyped int
  const maxZero                               maxZero = 1024:untyped int
  var   maxstacksize                          uintptr
  var   maxstring                             uintptr
  var   mbuckets                              *bucket
  type  mcache                                struct{next_sample int32; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [67]*mspan; stackcache [4]stackfreelist; local_nlookup uintptr; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr}
    method (*mcache) nextFree(sizeclass int8) (v gclinkptr, s *mspan, shouldhelpgc bool)
    method (*mcache) refill(sizeclass int32) *mspan
    method (*mcache) releaseAll()
  func  mcall                                 func(fn func(*g))
  var   mcallPC                               uintptr
  type  mcentral                              struct{lock mutex; sizeclass int32; nonempty mSpanList; empty mSpanList}
    method (*mcentral) cacheSpan() *mspan
    method (*mcentral) freeSpan(s *mspan, preserve bool, wasempty bool) bool
    method (*mcentral) grow() *mspan
    method (*mcentral) init(sizeclass int32)
    method (*mcentral) uncacheSpan(s *mspan)
  func  mcommoninit                           func(mp *m)
  type  mcontext                              struct{gregs [23]uint64; fpregs *fpstate; __reserved1 [8]uint64}
  func  mcount                                func() int32
  func  mdump                                 func()
  const memProfile                            memProfile = 1:bucketType
  type  memRecord                             struct{allocs uintptr; frees uintptr; alloc_bytes uintptr; free_bytes uintptr; prev_allocs uintptr; prev_frees uintptr; prev_alloc_bytes uintptr; prev_free_bytes uintptr; recent_allocs uintptr; recent_frees uintptr; recent_alloc_bytes uintptr; recent_free_bytes uintptr}
  func  memclr                                func(ptr unsafe.Pointer, n uintptr)
  func  memclrBytes                           func(b []byte)
  func  memequal                              func(a unsafe.Pointer, b unsafe.Pointer, size uintptr) bool
  func  memequal0                             func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  memequal128                           func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  memequal16                            func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  memequal32                            func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  memequal64                            func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  memequal8                             func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  memhash                               func(p unsafe.Pointer, seed uintptr, s uintptr) uintptr
  func  memhash0                              func(p unsafe.Pointer, h uintptr) uintptr
  func  memhash128                            func(p unsafe.Pointer, h uintptr) uintptr
  func  memhash16                             func(p unsafe.Pointer, h uintptr) uintptr
  func  memhash32                             func(p unsafe.Pointer, h uintptr) uintptr
  func  memhash64                             func(p unsafe.Pointer, h uintptr) uintptr
  func  memhash8                              func(p unsafe.Pointer, h uintptr) uintptr
  func  memhash_varlen                        func(p unsafe.Pointer, h uintptr) uintptr
  func  memlimit                              func() uintptr
  func  memmove                               func(to unsafe.Pointer, from unsafe.Pointer, n uintptr)
  var   memoryError                           error
  var   memstats                              mstats
  type  method                                struct{name nameOff; mtyp typeOff; ifn textOff; tfn textOff}
  func  mget                                  func() *m
  type  mheap                                 struct{lock mutex; free [128]mSpanList; freelarge mSpanList; busy [128]mSpanList; busylarge mSpanList; allspans **mspan; gcspans **mspan; nspan uint32; sweepgen uint32; sweepdone uint32; spans **mspan; spans_mapped uintptr; pagesInUse uint64; spanBytesAlloc uint64; pagesSwept uint64; sweepPagesPerByte float64; largefree uint64; nlargefree uint64; nsmallfree [67]uint64; bitmap uintptr; bitmap_mapped uintptr; arena_start uintptr; arena_used uintptr; arena_end uintptr; arena_reserved bool; central [67]struct{mcentral mcentral; pad [64]byte}; spanalloc fixalloc; cachealloc fixalloc; specialfinalizeralloc fixalloc; specialprofilealloc fixalloc; speciallock mutex}
    method (*mheap) alloc(npage uintptr, sizeclass int32, large bool, needzero bool) *mspan
    method (*mheap) allocLarge(npage uintptr) *mspan
    method (*mheap) allocSpanLocked(npage uintptr) *mspan
    method (*mheap) allocStack(npage uintptr) *mspan
    method (*mheap) alloc_m(npage uintptr, sizeclass int32, large bool) *mspan
    method (*mheap) busyList(npages uintptr) *mSpanList
    method (*mheap) freeList(npages uintptr) *mSpanList
    method (*mheap) freeSpan(s *mspan, acct int32)
    method (*mheap) freeSpanLocked(s *mspan, acctinuse bool, acctidle bool, unusedsince int64)
    method (*mheap) freeStack(s *mspan)
    method (*mheap) grow(npage uintptr) bool
    method (*mheap) init(spans_size uintptr)
    method (*mheap) lookup(v unsafe.Pointer) *mspan
    method (*mheap) lookupMaybe(v unsafe.Pointer) *mspan
    method (*mheap) mapBits(arena_used uintptr)
    method (*mheap) mapSpans(arena_used uintptr)
    method (*mheap) reclaim(npage uintptr)
    method (*mheap) reclaimList(list *mSpanList, npages uintptr) uintptr
    method (*mheap) scavenge(k int32, now uint64, limit uint64)
    method (*mheap) sysAlloc(n uintptr) unsafe.Pointer
  var   mheap_                                mheap
  func  mhelpgc                               func()
  const minDeferAlloc                         minDeferAlloc = 48:uintptr
  const minDeferArgs                          minDeferArgs = 0:uintptr
  const minPhysPageSize                       minPhysPageSize = 4096:untyped int
  const minTopHash                            minTopHash = 4:untyped int
  func  mincore                               func(addr unsafe.Pointer, n uintptr, dst *byte) int32
  const minfunc                               minfunc = 16:untyped int
  func  minit                                 func()
  type  mlink                                 struct{next *mlink}
  func  mlookup                               func(v uintptr, base *uintptr, size *uintptr, sp **mspan) int32
  func  mmap                                  func(addr unsafe.Pointer, n uintptr, prot int32, flags int32, fd int32, off uint32) unsafe.Pointer
  func  mmap_fixed                            func(v unsafe.Pointer, n uintptr, prot int32, flags int32, fd int32, offset uint32) unsafe.Pointer
  type  moduledata                            struct{pclntable []byte; ftab []functab; filetab []uint32; findfunctab uintptr; minpc uintptr; maxpc uintptr; text uintptr; etext uintptr; noptrdata uintptr; enoptrdata uintptr; data uintptr; edata uintptr; bss uintptr; ebss uintptr; noptrbss uintptr; enoptrbss uintptr; end uintptr; gcdata uintptr; gcbss uintptr; types uintptr; etypes uintptr; typelinks []int32; itablinks []*itab; modulename string; modulehashes []modulehash; gcdatamask bitvector; gcbssmask bitvector; typemap map[typeOff]*_type; next *moduledata}
  func  moduledataverify                      func()
  func  moduledataverify1                     func(datap *moduledata)
  type  modulehash                            struct{modulename string; linktimehash string; runtimehash *string}
  func  morestack                             func()
  var   morestackPC                           uintptr
  func  morestackc                            func()
  func  mpreinit                              func(mp *m)
  func  mprof_GC                              func()
  func  mput                                  func(mp *m)
  const msanenabled                           msanenabled = false:untyped bool
  func  msanfree                              func(addr unsafe.Pointer, sz uintptr)
  func  msanmalloc                            func(addr unsafe.Pointer, sz uintptr)
  func  msanread                              func(addr unsafe.Pointer, sz uintptr)
  func  msanwrite                             func(addr unsafe.Pointer, sz uintptr)
  func  msigrestore                           func(sigmask sigset)
  func  msigsave                              func(mp *m)
  type  mspan                                 struct{next *mspan; prev **mspan; list *mSpanList; startAddr uintptr; npages uintptr; stackfreelist gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *uint8; gcmarkBits *uint8; sweepgen uint32; divMul uint32; allocCount uint16; sizeclass uint8; incache bool; state uint8; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; unusedsince int64; npreleased uintptr; limit uintptr; speciallock mutex; specials *special; baseMask uintptr}
    method (*mspan) allocBitsForIndex(allocBitIndex uintptr) markBits
    method (*mspan) base() uintptr
    method (*mspan) countFree() int
    method (*mspan) ensureSwept()
    method (*mspan) inList() bool
    method (*mspan) init(base uintptr, npages uintptr)
    method (*mspan) isFree(index uintptr) bool
    method (*mspan) layout() (size uintptr, n uintptr, total uintptr)
    method (*mspan) markBitsForBase() markBits
    method (*mspan) markBitsForIndex(objIndex uintptr) markBits
    method (*mspan) nextFreeIndex() uintptr
    method (*mspan) objIndex(p uintptr) uintptr
    method (*mspan) refillAllocCache(whichByte uintptr)
    method (*mspan) sweep(preserve bool) bool
  func  mspinning                             func()
  func  mstart                                func()
  func  mstart1                               func()
  var   mstartPC                              uintptr
  type  mstats                                struct{alloc uint64; total_alloc uint64; sys uint64; nlookup uint64; nmalloc uint64; nfree uint64; heap_alloc uint64; heap_sys uint64; heap_idle uint64; heap_inuse uint64; heap_released uint64; heap_objects uint64; stacks_inuse uint64; stacks_sys uint64; mspan_inuse uint64; mspan_sys uint64; mcache_inuse uint64; mcache_sys uint64; buckhash_sys uint64; gc_sys uint64; other_sys uint64; next_gc uint64; last_gc uint64; pause_total_ns uint64; pause_ns [256]uint64; pause_end [256]uint64; numgc uint32; gc_cpu_fraction float64; enablegc bool; debuggc bool; by_size [67]struct{size uint32; nmalloc uint64; nfree uint64}; tinyallocs uint64; heap_live uint64; heap_scan uint64; heap_marked uint64; heap_reachable uint64}
  type  muintptr                              uintptr
    method (muintptr) ptr() *m
    method (*muintptr) set(m *m)
  func  mullu                                 func(u uint64, v uint64) (lo uint64, hi uint64)
  func  munmap                                func(addr unsafe.Pointer, n uintptr)
  type  mutex                                 struct{key uintptr}
  const mutex_locked                          mutex_locked = 1:untyped int
  const mutex_sleeping                        mutex_sleeping = 2:untyped int
  const mutex_unlocked                        mutex_unlocked = 0:untyped int
  type  name                                  struct{bytes *byte}
    method (name) data(off int) *byte
    method (name) isExported() bool
    method (name) name() (s string)
    method (name) nameLen() int
    method (name) pkgPath() string
    method (name) tag() (s string)
    method (name) tagLen() int
  type  nameOff                               int32
  func  nan                                   func() float64
  const nan32                                 nan32 = 2139095041:uint32
  const nan64                                 nan64 = 9218868437227405313:uint64
  func  nanotime                              func() int64
  var   nbuf                                  uintptr
  var   ncpu                                  int32
  func  needaddgcproc                         func() bool
  func  needm                                 func(x byte)
  const neg32                                 neg32 = 2147483648:uint32
  const neg64                                 neg64 = 9223372036854775808:uint64
  func  neginf                                func() float64
  func  net_runtimeNano                       func() int64
  func  net_runtime_Semacquire                func(addr *uint32)
  func  net_runtime_Semrelease                func(addr *uint32)
  func  net_runtime_pollClose                 func(pd *pollDesc)
  func  net_runtime_pollOpen                  func(fd uintptr) (*pollDesc, int)
  func  net_runtime_pollReset                 func(pd *pollDesc, mode int) int
  func  net_runtime_pollServerInit            func()
  func  net_runtime_pollSetDeadline           func(pd *pollDesc, d int64, mode int)
  func  net_runtime_pollUnblock               func(pd *pollDesc)
  func  net_runtime_pollWait                  func(pd *pollDesc, mode int) int
  func  net_runtime_pollWaitCanceled          func(pd *pollDesc, mode int)
  func  netpoll                               func(block bool) *g
  func  netpollDeadline                       func(arg interface{}, seq uintptr)
  var   netpollInited                         uint32
  func  netpollReadDeadline                   func(arg interface{}, seq uintptr)
  func  netpollWriteDeadline                  func(arg interface{}, seq uintptr)
  func  netpollarm                            func(pd *pollDesc, mode int)
  func  netpollblock                          func(pd *pollDesc, mode int32, waitio bool) bool
  func  netpollblockcommit                    func(gp *g, gpp unsafe.Pointer) bool
  func  netpollcheckerr                       func(pd *pollDesc, mode int32) int
  func  netpollclose                          func(fd uintptr) int32
  func  netpolldeadlineimpl                   func(pd *pollDesc, seq uintptr, read bool, write bool)
  func  netpollinit                           func()
  func  netpollinited                         func() bool
  func  netpollopen                           func(fd uintptr, pd *pollDesc) int32
  func  netpollready                          func(gpp *guintptr, pd *pollDesc, mode int32)
  func  netpollunblock                        func(pd *pollDesc, mode int32, ioready bool) *g
  type  neverCallThisFunction                 struct{}
  func  newAllocBits                          func(nelems uintptr) *uint8
  func  newArena                              func() *gcBits
  func  newBucket                             func(typ bucketType, nstk int) *bucket
  func  newMarkBits                           func(nelems uintptr) *uint8
  func  newarray                              func(typ *_type, n int) unsafe.Pointer
  func  newdefer                              func(siz int32) *_defer
  func  newextram                             func()
  func  newm                                  func(fn func(), _p_ *p)
  func  newobject                             func(typ *_type) unsafe.Pointer
  func  newosproc                             func(mp *m, stk unsafe.Pointer)
  func  newosproc0                            func(stacksize uintptr, fn unsafe.Pointer)
  func  newproc                               func(siz int32, fn *funcval)
  func  newproc1                              func(fn *funcval, argp *uint8, narg int32, nret int32, callerpc uintptr) *g
  var   newprocs                              int32
  func  newselect                             func(sel *hselect, selsize int64, size int32)
  func  newstack                              func()
  func  nextBarrierPC                         func() uintptr
  func  nextFreeFast                          func(s *mspan) gclinkptr
  func  nextMarkBitArenaEpoch                 func()
  func  nextSample                            func() int32
  func  nextSampleNoFP                        func() int32
  func  nilfunc                               func()
  func  nilinterequal                         func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  nilinterhash                          func(p unsafe.Pointer, h uintptr) uintptr
  const noCheck                               noCheck = 18446744073709551615:untyped int
  func  noSignalStack                         func(sig uint32)
  func  noescape                              func(p unsafe.Pointer) unsafe.Pointer
  type  note                                  struct{key uintptr}
  func  noteclear                             func(n *note)
  func  notesleep                             func(n *note)
  func  notetsleep                            func(n *note, ns int64) bool
  func  notetsleep_internal                   func(n *note, ns int64) bool
  func  notetsleepg                           func(n *note, ns int64) bool
  func  notewakeup                            func(n *note)
  type  notifyList                            struct{wait uint32; notify uint32; lock mutex; head *sudog; tail *sudog}
  func  notifyListAdd                         func(l *notifyList) uint32
  func  notifyListCheck                       func(sz uintptr)
  func  notifyListNotifyAll                   func(l *notifyList)
  func  notifyListNotifyOne                   func(l *notifyList)
  func  notifyListWait                        func(l *notifyList, t uint32)
  const numBuckets                            numBuckets = 1024:untyped int
  const oldIterator                           oldIterator = 2:untyped int
  var   oneBitCount                           [256]uint8
  func  oneNewExtraM                          func()
  var   oneptrmask                            [1]uint8
  func  open                                  func(name *byte, mode int32, perm int32) int32
  func  os_beforeExit                         func()
  func  os_runtime_args                       func() []string
  func  os_sigpipe                            func()
  func  osinit                                func()
  func  osyield                               func()
  var   overflowError                         error
  type  p                                     struct{lock mutex; id int32; status uint32; link puintptr; schedtick uint32; syscalltick uint32; m muintptr; mcache *mcache; racectx uintptr; deferpool [5][]*_defer; deferpoolbuf [5][32]*_defer; goidcache uint64; goidcacheend uint64; runqhead uint32; runqtail uint32; runq [256]guintptr; runnext guintptr; gfree *g; gfreecnt int32; sudogcache []*sudog; sudogbuf [128]*sudog; tracebuf traceBufPtr; palloc persistentAlloc; gcAssistTime int64; gcBgMarkWorker guintptr; gcMarkWorkerMode gcMarkWorkerMode; gcw gcWork; runSafePointFn uint32; pad [64]byte}
  const pageMask                              pageMask = 8191:untyped int
  const pageShift                             pageShift = 13:untyped int
  const pageSize                              pageSize = 8192:untyped int
  func  panicCheckMalloc                      func(err error)
  func  panicdivide                           func()
  func  panicdottype                          func(have *_type, want *_type, iface *_type)
  func  panicfloat                            func()
  func  panicindex                            func()
  var   panicking                             uint32
  var   paniclk                               mutex
  func  panicmem                              func()
  func  panicoverflow                         func()
  func  panicslice                            func()
  func  panicwrap                             func(pkg string, typ string, meth string)
  func  park_m                                func(gp *g)
  func  parkunlock_c                          func(gp *g, lock unsafe.Pointer) bool
  func  parsedebugvars                        func()
  const passive_spin                          passive_spin = 1:untyped int
  const pcbucketsize                          pcbucketsize = 4096:untyped int
  func  pcdatavalue                           func(f *_func, table int32, targetpc uintptr, cache *pcvalueCache) int32
  func  pcvalue                               func(f *_func, off int32, targetpc uintptr, cache *pcvalueCache, strict bool) int32
  type  pcvalueCache                          struct{entries [16]pcvalueCacheEnt}
  type  pcvalueCacheEnt                       struct{targetpc uintptr; off int32; val int32}
  const pdReady                               pdReady = 1:uintptr
  const pdWait                                pdWait = 2:uintptr
  var   pdesc                                 [256]struct{schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64}
  type  persistentAlloc                       struct{base unsafe.Pointer; off uintptr}
  func  persistentalloc                       func(size uintptr, align uintptr, sysStat *uint64) unsafe.Pointer
  func  persistentalloc1                      func(size uintptr, align uintptr, sysStat *uint64) unsafe.Pointer
  func  pidleget                              func() *p
  func  pidleput                              func(_p_ *p)
  type  plainError                            string
    method (plainError) Error() string
    method (plainError) RuntimeError()
  const pollBlockSize                         pollBlockSize = 4096:untyped int
  type  pollCache                             struct{lock mutex; first *pollDesc}
    method (*pollCache) alloc() *pollDesc
    method (*pollCache) free(pd *pollDesc)
  type  pollDesc                              struct{link *pollDesc; lock mutex; fd uintptr; closing bool; seq uintptr; rg uintptr; rt timer; rd int64; wg uintptr; wt timer; wd int64; user uint32}
  var   pollcache                             pollCache
  var   poolcleanup                           func()
  func  posinf                                func() float64
  func  preemptall                            func() bool
  func  preemptone                            func(_p_ *p) bool
  func  prefetchnta                           func(addr uintptr)
  func  prefetcht0                            func(addr uintptr)
  func  prefetcht1                            func(addr uintptr)
  func  prefetcht2                            func(addr uintptr)
  func  prepGoExitFrame                       func(sp uintptr)
  func  preprintpanics                        func(p *_panic)
  func  printCgoTraceback                     func(callers *cgoCallers)
  func  printOneCgoTraceback                  func(pc uintptr, max int, arg *cgoSymbolizerArg) int
  func  printany                              func(i interface{})
  func  printbool                             func(v bool)
  func  printcomplex                          func(c complex128)
  func  printcreatedby                        func(gp *g)
  func  printeface                            func(e eface)
  func  printfloat                            func(v float64)
  func  printhex                              func(v uint64)
  func  printiface                            func(i iface)
  func  printint                              func(v int64)
  func  printlock                             func()
  func  printnl                               func()
  func  printpanics                           func(p *_panic)
  func  printpointer                          func(p unsafe.Pointer)
  func  printslice                            func(s []byte)
  func  printsp                               func()
  func  printstring                           func(s string)
  func  printuint                             func(v uint64)
  func  printunlock                           func()
  func  procPin                               func() int
  func  procUnpin                             func()
  func  procresize                            func(nprocs int32) *p
  func  procyield                             func(cycles uint32)
  var   prof                                  struct{lock uint32; hz int32}
  func  profilealloc                          func(mp *m, x unsafe.Pointer, size uintptr)
  var   proflock                              mutex
  func  progToPointerMask                     func(prog *byte, size uintptr) bitvector
  func  ptrbit                                func(bv *gobitvector, i uintptr) uint8
  var   ptrnames                              []string
  type  ptrtype                               struct{typ _type; elem *_type}
  func  publicationBarrier                    func()
  type  puintptr                              uintptr
    method (puintptr) ptr() *p
    method (*puintptr) set(p *p)
  func  purgecachedstats                      func(c *mcache)
  func  putempty                              func(b *workbuf)
  func  putfull                               func(b *workbuf)
  func  queueRescan                           func(gp *g)
  func  queuefinalizer                        func(p unsafe.Pointer, fn *funcval, nret uintptr, fint *_type, ot *ptrtype)
  func  raceReadObjectPC                      func(t *_type, addr unsafe.Pointer, callerpc uintptr, pc uintptr)
  func  raceWriteObjectPC                     func(t *_type, addr unsafe.Pointer, callerpc uintptr, pc uintptr)
  func  raceacquire                           func(addr unsafe.Pointer)
  func  raceacquireg                          func(gp *g, addr unsafe.Pointer)
  var   racecgosync                           uint64
  const raceenabled                           raceenabled = false:untyped bool
  func  racefingo                             func()
  func  racefini                              func()
  func  racefree                              func(p unsafe.Pointer, sz uintptr)
  func  racegoend                             func()
  func  racegostart                           func(pc uintptr) uintptr
  func  raceinit                              func() (uintptr, uintptr)
  func  racemalloc                            func(p unsafe.Pointer, sz uintptr)
  func  racemapshadow                         func(addr unsafe.Pointer, size uintptr)
  func  raceproccreate                        func() uintptr
  var   raceprocctx0                          uintptr
  func  raceprocdestroy                       func(ctx uintptr)
  func  racereadpc                            func(addr unsafe.Pointer, callerpc uintptr, pc uintptr)
  func  racereadrangepc                       func(addr unsafe.Pointer, sz uintptr, callerpc uintptr, pc uintptr)
  func  racerelease                           func(addr unsafe.Pointer)
  func  racereleaseg                          func(gp *g, addr unsafe.Pointer)
  func  racereleasemerge                      func(addr unsafe.Pointer)
  func  racereleasemergeg                     func(gp *g, addr unsafe.Pointer)
  func  racesync                              func(c *hchan, sg *sudog)
  func  racewritepc                           func(addr unsafe.Pointer, callerpc uintptr, pc uintptr)
  func  racewriterangepc                      func(addr unsafe.Pointer, sz uintptr, callerpc uintptr, pc uintptr)
  func  raise                                 func(sig int32)
  func  raisebadsignal                        func(sig int32, c *sigctxt)
  func  raiseproc                             func(sig int32)
  type  randomEnum                            struct{i uint32; count uint32; pos uint32; inc uint32}
    method (*randomEnum) done() bool
    method (*randomEnum) next()
    method (*randomEnum) position() uint32
  type  randomOrder                           struct{count uint32; coprimes []uint32}
    method (*randomOrder) reset(count uint32)
    method (*randomOrder) start(i uint32) randomEnum
  const randomizeScheduler                    randomizeScheduler = false:untyped bool
  func  rawbyteslice                          func(size int) (b []byte)
  func  rawruneslice                          func(size int) (b []rune)
  func  rawstring                             func(size int) (s string, b []byte)
  func  rawstringtmp                          func(buf *tmpBuf, l int) (s string, b []byte)
  func  read                                  func(fd int32, p unsafe.Pointer, n int32) int32
  func  readGCStats                           func(pauses *[]uint64)
  func  readGCStats_m                         func(pauses *[]uint64)
  func  readUnaligned32                       func(p unsafe.Pointer) uint32
  func  readUnaligned64                       func(p unsafe.Pointer) uint64
  func  readgogc                              func() int32
  func  readgstatus                           func(gp *g) uint32
  func  readmemstats_m                        func(stats *MemStats)
  func  readvarint                            func(p []byte) (newp []byte, val uint32)
  func  ready                                 func(gp *g, traceskip int, next bool)
  func  readyWithTime                         func(s *sudog, traceskip int)
  func  record                                func(r *MemProfileRecord, b *bucket)
  func  recordspan                            func(vh unsafe.Pointer, p unsafe.Pointer)
  func  recovery                              func(gp *g)
  func  recv                                  func(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func())
  func  reentersyscall                        func(pc uintptr, sp uintptr)
  var   reflectOffs                           struct{lock mutex; next int32; m map[int32]unsafe.Pointer; minv map[unsafe.Pointer]int32}
  func  reflectOffsLock                       func()
  func  reflectOffsUnlock                     func()
  func  reflect_addReflectOff                 func(ptr unsafe.Pointer) int32
  func  reflect_chancap                       func(c *hchan) int
  func  reflect_chanclose                     func(c *hchan)
  func  reflect_chanlen                       func(c *hchan) int
  func  reflect_chanrecv                      func(t *chantype, c *hchan, nb bool, elem unsafe.Pointer) (selected bool, received bool)
  func  reflect_chansend                      func(t *chantype, c *hchan, elem unsafe.Pointer, nb bool) (selected bool)
  func  reflect_gcbits                        func(x interface{}) []byte
  func  reflect_ifaceE2I                      func(inter *interfacetype, e eface, dst *iface)
  func  reflect_ismapkey                      func(t *_type) bool
  func  reflect_makechan                      func(t *chantype, size int64) *hchan
  func  reflect_makemap                       func(t *maptype) *hmap
  func  reflect_mapaccess                     func(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer
  func  reflect_mapassign                     func(t *maptype, h *hmap, key unsafe.Pointer, val unsafe.Pointer)
  func  reflect_mapdelete                     func(t *maptype, h *hmap, key unsafe.Pointer)
  func  reflect_mapiterinit                   func(t *maptype, h *hmap) *hiter
  func  reflect_mapiterkey                    func(it *hiter) unsafe.Pointer
  func  reflect_mapiternext                   func(it *hiter)
  func  reflect_maplen                        func(h *hmap) int
  func  reflect_memclr                        func(ptr unsafe.Pointer, n uintptr)
  func  reflect_memmove                       func(to unsafe.Pointer, from unsafe.Pointer, n uintptr)
  func  reflect_resolveNameOff                func(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer
  func  reflect_resolveTextOff                func(rtype unsafe.Pointer, off int32) unsafe.Pointer
  func  reflect_resolveTypeOff                func(rtype unsafe.Pointer, off int32) unsafe.Pointer
  func  reflect_rselect                       func(cases []runtimeSelect) (chosen int, recvOK bool)
  func  reflect_typedmemmove                  func(typ *_type, dst unsafe.Pointer, src unsafe.Pointer)
  func  reflect_typedmemmovepartial           func(typ *_type, dst unsafe.Pointer, src unsafe.Pointer, off uintptr, size uintptr)
  func  reflect_typedslicecopy                func(elemType *_type, dst slice, src slice) int
  func  reflect_typelinks                     func() ([]unsafe.Pointer, [][]int32)
  func  reflect_unsafe_New                    func(typ *_type) unsafe.Pointer
  func  reflect_unsafe_NewArray               func(typ *_type, n int) unsafe.Pointer
  func  reflectcall                           func(argtype *_type, fn unsafe.Pointer, arg unsafe.Pointer, argsize uint32, retoffset uint32)
  func  reimburseSweepCredit                  func(unusableBytes uintptr)
  func  releaseSudog                          func(s *sudog)
  func  releasem                              func(mp *m)
  func  releasep                              func() *p
  func  removefinalizer                       func(p unsafe.Pointer)
  func  removespecial                         func(p unsafe.Pointer, kind uint8) *special
  func  resetcpuprofiler                      func(hz int32)
  func  resetspinning                         func()
  func  resolveNameOff                        func(ptrInModule unsafe.Pointer, off nameOff) name
  func  restartg                              func(gp *g)
  func  retake                                func(now int64) uint32
  func  return0                               func()
  func  rewindmorestack                       func(buf *gobuf)
  type  rlimit                                struct{rlim_cur uintptr; rlim_max uintptr}
  const rootBlockBytes                        rootBlockBytes = 262144:untyped int
  const rootBlockSpans                        rootBlockSpans = 8192:untyped int
  func  rotl_31                               func(x uint64) uint64
  func  round                                 func(n uintptr, a uintptr) uintptr
  func  round2                                func(x int32) int32
  func  roundupsize                           func(size uintptr) uintptr
  func  rt0_go                                func()
  var   rt0_goPC                              uintptr
  func  rt_sigaction                          func(sig uintptr, new *sigactiont, old *sigactiont, size uintptr) int32
  func  rtsigprocmask                         func(sig uint32, new *sigset, old *sigset, size int32)
  func  runGCProg                             func(prog *byte, trailer *byte, dst *byte, size int) uintptr
  func  runSafePointFn                        func()
  const rune1                                 rune1 = 127:untyped int
  const rune2                                 rune2 = 2047:untyped int
  const rune3                                 rune3 = 65535:untyped int
  const rune4                                 rune4 = 2097151:untyped int
  const runeerror                             runeerror = 65533:untyped int
  const runemax                               runemax = 1114111:untyped int
  const runeself                              runeself = 128:untyped int
  func  runetochar                            func(str []byte, r rune) int
  func  runfinq                               func()
  var   runfinqPC                             uintptr
  func  runqempty                             func(_p_ *p) bool
  func  runqget                               func(_p_ *p) (gp *g, inheritTime bool)
  func  runqgrab                              func(_p_ *p, batch *[256]guintptr, batchHead uint32, stealRunNextG bool) uint32
  func  runqput                               func(_p_ *p, gp *g, next bool)
  func  runqputslow                           func(_p_ *p, gp *g, h uint32, t uint32) bool
  func  runqsteal                             func(_p_ *p, p2 *p, stealRunNextG bool) *g
  var   runtimeInitTime                       int64
  type  runtimeSelect                         struct{dir selectDir; typ unsafe.Pointer; ch *hchan; val unsafe.Pointer}
  func  runtime_debug_WriteHeapDump           func(fd uintptr)
  func  runtime_debug_freeOSMemory            func()
  func  runtime_init                          func()
  func  runtime_pprof_runtime_cyclesPerSecond func() int64
  func  save                                  func(pc uintptr, sp uintptr)
  func  saveg                                 func(pc uintptr, sp uintptr, gp *g, r *StackRecord)
  func  scanblock                             func(b0 uintptr, n0 uintptr, ptrmask *uint8, gcw *gcWork)
  func  scanframeworker                       func(frame *stkframe, cache *pcvalueCache, gcw *gcWork)
  func  scang                                 func(gp *g, gcw *gcWork)
  func  scanobject                            func(b uintptr, gcw *gcWork)
  func  scanstack                             func(gp *g, gcw *gcWork)
  type  scase                                 struct{elem unsafe.Pointer; c *hchan; pc uintptr; kind uint16; so uint16; receivedp *bool; releasetime int64}
  func  scavengelist                          func(list *mSpanList, now uint64, limit uint64) uintptr
  var   sched                                 schedt
  func  sched_getaffinity                     func(pid uintptr, len uintptr, buf *uintptr) int32
  func  schedinit                             func()
  type  schedt                                struct{goidgen uint64; lastpoll uint64; lock mutex; midle muintptr; nmidle int32; nmidlelocked int32; mcount int32; maxmcount int32; ngsys uint32; pidle puintptr; npidle uint32; nmspinning uint32; runqhead guintptr; runqtail guintptr; runqsize int32; gflock mutex; gfreeStack *g; gfreeNoStack *g; ngfree int32; sudoglock mutex; sudogcache *sudog; deferlock mutex; deferpool [5]*_defer; gcwaiting uint32; stopwait int32; stopnote note; sysmonwait uint32; sysmonnote note; safePointFn func(*p); safePointWait int32; safePointNote note; profilehz int32; procresizetime int64; totaltime int64}
  func  schedtrace                            func(detailed bool)
  func  schedule                              func()
  const selectDefault                         selectDefault = 3:selectDir
  type  selectDir                             int
  const selectRecv                            selectRecv = 2:selectDir
  const selectSend                            selectSend = 1:selectDir
  func  selectdefault                         func(sel *hselect) (selected bool)
  func  selectdefaultImpl                     func(sel *hselect, callerpc uintptr, so uintptr)
  func  selectgo                              func(sel *hselect)
  func  selectgoImpl                          func(sel *hselect) (uintptr, uint16)
  func  selectnbrecv                          func(t *chantype, elem unsafe.Pointer, c *hchan) (selected bool)
  func  selectnbrecv2                         func(t *chantype, elem unsafe.Pointer, received *bool, c *hchan) (selected bool)
  func  selectnbsend                          func(t *chantype, c *hchan, elem unsafe.Pointer) (selected bool)
  func  selectrecv                            func(sel *hselect, c *hchan, elem unsafe.Pointer) (selected bool)
  func  selectrecv2                           func(sel *hselect, c *hchan, elem unsafe.Pointer, received *bool) (selected bool)
  func  selectrecvImpl                        func(sel *hselect, c *hchan, pc uintptr, elem unsafe.Pointer, received *bool, so uintptr)
  func  selectsend                            func(sel *hselect, c *hchan, elem unsafe.Pointer) (selected bool)
  func  selectsendImpl                        func(sel *hselect, c *hchan, pc uintptr, elem unsafe.Pointer, so uintptr)
  func  selectsize                            func(size uintptr) uintptr
  func  sellock                               func(scases []scase, lockorder []uint16)
  func  selparkcommit                         func(gp *g, _ unsafe.Pointer) bool
  func  selunlock                             func(scases []scase, lockorder []uint16)
  const semTabSize                            semTabSize = 251:untyped int
  type  semaRoot                              struct{lock mutex; head *sudog; tail *sudog; nwait uint32}
    method (*semaRoot) dequeue(s *sudog)
    method (*semaRoot) queue(addr *uint32, s *sudog)
  func  semacquire                            func(addr *uint32, profile bool)
  func  semrelease                            func(addr *uint32)
  func  semroot                               func(addr *uint32) *semaRoot
  var   semtable                              [251]struct{root semaRoot; pad [36]byte}
  func  send                                  func(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func())
  func  sendDirect                            func(t *_type, sg *sudog, src unsafe.Pointer)
  func  setGCPercent                          func(in int32) (out int32)
  func  setGCPhase                            func(x uint32)
  func  setMaxStack                           func(in int) (out int)
  func  setMaxThreads                         func(in int) (out int)
  func  setNextBarrierPC                      func(pc uintptr)
  func  setPanicOnFault                       func(new bool) (old bool)
  func  setTraceback                          func(level string)
  func  setcallerpc                           func(argp unsafe.Pointer, pc uintptr)
  func  setcpuprofilerate                     func(hz int32)
  func  setcpuprofilerate_m                   func(hz int32)
  func  setg                                  func(gg *g)
  func  setitimer                             func(mode int32, new *itimerval, old *itimerval)
  func  setprofilebucket                      func(p unsafe.Pointer, b *bucket)
  func  setsSP                                func(pc uintptr) bool
  func  setsig                                func(i int32, fn uintptr, restart bool)
  func  setsigsegv                            func(pc uintptr)
  func  setsigstack                           func(i int32)
  func  shade                                 func(b uintptr)
  func  showframe                             func(f *_func, gp *g) bool
  func  shrinkstack                           func(gp *g)
  func  siftdownTimer                         func(i int)
  func  siftupTimer                           func(i int)
  var   sig                                   struct{note note; mask [3]uint32; wanted [3]uint32; ignored [3]uint32; recv [3]uint32; state uint32; inuse bool}
  const sigIdle                               sigIdle = 0:untyped int
  func  sigInstallGoHandler                   func(sig int32) bool
  func  sigNotOnStack                         func(sig uint32)
  const sigReceiving                          sigReceiving = 1:untyped int
  const sigSending                            sigSending = 2:untyped int
  type  sigTabT                               struct{flags int32; name string}
  type  sigactiont                            struct{sa_handler uintptr; sa_flags uint64; sa_restorer uintptr; sa_mask uint64}
  func  sigaddset                             func(mask *sigset, i int)
  func  sigaltstack                           func(new *sigaltstackt, old *sigaltstackt)
  type  sigaltstackt                          struct{ss_sp *byte; ss_flags int32; pad_cgo_0 [4]byte; ss_size uintptr}
  func  sigblock                              func()
  type  sigcontext                            struct{r8 uint64; r9 uint64; r10 uint64; r11 uint64; r12 uint64; r13 uint64; r14 uint64; r15 uint64; rdi uint64; rsi uint64; rbp uint64; rbx uint64; rdx uint64; rax uint64; rcx uint64; rsp uint64; rip uint64; eflags uint64; cs uint16; gs uint16; fs uint16; __pad0 uint16; err uint64; trapno uint64; oldmask uint64; cr2 uint64; fpstate *fpstate1; __reserved1 [8]uint64}
  func  sigcopyset                            func(mask *sigset, m sigmask)
  type  sigctxt                               struct{info *siginfo; ctxt unsafe.Pointer}
    method (*sigctxt) cs() uint64
    method (*sigctxt) fs() uint64
    method (*sigctxt) gs() uint64
    method (*sigctxt) r10() uint64
    method (*sigctxt) r11() uint64
    method (*sigctxt) r12() uint64
    method (*sigctxt) r13() uint64
    method (*sigctxt) r14() uint64
    method (*sigctxt) r15() uint64
    method (*sigctxt) r8() uint64
    method (*sigctxt) r9() uint64
    method (*sigctxt) rax() uint64
    method (*sigctxt) rbp() uint64
    method (*sigctxt) rbx() uint64
    method (*sigctxt) rcx() uint64
    method (*sigctxt) rdi() uint64
    method (*sigctxt) rdx() uint64
    method (*sigctxt) regs() *sigcontext
    method (*sigctxt) rflags() uint64
    method (*sigctxt) rip() uint64
    method (*sigctxt) rsi() uint64
    method (*sigctxt) rsp() uint64
    method (*sigctxt) set_rip(x uint64)
    method (*sigctxt) set_rsp(x uint64)
    method (*sigctxt) set_sigaddr(x uint64)
    method (*sigctxt) set_sigcode(x uint64)
    method (*sigctxt) sigaddr() uint64
    method (*sigctxt) sigcode() uint64
  func  sigdelset                             func(mask *sigset, i int)
  func  sigdisable                            func(sig uint32)
  func  sigenable                             func(sig uint32)
  func  sigfillset                            func(mask *uint64)
  func  sigfwd                                func(fn uintptr, sig uint32, info *siginfo, ctx unsafe.Pointer)
  func  sigfwdgo                              func(sig uint32, info *siginfo, ctx unsafe.Pointer) bool
  func  sighandler                            func(sig uint32, info *siginfo, ctxt unsafe.Pointer, gp *g)
  func  sigignore                             func(sig uint32)
  type  siginfo                               struct{si_signo int32; si_errno int32; si_code int32; si_addr uint64}
  type  sigmask                               [3]uint32
  func  signal_disable                        func(s uint32)
  func  signal_enable                         func(s uint32)
  func  signal_ignore                         func(s uint32)
  func  signal_ignored                        func(s uint32) bool
  func  signal_recv                           func() uint32
  var   signalsOK                             bool
  func  signalstack                           func(s *stack)
  func  signame                               func(sig uint32) string
  func  sigpanic                              func()
  var   sigpanicPC                            uintptr
  func  sigpipe                               func()
  func  sigprof                               func(pc uintptr, sp uintptr, lr uintptr, gp *g, mp *m)
  var   sigprofCallers                        cgoCallers
  var   sigprofCallersUse                     uint32
  func  sigprofNonGo                          func()
  func  sigreturn                             func()
  func  sigsend                               func(s uint32) bool
  type  sigset                                [2]uint32
  var   sigset_all                            sigset
  var   sigtable                              [65]sigTabT
  type  sigtabtt                              struct{flags int32; name *int8}
  func  sigtramp                              func()
  func  sigtrampgo                            func(sig uint32, info *siginfo, ctx unsafe.Pointer)
  func  sizeToClass                           func(size int32) int32
  var   size_to_class128                      [249]int8
  var   size_to_class8                        [129]int8
  var   sizeof_C_MStats                       uintptr
  type  slice                                 struct{array unsafe.Pointer; len int; cap int}
  var   sliceError                            error
  func  slicebytetostring                     func(buf *tmpBuf, b []byte) string
  func  slicebytetostringtmp                  func(b []byte) string
  func  slicecopy                             func(to slice, fm slice, width uintptr) int
  func  slicerunetostring                     func(buf *tmpBuf, a []rune) string
  func  slicestringcopy                       func(to []byte, fm string) int
  type  slicetype                             struct{typ _type; elem *_type}
  type  sockaddr_un                           struct{family uint16; path [108]byte}
  func  spanOf                                func(p uintptr) *mspan
  func  spanOfUnchecked                       func(p uintptr) *mspan
  type  special                               struct{next *special; offset uint16; kind byte}
  type  specialfinalizer                      struct{special special; fn *funcval; nret uintptr; fint *_type; ot *ptrtype}
  type  specialprofile                        struct{special special; b *bucket}
  func  sqrt                                  func(ix uint64) uint64
  type  stack                                 struct{lo uintptr; hi uintptr}
  func  stackBarrier                          func()
  var   stackBarrierPC                        uintptr
  const stackCache                            stackCache = 1:untyped int
  const stackDebug                            stackDebug = 0:untyped int
  const stackFaultOnFree                      stackFaultOnFree = 0:untyped int
  const stackFork                             stackFork = 18446744073709550382:untyped int
  const stackFromSystem                       stackFromSystem = 0:untyped int
  var   stackLarge                            struct{lock mutex; free [26]mSpanList}
  const stackPoisonCopy                       stackPoisonCopy = 0:untyped int
  const stackPreempt                          stackPreempt = 18446744073709550302:untyped int
  func  stackalloc                            func(n uint32) (stack, []stkbar)
  func  stackcache_clear                      func(c *mcache)
  func  stackcacherefill                      func(c *mcache, order uint8)
  func  stackcacherelease                     func(c *mcache, order uint8)
  func  stackfree                             func(stk stack, n uintptr)
  type  stackfreelist                         struct{list gclinkptr; size uintptr}
  func  stackinit                             func()
  func  stacklog2                             func(n uintptr) int
  type  stackmap                              struct{n int32; nbit int32; bytedata [1]byte}
  func  stackmapdata                          func(stkmap *stackmap, n int32) bitvector
  var   stackpool                             [4]mSpanList
  func  stackpoolalloc                        func(order uint8) gclinkptr
  func  stackpoolfree                         func(x gclinkptr, order uint8)
  var   stackpoolmu                           mutex
  func  startTheWorld                         func()
  func  startTheWorldWithSema                 func()
  func  startTimer                            func(t *timer)
  func  startlockedm                          func(gp *g)
  func  startm                                func(_p_ *p, spinning bool)
  func  startpanic                            func()
  func  startpanic_m                          func()
  var   starttime                             int64
  var   startupRandomData                     []byte
  var   stealOrder                            randomOrder
  func  step                                  func(p []byte, pc *uintptr, val *int32, first bool) (newp []byte, ok bool)
  type  stkbar                                struct{savedLRPtr uintptr; savedLRVal uintptr}
  func  stkbucket                             func(typ bucketType, size uintptr, stk []uintptr, alloc bool) *bucket
  type  stkframe                              struct{fn *_func; pc uintptr; continpc uintptr; lr uintptr; sp uintptr; fp uintptr; varp uintptr; argp uintptr; arglen uintptr; argmap *bitvector}
  func  stopTheWorld                          func(reason string)
  func  stopTheWorldWithSema                  func()
  func  stopTimer                             func(t *timer) bool
  func  stoplockedm                           func()
  func  stopm                                 func()
  func  strequal                              func(p unsafe.Pointer, q unsafe.Pointer) bool
  func  strhash                               func(a unsafe.Pointer, h uintptr) uintptr
  func  stringDataOnStack                     func(s string) bool
  func  stringHash                            func(s string, seed uintptr) uintptr
  type  stringStruct                          struct{str unsafe.Pointer; len int}
  type  stringStructDWARF                     struct{str *byte; len int}
  func  stringStructOf                        func(sp *string) *stringStruct
  type  stringer                              interface{String() string}
    method (stringer) String() string
  func  stringiter                            func(s string, k int) int
  func  stringiter2                           func(s string, k int) (int, rune)
  func  stringtoslicebyte                     func(buf *tmpBuf, s string) []byte
  func  stringtoslicebytetmp                  func(s string) []byte
  func  stringtoslicerune                     func(buf *[32]rune, s string) []rune
  type  structfield                           struct{name name; typ *_type; offset uintptr}
  type  structtype                            struct{typ _type; pkgPath name; fields []structfield}
  func  subtract1                             func(p *byte) *byte
  func  subtractb                             func(p *byte, n uintptr) *byte
  type  sudog                                 struct{g *g; selectdone *uint32; next *sudog; prev *sudog; elem unsafe.Pointer; releasetime int64; ticket uint32; waitlink *sudog; c *hchan}
  var   support_avx                           bool
  var   support_avx2                          bool
  const surrogateMax                          surrogateMax = 57343:untyped int
  const surrogateMin                          surrogateMin = 55296:untyped int
  var   sweep                                 sweepdata
  const sweepMinHeapDistance                  sweepMinHeapDistance = 1048576:untyped int
  type  sweepdata                             struct{lock mutex; g *g; parked bool; started bool; spanidx uint32; nbgsweep uint32; npausesweep uint32}
  func  sweepone                              func() uintptr
  var   sym_keys                              []symbol_key
  type  symbol_key                            struct{name string; sym_hash uint32; ptr *uintptr}
  func  sync_atomic_CompareAndSwapPointer     func(ptr *unsafe.Pointer, old unsafe.Pointer, new unsafe.Pointer) bool
  func  sync_atomic_CompareAndSwapUintptr     func(ptr *uintptr, old uintptr, new uintptr) bool
  func  sync_atomic_StorePointer              func(ptr *unsafe.Pointer, new unsafe.Pointer)
  func  sync_atomic_StoreUintptr              func(ptr *uintptr, new uintptr)
  func  sync_atomic_SwapPointer               func(ptr *unsafe.Pointer, new unsafe.Pointer) unsafe.Pointer
  func  sync_atomic_SwapUintptr               func(ptr *uintptr, new uintptr) uintptr
  func  sync_atomic_runtime_procPin           func() int
  func  sync_atomic_runtime_procUnpin         func()
  func  sync_runtime_Semacquire               func(addr *uint32)
  func  sync_runtime_Semrelease               func(addr *uint32)
  func  sync_runtime_canSpin                  func(i int) bool
  func  sync_runtime_doSpin                   func()
  func  sync_runtime_procPin                  func() int
  func  sync_runtime_procUnpin                func()
  func  sync_runtime_registerPoolCleanup      func(f func())
  func  syncadjustsudogs                      func(gp *g, used uintptr, adjinfo *adjustinfo) uintptr
  func  sysAlloc                              func(n uintptr, sysStat *uint64) unsafe.Pointer
  func  sysFault                              func(v unsafe.Pointer, n uintptr)
  func  sysFree                               func(v unsafe.Pointer, n uintptr, sysStat *uint64)
  func  sysMap                                func(v unsafe.Pointer, n uintptr, reserved bool, sysStat *uint64)
  func  sysMmap                               func(addr unsafe.Pointer, n uintptr, prot int32, flags int32, fd int32, off uint32) unsafe.Pointer
  func  sysReserve                            func(v unsafe.Pointer, n uintptr, reserved *bool) unsafe.Pointer
  func  sysUnused                             func(v unsafe.Pointer, n uintptr)
  func  sysUsed                               func(v unsafe.Pointer, n uintptr)
  func  sysargs                               func(argc int32, argv **byte)
  func  syscall_runtime_AfterFork             func()
  func  syscall_runtime_BeforeFork            func()
  func  syscall_runtime_envs                  func() []string
  func  syscall_setenv_c                      func(k string, v string)
  func  syscall_unsetenv_c                    func(k string)
  func  sysmon                                func()
  func  systemstack                           func(fn func())
  var   systemstackPC                         uintptr
  func  systemstack_switch                    func()
  var   systemstack_switchPC                  uintptr
  const t1                                    t1 = 0:untyped int
  const t2                                    t2 = 192:untyped int
  const t3                                    t3 = 224:untyped int
  const t4                                    t4 = 240:untyped int
  const t5                                    t5 = 248:untyped int
  const tagAllocSample                        tagAllocSample = 17:untyped int
  const tagBSS                                tagBSS = 13:untyped int
  const tagData                               tagData = 12:untyped int
  const tagDefer                              tagDefer = 14:untyped int
  const tagEOF                                tagEOF = 0:untyped int
  const tagFinalizer                          tagFinalizer = 7:untyped int
  const tagGoroutine                          tagGoroutine = 4:untyped int
  const tagItab                               tagItab = 8:untyped int
  const tagMemProf                            tagMemProf = 16:untyped int
  const tagMemStats                           tagMemStats = 10:untyped int
  const tagOSThread                           tagOSThread = 9:untyped int
  const tagObject                             tagObject = 1:untyped int
  const tagOtherRoot                          tagOtherRoot = 2:untyped int
  const tagPanic                              tagPanic = 15:untyped int
  const tagParams                             tagParams = 6:untyped int
  const tagQueuedFinalizer                    tagQueuedFinalizer = 11:untyped int
  const tagStackFrame                         tagStackFrame = 5:untyped int
  const tagType                               tagType = 3:untyped int
  func  testAtomic64                          func()
  var   test_x64                              uint64
  var   test_z64                              uint64
  func  testdefersizes                        func()
  var   testingAssertE2I2GC                   bool
  var   testingAssertE2T2GC                   bool
  const testx                                 testx = 192:untyped int
  type  textOff                               int32
  type  tflag                                 uint8
  const tflagExtraStar                        tflagExtraStar = 2:tflag
  const tflagNamed                            tflagNamed = 4:tflag
  const tflagUncommon                         tflagUncommon = 1:tflag
  func  throw                                 func(s string)
  func  throwinit                             func()
  func  throwreturn                           func()
  var   ticks                                 struct{lock mutex; pad uint32; val uint64}
  func  tickspersecond                        func() int64
  func  timeSleep                             func(ns int64)
  func  time_now                              func() (sec int64, nsec int32)
  func  time_runtimeNano                      func() int64
  func  timediv                               func(v int64, div int32, rem *int32) int32
  func  timejump                              func() *g
  type  timer                                 struct{i int; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr}
  func  timerproc                             func()
  var   timerprocPC                           uintptr
  var   timers                                struct{lock mutex; gp *g; created bool; sleeping bool; rescheduling bool; waitnote note; t []*timer}
  type  timespec                              struct{tv_sec int64; tv_nsec int64}
    method (*timespec) set_nsec(x int32)
    method (*timespec) set_sec(x int64)
  type  timeval                               struct{tv_sec int64; tv_usec int64}
    method (*timeval) set_usec(x int32)
  const tinySizeClass                         tinySizeClass = 2:untyped int
  type  tmpBuf                                [32]byte
  const tmpStringBufSize                      tmpStringBufSize = 32:untyped int
  var   tmpbuf                                []byte
  func  topofstack                            func(f *_func) bool
  func  totaldefersize                        func(siz uintptr) uintptr
  var   trace                                 struct{lock mutex; lockOwner *g; enabled bool; shutdown bool; headerWritten bool; footerWritten bool; shutdownSema uint32; seqStart uint64; ticksStart int64; ticksEnd int64; timeStart int64; timeEnd int64; seqGC uint64; reading traceBufPtr; empty traceBufPtr; fullHead traceBufPtr; fullTail traceBufPtr; reader *g; stackTab traceStackTable; strings map[string]uint64; stringSeq uint64; bufLock mutex; buf traceBufPtr}
  func  traceAcquireBuffer                    func() (mp *m, pid int32, bufp *traceBufPtr)
  type  traceAlloc                            struct{head traceAllocBlockPtr; off uintptr}
    method (*traceAlloc) alloc(n uintptr) unsafe.Pointer
    method (*traceAlloc) drop()
  type  traceAllocBlock                       struct{next traceAllocBlockPtr; data [65528]byte}
  type  traceAllocBlockPtr                    uintptr
    method (traceAllocBlockPtr) ptr() *traceAllocBlock
    method (*traceAllocBlockPtr) set(x *traceAllocBlock)
  func  traceAppend                           func(buf []byte, v uint64) []byte
  const traceArgCountShift                    traceArgCountShift = 6:untyped int
  type  traceBuf                              struct{traceBufHeader; arr [64488]byte}
    method (*traceBuf) byte(v byte)
    method (*traceBuf) varint(v uint64)
  type  traceBufHeader                        struct{link traceBufPtr; lastTicks uint64; pos int; stk [128]uintptr}
  type  traceBufPtr                           uintptr
    method (traceBufPtr) ptr() *traceBuf
    method (*traceBufPtr) set(b *traceBuf)
  func  traceBufPtrOf                         func(b *traceBuf) traceBufPtr
  const traceBytesPerNumber                   traceBytesPerNumber = 10:untyped int
  const traceEvBatch                          traceEvBatch = 1:untyped int
  const traceEvCount                          traceEvCount = 41:untyped int
  const traceEvFrequency                      traceEvFrequency = 2:untyped int
  const traceEvFutileWakeup                   traceEvFutileWakeup = 36:untyped int
  const traceEvGCDone                         traceEvGCDone = 8:untyped int
  const traceEvGCScanDone                     traceEvGCScanDone = 10:untyped int
  const traceEvGCScanStart                    traceEvGCScanStart = 9:untyped int
  const traceEvGCStart                        traceEvGCStart = 7:untyped int
  const traceEvGCSweepDone                    traceEvGCSweepDone = 12:untyped int
  const traceEvGCSweepStart                   traceEvGCSweepStart = 11:untyped int
  const traceEvGoBlock                        traceEvGoBlock = 20:untyped int
  const traceEvGoBlockCond                    traceEvGoBlockCond = 26:untyped int
  const traceEvGoBlockNet                     traceEvGoBlockNet = 27:untyped int
  const traceEvGoBlockRecv                    traceEvGoBlockRecv = 23:untyped int
  const traceEvGoBlockSelect                  traceEvGoBlockSelect = 24:untyped int
  const traceEvGoBlockSend                    traceEvGoBlockSend = 22:untyped int
  const traceEvGoBlockSync                    traceEvGoBlockSync = 25:untyped int
  const traceEvGoCreate                       traceEvGoCreate = 13:untyped int
  const traceEvGoEnd                          traceEvGoEnd = 15:untyped int
  const traceEvGoInSyscall                    traceEvGoInSyscall = 32:untyped int
  const traceEvGoPreempt                      traceEvGoPreempt = 18:untyped int
  const traceEvGoSched                        traceEvGoSched = 17:untyped int
  const traceEvGoSleep                        traceEvGoSleep = 19:untyped int
  const traceEvGoStart                        traceEvGoStart = 14:untyped int
  const traceEvGoStartLocal                   traceEvGoStartLocal = 38:untyped int
  const traceEvGoStop                         traceEvGoStop = 16:untyped int
  const traceEvGoSysBlock                     traceEvGoSysBlock = 30:untyped int
  const traceEvGoSysCall                      traceEvGoSysCall = 28:untyped int
  const traceEvGoSysExit                      traceEvGoSysExit = 29:untyped int
  const traceEvGoSysExitLocal                 traceEvGoSysExitLocal = 40:untyped int
  const traceEvGoUnblock                      traceEvGoUnblock = 21:untyped int
  const traceEvGoUnblockLocal                 traceEvGoUnblockLocal = 39:untyped int
  const traceEvGoWaiting                      traceEvGoWaiting = 31:untyped int
  const traceEvGomaxprocs                     traceEvGomaxprocs = 4:untyped int
  const traceEvHeapAlloc                      traceEvHeapAlloc = 33:untyped int
  const traceEvNextGC                         traceEvNextGC = 34:untyped int
  const traceEvNone                           traceEvNone = 0:untyped int
  const traceEvProcStart                      traceEvProcStart = 5:untyped int
  const traceEvProcStop                       traceEvProcStop = 6:untyped int
  const traceEvStack                          traceEvStack = 3:untyped int
  const traceEvString                         traceEvString = 37:untyped int
  const traceEvTimerGoroutine                 traceEvTimerGoroutine = 35:untyped int
  func  traceEvent                            func(ev byte, skip int, args ...uint64)
  func  traceFlush                            func(buf traceBufPtr) traceBufPtr
  type  traceFrame                            struct{funcID uint64; fileID uint64; line uint64}
  func  traceFrameForPC                       func(buf *traceBuf, frames map[uintptr]traceFrame, pc uintptr) (traceFrame, *traceBuf)
  func  traceFullDequeue                      func() traceBufPtr
  func  traceFullQueue                        func(buf traceBufPtr)
  const traceFutileWakeup                     traceFutileWakeup = 128:byte
  func  traceGCDone                           func()
  func  traceGCScanDone                       func()
  func  traceGCScanStart                      func()
  func  traceGCStart                          func()
  func  traceGCSweepDone                      func()
  func  traceGCSweepStart                     func()
  const traceGlobProc                         traceGlobProc = -1:untyped int
  func  traceGoCreate                         func(newg *g, pc uintptr)
  func  traceGoEnd                            func()
  func  traceGoPark                           func(traceEv byte, skip int, gp *g)
  func  traceGoPreempt                        func()
  func  traceGoSched                          func()
  func  traceGoStart                          func()
  func  traceGoSysBlock                       func(pp *p)
  func  traceGoSysCall                        func()
  func  traceGoSysExit                        func(ts int64)
  func  traceGoUnpark                         func(gp *g, skip int)
  func  traceGomaxprocs                       func(procs int32)
  func  traceHeapAlloc                        func()
  func  traceNextGC                           func()
  func  traceProcFree                         func(pp *p)
  func  traceProcStart                        func()
  func  traceProcStop                         func(pp *p)
  func  traceReader                           func() *g
  func  traceReleaseBuffer                    func(pid int32)
  type  traceStack                            struct{link traceStackPtr; hash uintptr; id uint32; n int; stk [0]uintptr}
    method (*traceStack) stack() []uintptr
  type  traceStackPtr                         uintptr
    method (traceStackPtr) ptr() *traceStack
  const traceStackSize                        traceStackSize = 128:untyped int
  type  traceStackTable                       struct{lock mutex; seq uint32; mem traceAlloc; tab [8192]traceStackPtr}
    method (*traceStackTable) dump()
    method (*traceStackTable) find(pcs []uintptr, hash uintptr) uint32
    method (*traceStackTable) newStack(n int) *traceStack
    method (*traceStackTable) put(pcs []uintptr) uint32
  func  traceString                           func(buf *traceBuf, s string) (uint64, *traceBuf)
  const traceTickDiv                          traceTickDiv = 64:untyped int
  func  tracealloc                            func(p unsafe.Pointer, size uintptr, typ *_type)
  func  traceback                             func(pc uintptr, sp uintptr, lr uintptr, gp *g)
  func  traceback1                            func(pc uintptr, sp uintptr, lr uintptr, gp *g, flags uint)
  const tracebackAll                          tracebackAll = 2:untyped int
  func  tracebackCgoContext                   func(pcbuf *uintptr, printing bool, ctxt uintptr, n int, max int) int
  const tracebackCrash                        tracebackCrash = 1:untyped int
  const tracebackShift                        tracebackShift = 2:untyped int
  var   traceback_cache                       uint32
  var   traceback_env                         uint32
  func  tracebackdefers                       func(gp *g, callback func(*stkframe, unsafe.Pointer) bool, v unsafe.Pointer)
  func  tracebackinit                         func()
  func  tracebackothers                       func(me *g)
  func  tracebacktrap                         func(pc uintptr, sp uintptr, lr uintptr, gp *g)
  func  tracefree                             func(p unsafe.Pointer, size uintptr)
  func  tracegc                               func()
  var   tracelock                             mutex
  func  trygetfull                            func() *workbuf
  const tx                                    tx = 128:untyped int
  type  typeAlg                               struct{hash func(unsafe.Pointer, uintptr) uintptr; equal func(unsafe.Pointer, unsafe.Pointer) bool}
  func  typeBitsBulkBarrier                   func(typ *_type, p uintptr, size uintptr)
  const typeCacheAssoc                        typeCacheAssoc = 4:untyped int
  type  typeCacheBucket                       struct{t [4]*_type}
  const typeCacheBuckets                      typeCacheBuckets = 256:untyped int
  type  typeOff                               int32
  var   typecache                             [256]typeCacheBucket
  func  typedmemmove                          func(typ *_type, dst unsafe.Pointer, src unsafe.Pointer)
  func  typedslicecopy                        func(typ *_type, dst slice, src slice) int
  func  typelinksinit                         func()
  func  typesEqual                            func(t *_type, v *_type) bool
  func  typestring                            func(x interface{}) string
  type  ucontext                              struct{uc_flags uint64; uc_link *ucontext; uc_stack sigaltstackt; uc_mcontext mcontext; uc_sigmask usigset; __fpregs_mem fpstate}
  func  uintptrBytes                          func(p []uintptr) (ret []byte)
  const uintptrMask                           uintptrMask = 18446744073709551615:untyped int
  func  unblocksig                            func(sig int32)
  type  uncommontype                          struct{pkgpath nameOff; mcount uint16; _ uint16; moff uint32; _ uint32}
  func  unixnanotime                          func() int64
  func  unlock                                func(l *mutex)
  func  unlockOSThread                        func()
  func  unlockextra                           func(mp *m)
  func  unminit                               func()
  func  unwindm                               func(restore *bool)
  func  updatememstats                        func(stats *gcstats)
  func  updatesigmask                         func(m sigmask)
  var   urandom_dev                           []byte
  var   useAeshash                            bool
  var   useCheckmark                          bool
  const usesLR                                usesLR = false:untyped bool
  type  usigset                               struct{__val [16]uint64}
  func  usleep                                func(usec uint32)
  func  vdso_find_version                     func(info *vdso_info, ver *version_key) int32
  type  vdso_info                             struct{valid bool; load_addr uintptr; load_offset uintptr; symtab *[4294967296]elf64Sym; symstrings *[4294967296]byte; chain []uint32; bucket []uint32; versym *[4294967296]uint16; verdef *elf64Verdef}
  func  vdso_init_from_sysinfo_ehdr           func(info *vdso_info, hdr *elf64Ehdr)
  func  vdso_parse_symbols                    func(info *vdso_info, version int32)
  type  version_key                           struct{version string; ver_hash uint32}
  type  waitq                                 struct{first *sudog; last *sudog}
    method (*waitq) dequeue() *sudog
    method (*waitq) dequeueSudoG(sgp *sudog)
    method (*waitq) enqueue(sgp *sudog)
  func  wakefing                              func() *g
  func  wakep                                 func()
  type  wbufptr                               uintptr
    method (wbufptr) ptr() *workbuf
  func  wbufptrOf                             func(w *workbuf) wbufptr
  type  wincallbackcontext                    struct{gobody unsafe.Pointer; argsize uintptr; restorestack uintptr; cleanstack bool}
  var   work                                  struct{full uint64; empty uint64; pad0 [64]uint8; markrootNext uint32; markrootJobs uint32; nproc uint32; tstart int64; nwait uint32; ndone uint32; alldone note; nDataRoots int; nBSSRoots int; nSpanRoots int; nStackRoots int; nRescanRoots int; markrootDone bool; startSema uint32; markDoneSema uint32; bgMarkReady note; bgMarkDone uint32; mode gcMode; spans []*mspan; totaltime int64; bytesMarked uint64; initialHeapLive uint64; assistQueue struct{lock mutex; head guintptr; tail guintptr}; rescan struct{lock mutex; list []guintptr}; stwprocs int32; maxprocs int32; tSweepTerm int64; tMark int64; tMarkTerm int64; tEnd int64; pauseNS int64; pauseStart int64; heap0 uint64; heap1 uint64; heap2 uint64; heapGoal uint64}
  type  workbuf                               struct{workbufhdr; obj [253]uintptr}
    method (*workbuf) checkempty()
    method (*workbuf) checknonempty()
  type  workbufhdr                            struct{node lfnode; nobj int}
  var   worldsema                             uint32
  func  write                                 func(fd uintptr, p unsafe.Pointer, n int32) int32
  var   writeBarrier                          struct{enabled bool; needed bool; cgo bool; alignme uint64}
  func  writeErr                              func(b []byte)
  func  writebarrierptr                       func(dst *uintptr, src uintptr)
  func  writebarrierptr_nostore               func(dst *uintptr, src uintptr)
  func  writebarrierptr_nostore1              func(dst *uintptr, src uintptr)
  func  writeheapdump_m                       func(fd uintptr)
  type  xmmreg                                struct{element [4]uint32}
  type  xmmreg1                               struct{element [4]uint32}
  var   zeroVal                               [1024]byte
  var   zerobase                              uintptr

package github.com/nsf/termbox-go:
  const AttrBold              AttrBold = 512:Attribute
  const AttrReverse           AttrReverse = 2048:Attribute
  const AttrUnderline         AttrUnderline = 1024:Attribute
  type  Attribute             uint16
  type  Cell                  struct{Ch rune; Fg Attribute; Bg Attribute}
  func  CellBuffer            func() []Cell
  func  Clear                 func(fg Attribute, bg Attribute) error
  func  Close                 func()
  const ColorBlack            ColorBlack = 1:Attribute
  const ColorBlue             ColorBlue = 5:Attribute
  const ColorCyan             ColorCyan = 7:Attribute
  const ColorDefault          ColorDefault = 0:Attribute
  const ColorGreen            ColorGreen = 3:Attribute
  const ColorMagenta          ColorMagenta = 6:Attribute
  const ColorRed              ColorRed = 2:Attribute
  const ColorWhite            ColorWhite = 8:Attribute
  const ColorYellow           ColorYellow = 4:Attribute
  type  Event                 struct{Type EventType; Mod Modifier; Key Key; Ch rune; Width int; Height int; Err error; MouseX int; MouseY int; N int}
  const EventError            EventError = 3:EventType
  const EventInterrupt        EventInterrupt = 4:EventType
  const EventKey              EventKey = 0:EventType
  const EventMouse            EventMouse = 2:EventType
  const EventNone             EventNone = 6:EventType
  const EventRaw              EventRaw = 5:EventType
  const EventResize           EventResize = 1:EventType
  type  EventType             uint8
  func  Flush                 func() error
  func  HideCursor            func()
  func  Init                  func() error
  const InputAlt              InputAlt = 2:InputMode
  const InputCurrent          InputCurrent = 0:InputMode
  const InputEsc              InputEsc = 1:InputMode
  type  InputMode             int
  const InputMouse            InputMouse = 4:InputMode
  func  Interrupt             func()
  var   IsInit                bool
  type  Key                   uint16
  const KeyArrowDown          KeyArrowDown = 65516:Key
  const KeyArrowLeft          KeyArrowLeft = 65515:Key
  const KeyArrowRight         KeyArrowRight = 65514:Key
  const KeyArrowUp            KeyArrowUp = 65517:Key
  const KeyBackspace          KeyBackspace = 8:Key
  const KeyBackspace2         KeyBackspace2 = 127:Key
  const KeyCtrl2              KeyCtrl2 = 0:Key
  const KeyCtrl3              KeyCtrl3 = 27:Key
  const KeyCtrl4              KeyCtrl4 = 28:Key
  const KeyCtrl5              KeyCtrl5 = 29:Key
  const KeyCtrl6              KeyCtrl6 = 30:Key
  const KeyCtrl7              KeyCtrl7 = 31:Key
  const KeyCtrl8              KeyCtrl8 = 127:Key
  const KeyCtrlA              KeyCtrlA = 1:Key
  const KeyCtrlB              KeyCtrlB = 2:Key
  const KeyCtrlBackslash      KeyCtrlBackslash = 28:Key
  const KeyCtrlC              KeyCtrlC = 3:Key
  const KeyCtrlD              KeyCtrlD = 4:Key
  const KeyCtrlE              KeyCtrlE = 5:Key
  const KeyCtrlF              KeyCtrlF = 6:Key
  const KeyCtrlG              KeyCtrlG = 7:Key
  const KeyCtrlH              KeyCtrlH = 8:Key
  const KeyCtrlI              KeyCtrlI = 9:Key
  const KeyCtrlJ              KeyCtrlJ = 10:Key
  const KeyCtrlK              KeyCtrlK = 11:Key
  const KeyCtrlL              KeyCtrlL = 12:Key
  const KeyCtrlLsqBracket     KeyCtrlLsqBracket = 27:Key
  const KeyCtrlM              KeyCtrlM = 13:Key
  const KeyCtrlN              KeyCtrlN = 14:Key
  const KeyCtrlO              KeyCtrlO = 15:Key
  const KeyCtrlP              KeyCtrlP = 16:Key
  const KeyCtrlQ              KeyCtrlQ = 17:Key
  const KeyCtrlR              KeyCtrlR = 18:Key
  const KeyCtrlRsqBracket     KeyCtrlRsqBracket = 29:Key
  const KeyCtrlS              KeyCtrlS = 19:Key
  const KeyCtrlSlash          KeyCtrlSlash = 31:Key
  const KeyCtrlSpace          KeyCtrlSpace = 0:Key
  const KeyCtrlT              KeyCtrlT = 20:Key
  const KeyCtrlTilde          KeyCtrlTilde = 0:Key
  const KeyCtrlU              KeyCtrlU = 21:Key
  const KeyCtrlUnderscore     KeyCtrlUnderscore = 31:Key
  const KeyCtrlV              KeyCtrlV = 22:Key
  const KeyCtrlW              KeyCtrlW = 23:Key
  const KeyCtrlX              KeyCtrlX = 24:Key
  const KeyCtrlY              KeyCtrlY = 25:Key
  const KeyCtrlZ              KeyCtrlZ = 26:Key
  const KeyDelete             KeyDelete = 65522:Key
  const KeyEnd                KeyEnd = 65520:Key
  const KeyEnter              KeyEnter = 13:Key
  const KeyEsc                KeyEsc = 27:Key
  const KeyF1                 KeyF1 = 65535:Key
  const KeyF10                KeyF10 = 65526:Key
  const KeyF11                KeyF11 = 65525:Key
  const KeyF12                KeyF12 = 65524:Key
  const KeyF2                 KeyF2 = 65534:Key
  const KeyF3                 KeyF3 = 65533:Key
  const KeyF4                 KeyF4 = 65532:Key
  const KeyF5                 KeyF5 = 65531:Key
  const KeyF6                 KeyF6 = 65530:Key
  const KeyF7                 KeyF7 = 65529:Key
  const KeyF8                 KeyF8 = 65528:Key
  const KeyF9                 KeyF9 = 65527:Key
  const KeyHome               KeyHome = 65521:Key
  const KeyInsert             KeyInsert = 65523:Key
  const KeyPgdn               KeyPgdn = 65518:Key
  const KeyPgup               KeyPgup = 65519:Key
  const KeySpace              KeySpace = 32:Key
  const KeyTab                KeyTab = 9:Key
  const ModAlt                ModAlt = 1:Modifier
  const ModMotion             ModMotion = 2:Modifier
  type  Modifier              uint8
  const MouseLeft             MouseLeft = 65512:Key
  const MouseMiddle           MouseMiddle = 65511:Key
  const MouseRelease          MouseRelease = 65509:Key
  const MouseRight            MouseRight = 65510:Key
  const MouseWheelDown        MouseWheelDown = 65507:Key
  const MouseWheelUp          MouseWheelUp = 65508:Key
  const Output216             Output216 = 3:OutputMode
  const Output256             Output256 = 2:OutputMode
  const OutputCurrent         OutputCurrent = 0:OutputMode
  const OutputGrayscale       OutputGrayscale = 4:OutputMode
  type  OutputMode            int
  const OutputNormal          OutputNormal = 1:OutputMode
  func  ParseEvent            func(data []byte) Event
  func  PollEvent             func() Event
  func  PollRawEvent          func(data []byte) Event
  func  SetCell               func(x int, y int, ch rune, fg Attribute, bg Attribute)
  func  SetCursor             func(x int, y int)
  func  SetInputMode          func(mode InputMode) InputMode
  func  SetOutputMode         func(mode OutputMode) OutputMode
  func  Size                  func() (width int, height int)
  func  Sync                  func() error
  const attr_invalid          attr_invalid = 65535:Attribute
  var   back_buffer           cellbuf
  var   background            Attribute
  type  cellbuf               struct{width int; height int; cells []Cell}
    method (*cellbuf) clear()
    method (*cellbuf) init(width int, height int)
    method (*cellbuf) resize(width int, height int)
  const coord_invalid         coord_invalid = -2:untyped int
  const cursor_hidden         cursor_hidden = -1:untyped int
  var   cursor_x              int
  var   cursor_y              int
  var   eterm_funcs           []string
  var   eterm_keys            []string
  func  extract_event         func(inbuf []byte, event *Event) bool
  func  extract_raw_event     func(data []byte, event *Event) bool
  func  fcntl                 func(fd int, cmd int, arg int) (val int, err error)
  func  flush                 func() error
  var   foreground            Attribute
  var   front_buffer          cellbuf
  var   funcs                 []string
  func  get_term_size         func(fd uintptr) (int, int)
  var   grayscale             []Attribute
  var   in                    int
  var   inbuf                 []byte
  func  init                  func()
  var   init$guard            bool
  var   input_comm            chan input_event
  type  input_event           struct{data []byte; err error}
  var   input_mode            InputMode
  var   intbuf                []byte
  var   interrupt_comm        chan struct{}
  func  is_cursor_hidden      func(x int, y int) bool
  const key_min               key_min = 65513:Key
  var   keys                  []string
  var   lastbg                Attribute
  var   lastfg                Attribute
  var   lastx                 int
  var   lasty                 int
  var   linux_funcs           []string
  var   linux_keys            []string
  func  load_terminfo         func() ([]byte, error)
  var   orig_tios             syscall_Termios
  var   out                   *os.File
  var   outbuf                bytes.Buffer
  var   output_mode           OutputMode
  func  parse_escape_sequence func(event *Event, buf []byte) (int, bool)
  func  parse_mouse_event     func(event *Event, buf string) (int, bool)
  var   quit                  chan int
  var   rxvt_256color_funcs   []string
  var   rxvt_256color_keys    []string
  var   rxvt_unicode_funcs    []string
  var   rxvt_unicode_keys     []string
  var   screen_funcs          []string
  var   screen_keys           []string
  func  send_attr             func(fg Attribute, bg Attribute)
  func  send_char             func(x int, y int, ch rune)
  func  send_clear            func() error
  func  setup_term            func() (err error)
  func  setup_term_builtin    func() error
  var   sigio                 chan os.Signal
  var   sigwinch              chan os.Signal
  const syscall_BRKINT        syscall_BRKINT = 2:untyped int
  const syscall_CS8           syscall_CS8 = 48:untyped int
  const syscall_CSIZE         syscall_CSIZE = 48:untyped int
  const syscall_ECHO          syscall_ECHO = 8:untyped int
  const syscall_ECHONL        syscall_ECHONL = 64:untyped int
  const syscall_ICANON        syscall_ICANON = 2:untyped int
  const syscall_ICRNL         syscall_ICRNL = 256:untyped int
  const syscall_IEXTEN        syscall_IEXTEN = 32768:untyped int
  const syscall_IGNBRK        syscall_IGNBRK = 1:untyped int
  const syscall_IGNCR         syscall_IGNCR = 128:untyped int
  const syscall_INLCR         syscall_INLCR = 64:untyped int
  const syscall_ISIG          syscall_ISIG = 1:untyped int
  const syscall_ISTRIP        syscall_ISTRIP = 32:untyped int
  const syscall_IXON          syscall_IXON = 1024:untyped int
  const syscall_OPOST         syscall_OPOST = 1:untyped int
  const syscall_PARENB        syscall_PARENB = 256:untyped int
  const syscall_PARMRK        syscall_PARMRK = 8:untyped int
  const syscall_TCGETS        syscall_TCGETS = 21505:untyped int
  const syscall_TCSETS        syscall_TCSETS = 21506:untyped int
  type  syscall_Termios       struct{Iflag uint32; Oflag uint32; Cflag uint32; Lflag uint32; Line uint8; Cc [32]uint8; Pad_cgo_0 [3]byte; Ispeed uint32; Ospeed uint32}
  const syscall_VMIN          syscall_VMIN = 6:untyped int
  const syscall_VTIME         syscall_VTIME = 5:untyped int
  const t_blink               t_blink = 8:untyped int
  const t_bold                t_bold = 7:untyped int
  const t_clear_screen        t_clear_screen = 4:untyped int
  const t_enter_ca            t_enter_ca = 0:untyped int
  const t_enter_keypad        t_enter_keypad = 10:untyped int
  const t_enter_mouse         t_enter_mouse = 12:untyped int
  const t_exit_ca             t_exit_ca = 1:untyped int
  const t_exit_keypad         t_exit_keypad = 11:untyped int
  const t_exit_mouse          t_exit_mouse = 13:untyped int
  const t_hide_cursor         t_hide_cursor = 3:untyped int
  const t_max_funcs           t_max_funcs = 14:untyped int
  const t_reverse             t_reverse = 9:untyped int
  const t_sgr0                t_sgr0 = 5:untyped int
  const t_show_cursor         t_show_cursor = 2:untyped int
  const t_underline           t_underline = 6:untyped int
  func  tcgetattr             func(fd uintptr, termios *syscall_Termios) error
  func  tcsetattr             func(fd uintptr, termios *syscall_Termios) error
  var   termh                 int
  var   terms                 []struct{name string; keys []string; funcs []string}
  var   termw                 int
  var   ti_funcs              []int16
  const ti_header_length      ti_header_length = 12:untyped int
  var   ti_keys               []int16
  const ti_magic              ti_magic = 282:untyped int
  const ti_mouse_enter        ti_mouse_enter = "\x1b[?1000h\x1b[?1002h\x1b...":untyped string
  const ti_mouse_leave        ti_mouse_leave = "\x1b[?1006l\x1b[?1015l\x1b...":untyped string
  func  ti_read_string        func(rd *bytes.Reader, str_off int16, table int16) (string, error)
  func  ti_try_path           func(path string) (data []byte, err error)
  func  update_size_maybe     func() error
  type  winsize               struct{rows uint16; cols uint16; xpixels uint16; ypixels uint16}
  func  write_cursor          func(x int, y int)
  func  write_sgr             func(fg Attribute, bg Attribute)
  func  write_sgr_bg          func(a Attribute)
  func  write_sgr_fg          func(a Attribute)
  var   xterm_funcs           []string
  var   xterm_keys            []string

package strconv:
  func  AppendBool               func(dst []byte, b bool) []byte
  func  AppendFloat              func(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte
  func  AppendInt                func(dst []byte, i int64, base int) []byte
  func  AppendQuote              func(dst []byte, s string) []byte
  func  AppendQuoteRune          func(dst []byte, r rune) []byte
  func  AppendQuoteRuneToASCII   func(dst []byte, r rune) []byte
  func  AppendQuoteRuneToGraphic func(dst []byte, r rune) []byte
  func  AppendQuoteToASCII       func(dst []byte, s string) []byte
  func  AppendQuoteToGraphic     func(dst []byte, s string) []byte
  func  AppendUint               func(dst []byte, i uint64, base int) []byte
  func  Atoi                     func(s string) (int, error)
  func  CanBackquote             func(s string) bool
  var   ErrRange                 error
  var   ErrSyntax                error
  func  FormatBool               func(b bool) string
  func  FormatFloat              func(f float64, fmt byte, prec int, bitSize int) string
  func  FormatInt                func(i int64, base int) string
  func  FormatUint               func(i uint64, base int) string
  const IntSize                  IntSize = 64:untyped int
  func  IsGraphic                func(r rune) bool
  func  IsPrint                  func(r rune) bool
  func  Itoa                     func(i int) string
  type  NumError                 struct{Func string; Num string; Err error}
    method (*NumError) Error() string
  func  ParseBool                func(str string) (bool, error)
  func  ParseFloat               func(s string, bitSize int) (float64, error)
  func  ParseInt                 func(s string, base int, bitSize int) (i int64, err error)
  func  ParseUint                func(s string, base int, bitSize int) (uint64, error)
  func  Quote                    func(s string) string
  func  QuoteRune                func(r rune) string
  func  QuoteRuneToASCII         func(r rune) string
  func  QuoteRuneToGraphic       func(r rune) string
  func  QuoteToASCII             func(s string) string
  func  QuoteToGraphic           func(s string) string
  func  Unquote                  func(s string) (string, error)
  func  UnquoteChar              func(s string, quote byte) (value rune, multibyte bool, tail string, err error)
  func  adjustLastDigit          func(d *decimalSlice, currentDiff uint64, targetDiff uint64, maxDiff uint64, ulpDecimal uint64, ulpBinary uint64) bool
  func  adjustLastDigitFixed     func(d *decimalSlice, num uint64, den uint64, shift uint, ε uint64) bool
  func  appendEscapedRune        func(buf []byte, r rune, width int, quote byte, ASCIIonly bool, graphicOnly bool) []byte
  func  appendQuotedRuneWith     func(buf []byte, r rune, quote byte, ASCIIonly bool, graphicOnly bool) []byte
  func  appendQuotedWith         func(buf []byte, s string, quote byte, ASCIIonly bool, graphicOnly bool) []byte
  func  atof32                   func(s string) (f float32, err error)
  func  atof32exact              func(mantissa uint64, exp int, neg bool) (f float32, ok bool)
  func  atof64                   func(s string) (f float64, err error)
  func  atof64exact              func(mantissa uint64, exp int, neg bool) (f float64, ok bool)
  func  bigFtoa                  func(dst []byte, prec int, fmt byte, neg bool, mant uint64, exp int, flt *floatInfo) []byte
  func  bsearch16                func(a []uint16, x uint16) int
  func  bsearch32                func(a []uint32, x uint32) int
  func  contains                 func(s string, c byte) bool
  type  decimal                  struct{d [800]byte; nd int; dp int; neg bool; trunc bool}
    method (*decimal) Assign(v uint64)
    method (*decimal) Round(nd int)
    method (*decimal) RoundDown(nd int)
    method (*decimal) RoundUp(nd int)
    method (*decimal) RoundedInteger() uint64
    method (*decimal) Shift(k int)
    method (*decimal) String() string
    method (*decimal) floatBits(flt *floatInfo) (b uint64, overflow bool)
    method (*decimal) set(s string) (ok bool)
  type  decimalSlice             struct{d []byte; nd int; dp int; neg bool}
  func  digitZero                func(dst []byte) int
  const digits                   digits = "0123456789abcdefg...":untyped string
  func  equalIgnoreCase          func(s1 string, s2 string) bool
  type  extFloat                 struct{mant uint64; exp int; neg bool}
    method (*extFloat) AssignComputeBounds(mant uint64, exp int, neg bool, flt *floatInfo) (lower extFloat, upper extFloat)
    method (*extFloat) AssignDecimal(mantissa uint64, exp10 int, neg bool, trunc bool, flt *floatInfo) (ok bool)
    method (*extFloat) FixedDecimal(d *decimalSlice, n int) bool
    method (*extFloat) Multiply(g extFloat)
    method (*extFloat) Normalize() (shift uint)
    method (*extFloat) ShortestDecimal(d *decimalSlice, lower *extFloat, upper *extFloat) bool
    method (*extFloat) floatBits(flt *floatInfo) (bits uint64, overflow bool)
    method (*extFloat) frexp10() (exp10 int, index int)
  const firstPowerOfTen          firstPowerOfTen = -348:untyped int
  var   float32info              floatInfo
  var   float32pow10             []float32
  var   float64info              floatInfo
  var   float64pow10             []float64
  type  floatInfo                struct{mantbits uint; expbits uint; bias int}
  func  fmtB                     func(dst []byte, neg bool, mant uint64, exp int, flt *floatInfo) []byte
  func  fmtE                     func(dst []byte, neg bool, d decimalSlice, prec int, fmt byte) []byte
  func  fmtF                     func(dst []byte, neg bool, d decimalSlice, prec int) []byte
  const fnParseFloat             fnParseFloat = "ParseFloat":untyped string
  func  formatBits               func(dst []byte, u uint64, base int, neg bool, append_ bool) (d []byte, s string)
  func  formatDigits             func(dst []byte, shortest bool, neg bool, digs decimalSlice, prec int, fmt byte) []byte
  func  frexp10Many              func(a *extFloat, b *extFloat, c *extFloat) (exp10 int)
  func  genericFtoa              func(dst []byte, val float64, fmt byte, prec int, bitSize int) []byte
  func  init                     func()
  var   init$guard               bool
  const intSize                  intSize = 64:untyped int
  var   isGraphic                []uint16
  func  isInGraphicList          func(r rune) bool
  var   isNotPrint16             []uint16
  var   isNotPrint32             []uint16
  var   isPrint16                []uint16
  var   isPrint32                []uint32
  type  leftCheat                struct{delta int; cutoff string}
  func  leftShift                func(a *decimal, k uint)
  var   leftcheats               []leftCheat
  const lowerhex                 lowerhex = "0123456789abcdef":untyped string
  func  max                      func(a int, b int) int
  const maxShift                 maxShift = 60:untyped int
  const maxUint64                maxUint64 = 18446744073709551615:untyped int
  func  min                      func(a int, b int) int
  var   optimize                 bool
  var   powersOfTen              [87]extFloat
  var   powtab                   []int
  func  prefixIsLessThan         func(b []byte, s string) bool
  func  quoteRuneWith            func(r rune, quote byte, ASCIIonly bool, graphicOnly bool) string
  func  quoteWith                func(s string, quote byte, ASCIIonly bool, graphicOnly bool) string
  func  rangeError               func(fn string, str string) *NumError
  func  readFloat                func(s string) (mantissa uint64, exp int, neg bool, trunc bool, ok bool)
  func  rightShift               func(a *decimal, k uint)
  func  roundShortest            func(d *decimal, mant uint64, exp int, flt *floatInfo)
  var   shifts                   [37]uint
  func  shouldRoundUp            func(a *decimal, nd int) bool
  var   smallPowersOfTen         [8]extFloat
  func  special                  func(s string) (f float64, ok bool)
  const stepPowerOfTen           stepPowerOfTen = 8:untyped int
  func  syntaxError              func(fn string, str string) *NumError
  func  trim                     func(a *decimal)
  var   uint64pow10              [20]uint64
  const uintSize                 uintSize = 64:untyped int
  func  unhex                    func(b byte) (v rune, ok bool)

package io:
  type  ByteReader       interface{ReadByte() (byte, error)}
    method (ByteReader) ReadByte() (byte, error)
  type  ByteScanner      interface{UnreadByte() error; ByteReader}
    method (ByteScanner) ReadByte() (byte, error)
    method (ByteScanner) UnreadByte() error
  type  ByteWriter       interface{WriteByte(c byte) error}
    method (ByteWriter) WriteByte(c byte) error
  type  Closer           interface{Close() error}
    method (Closer) Close() error
  func  Copy             func(dst Writer, src Reader) (written int64, err error)
  func  CopyBuffer       func(dst Writer, src Reader, buf []byte) (written int64, err error)
  func  CopyN            func(dst Writer, src Reader, n int64) (written int64, err error)
  var   EOF              error
  var   ErrClosedPipe    error
  var   ErrNoProgress    error
  var   ErrShortBuffer   error
  var   ErrShortWrite    error
  var   ErrUnexpectedEOF error
  func  LimitReader      func(r Reader, n int64) Reader
  type  LimitedReader    struct{R Reader; N int64}
    method (*LimitedReader) Read(p []byte) (n int, err error)
  func  MultiReader      func(readers ...Reader) Reader
  func  MultiWriter      func(writers ...Writer) Writer
  func  NewSectionReader func(r ReaderAt, off int64, n int64) *SectionReader
  func  Pipe             func() (*PipeReader, *PipeWriter)
  type  PipeReader       struct{p *pipe}
    method (*PipeReader) Close() error
    method (*PipeReader) CloseWithError(err error) error
    method (*PipeReader) Read(data []byte) (n int, err error)
  type  PipeWriter       struct{p *pipe}
    method (*PipeWriter) Close() error
    method (*PipeWriter) CloseWithError(err error) error
    method (*PipeWriter) Write(data []byte) (n int, err error)
  func  ReadAtLeast      func(r Reader, buf []byte, min int) (n int, err error)
  type  ReadCloser       interface{Closer; Reader}
    method (ReadCloser) Close() error
    method (ReadCloser) Read(p []byte) (n int, err error)
  func  ReadFull         func(r Reader, buf []byte) (n int, err error)
  type  ReadSeeker       interface{Reader; Seeker}
    method (ReadSeeker) Read(p []byte) (n int, err error)
    method (ReadSeeker) Seek(offset int64, whence int) (int64, error)
  type  ReadWriteCloser  interface{Closer; Reader; Writer}
    method (ReadWriteCloser) Close() error
    method (ReadWriteCloser) Read(p []byte) (n int, err error)
    method (ReadWriteCloser) Write(p []byte) (n int, err error)
  type  ReadWriteSeeker  interface{Reader; Seeker; Writer}
    method (ReadWriteSeeker) Read(p []byte) (n int, err error)
    method (ReadWriteSeeker) Seek(offset int64, whence int) (int64, error)
    method (ReadWriteSeeker) Write(p []byte) (n int, err error)
  type  ReadWriter       interface{Reader; Writer}
    method (ReadWriter) Read(p []byte) (n int, err error)
    method (ReadWriter) Write(p []byte) (n int, err error)
  type  Reader           interface{Read(p []byte) (n int, err error)}
    method (Reader) Read(p []byte) (n int, err error)
  type  ReaderAt         interface{ReadAt(p []byte, off int64) (n int, err error)}
    method (ReaderAt) ReadAt(p []byte, off int64) (n int, err error)
  type  ReaderFrom       interface{ReadFrom(r Reader) (n int64, err error)}
    method (ReaderFrom) ReadFrom(r Reader) (n int64, err error)
  type  RuneReader       interface{ReadRune() (r rune, size int, err error)}
    method (RuneReader) ReadRune() (r rune, size int, err error)
  type  RuneScanner      interface{UnreadRune() error; RuneReader}
    method (RuneScanner) ReadRune() (r rune, size int, err error)
    method (RuneScanner) UnreadRune() error
  type  SectionReader    struct{r ReaderAt; base int64; off int64; limit int64}
    method (*SectionReader) Read(p []byte) (n int, err error)
    method (*SectionReader) ReadAt(p []byte, off int64) (n int, err error)
    method (*SectionReader) Seek(offset int64, whence int) (int64, error)
    method (*SectionReader) Size() int64
  const SeekCurrent      SeekCurrent = 1:untyped int
  const SeekEnd          SeekEnd = 2:untyped int
  const SeekStart        SeekStart = 0:untyped int
  type  Seeker           interface{Seek(offset int64, whence int) (int64, error)}
    method (Seeker) Seek(offset int64, whence int) (int64, error)
  func  TeeReader        func(r Reader, w Writer) Reader
  type  WriteCloser      interface{Closer; Writer}
    method (WriteCloser) Close() error
    method (WriteCloser) Write(p []byte) (n int, err error)
  type  WriteSeeker      interface{Seeker; Writer}
    method (WriteSeeker) Seek(offset int64, whence int) (int64, error)
    method (WriteSeeker) Write(p []byte) (n int, err error)
  func  WriteString      func(w Writer, s string) (n int, err error)
  type  Writer           interface{Write(p []byte) (n int, err error)}
    method (Writer) Write(p []byte) (n int, err error)
  type  WriterAt         interface{WriteAt(p []byte, off int64) (n int, err error)}
    method (WriterAt) WriteAt(p []byte, off int64) (n int, err error)
  type  WriterTo         interface{WriteTo(w Writer) (n int64, err error)}
    method (WriterTo) WriteTo(w Writer) (n int64, err error)
  func  copyBuffer       func(dst Writer, src Reader, buf []byte) (written int64, err error)
  var   errOffset        error
  var   errWhence        error
  func  init             func()
  var   init$guard       bool
  type  multiReader      struct{readers []Reader}
    method (*multiReader) Read(p []byte) (n int, err error)
  type  multiWriter      struct{writers []Writer}
    method (*multiWriter) Write(p []byte) (n int, err error)
    method (*multiWriter) WriteString(s string) (n int, err error)
  type  pipe             struct{rl sync.Mutex; wl sync.Mutex; l sync.Mutex; data []byte; rwait sync.Cond; wwait sync.Cond; rerr error; werr error}
    method (*pipe) rclose(err error)
    method (*pipe) read(b []byte) (n int, err error)
    method (*pipe) wclose(err error)
    method (*pipe) write(b []byte) (n int, err error)
  type  stringWriter     interface{WriteString(s string) (n int, err error)}
    method (stringWriter) WriteString(s string) (n int, err error)
  type  teeReader        struct{r Reader; w Writer}
    method (*teeReader) Read(p []byte) (n int, err error)
  var   zero             [0]byte

package os:
  var   Args                        []string
  func  Chdir                       func(dir string) error
  func  Chmod                       func(name string, mode FileMode) error
  func  Chown                       func(name string, uid int, gid int) error
  func  Chtimes                     func(name string, atime time.Time, mtime time.Time) error
  func  Clearenv                    func()
  func  Create                      func(name string) (*File, error)
  const DevNull                     DevNull = "/dev/null":untyped string
  func  Environ                     func() []string
  var   ErrExist                    error
  var   ErrInvalid                  error
  var   ErrNotExist                 error
  var   ErrPermission               error
  func  Exit                        func(code int)
  func  Expand                      func(s string, mapping func(string) string) string
  func  ExpandEnv                   func(s string) string
  type  File                        struct{*file}
    method (*File) Chdir() error
    method (*File) Chmod(mode FileMode) error
    method (*File) Chown(uid int, gid int) error
    method (*File) Close() error
    method (*File) Fd() uintptr
    method (*File) Name() string
    method (*File) Read(b []byte) (n int, err error)
    method (*File) ReadAt(b []byte, off int64) (n int, err error)
    method (*File) Readdir(n int) ([]FileInfo, error)
    method (*File) Readdirnames(n int) (names []string, err error)
    method (*File) Seek(offset int64, whence int) (ret int64, err error)
    method (*File) Stat() (FileInfo, error)
    method (*File) Sync() error
    method (*File) Truncate(size int64) error
    method (*File) Write(b []byte) (n int, err error)
    method (*File) WriteAt(b []byte, off int64) (n int, err error)
    method (*File) WriteString(s string) (n int, err error)
    method (File) close() error
    method (*File) pread(b []byte, off int64) (n int, err error)
    method (*File) pwrite(b []byte, off int64) (n int, err error)
    method (*File) read(b []byte) (n int, err error)
    method (*File) readdir(n int) (fi []FileInfo, err error)
    method (*File) readdirnames(n int) (names []string, err error)
    method (*File) seek(offset int64, whence int) (ret int64, err error)
    method (*File) write(b []byte) (n int, err error)
  type  FileInfo                    interface{IsDir() bool; ModTime() time.Time; Mode() FileMode; Name() string; Size() int64; Sys() interface{}}
    method (FileInfo) IsDir() bool
    method (FileInfo) ModTime() time.Time
    method (FileInfo) Mode() FileMode
    method (FileInfo) Name() string
    method (FileInfo) Size() int64
    method (FileInfo) Sys() interface{}
  type  FileMode                    uint32
    method (FileMode) IsDir() bool
    method (FileMode) IsRegular() bool
    method (FileMode) Perm() FileMode
    method (FileMode) String() string
  func  FindProcess                 func(pid int) (*Process, error)
  func  Getegid                     func() int
  func  Getenv                      func(key string) string
  func  Geteuid                     func() int
  func  Getgid                      func() int
  func  Getgroups                   func() ([]int, error)
  func  Getpagesize                 func() int
  func  Getpid                      func() int
  func  Getppid                     func() int
  func  Getuid                      func() int
  func  Getwd                       func() (dir string, err error)
  func  Hostname                    func() (name string, err error)
  var   Interrupt                   Signal
  func  IsExist                     func(err error) bool
  func  IsNotExist                  func(err error) bool
  func  IsPathSeparator             func(c uint8) bool
  func  IsPermission                func(err error) bool
  var   Kill                        Signal
  func  Lchown                      func(name string, uid int, gid int) error
  func  Link                        func(oldname string, newname string) error
  type  LinkError                   struct{Op string; Old string; New string; Err error}
    method (*LinkError) Error() string
  func  LookupEnv                   func(key string) (string, bool)
  func  Lstat                       func(name string) (FileInfo, error)
  func  Mkdir                       func(name string, perm FileMode) error
  func  MkdirAll                    func(path string, perm FileMode) error
  const ModeAppend                  ModeAppend = 1073741824:FileMode
  const ModeCharDevice              ModeCharDevice = 2097152:FileMode
  const ModeDevice                  ModeDevice = 67108864:FileMode
  const ModeDir                     ModeDir = 2147483648:FileMode
  const ModeExclusive               ModeExclusive = 536870912:FileMode
  const ModeNamedPipe               ModeNamedPipe = 33554432:FileMode
  const ModePerm                    ModePerm = 511:FileMode
  const ModeSetgid                  ModeSetgid = 4194304:FileMode
  const ModeSetuid                  ModeSetuid = 8388608:FileMode
  const ModeSocket                  ModeSocket = 16777216:FileMode
  const ModeSticky                  ModeSticky = 1048576:FileMode
  const ModeSymlink                 ModeSymlink = 134217728:FileMode
  const ModeTemporary               ModeTemporary = 268435456:FileMode
  const ModeType                    ModeType = 2399141888:FileMode
  func  NewFile                     func(fd uintptr, name string) *File
  func  NewSyscallError             func(syscall string, err error) error
  const O_APPEND                    O_APPEND = 1024:int
  const O_CREATE                    O_CREATE = 64:int
  const O_EXCL                      O_EXCL = 128:int
  const O_RDONLY                    O_RDONLY = 0:int
  const O_RDWR                      O_RDWR = 2:int
  const O_SYNC                      O_SYNC = 1052672:int
  const O_TRUNC                     O_TRUNC = 512:int
  const O_WRONLY                    O_WRONLY = 1:int
  func  Open                        func(name string) (*File, error)
  func  OpenFile                    func(name string, flag int, perm FileMode) (*File, error)
  type  PathError                   struct{Op string; Path string; Err error}
    method (*PathError) Error() string
  const PathListSeparator           PathListSeparator = 58:untyped rune
  const PathSeparator               PathSeparator = 47:untyped rune
  func  Pipe                        func() (r *File, w *File, err error)
  type  ProcAttr                    struct{Dir string; Env []string; Files []*File; Sys *syscall.SysProcAttr}
  type  Process                     struct{Pid int; handle uintptr; isdone uint32; sigMu sync.RWMutex}
    method (*Process) Kill() error
    method (*Process) Release() error
    method (*Process) Signal(sig Signal) error
    method (*Process) Wait() (*ProcessState, error)
    method (*Process) blockUntilWaitable() (bool, error)
    method (*Process) done() bool
    method (*Process) kill() error
    method (*Process) release() error
    method (*Process) setDone()
    method (*Process) signal(sig Signal) error
    method (*Process) wait() (ps *ProcessState, err error)
  type  ProcessState                struct{pid int; status syscall.WaitStatus; rusage *syscall.Rusage}
    method (*ProcessState) Exited() bool
    method (*ProcessState) Pid() int
    method (*ProcessState) String() string
    method (*ProcessState) Success() bool
    method (*ProcessState) Sys() interface{}
    method (*ProcessState) SysUsage() interface{}
    method (*ProcessState) SystemTime() time.Duration
    method (*ProcessState) UserTime() time.Duration
    method (*ProcessState) exited() bool
    method (*ProcessState) success() bool
    method (*ProcessState) sys() interface{}
    method (*ProcessState) sysUsage() interface{}
    method (*ProcessState) systemTime() time.Duration
    method (*ProcessState) userTime() time.Duration
  func  Readlink                    func(name string) (string, error)
  func  Remove                      func(name string) error
  func  RemoveAll                   func(path string) error
  func  Rename                      func(oldpath string, newpath string) error
  const SEEK_CUR                    SEEK_CUR = 1:int
  const SEEK_END                    SEEK_END = 2:int
  const SEEK_SET                    SEEK_SET = 0:int
  func  SameFile                    func(fi1 FileInfo, fi2 FileInfo) bool
  func  Setenv                      func(key string, value string) error
  type  Signal                      interface{Signal(); String() string}
    method (Signal) Signal()
    method (Signal) String() string
  func  StartProcess                func(name string, argv []string, attr *ProcAttr) (*Process, error)
  func  Stat                        func(name string) (FileInfo, error)
  var   Stderr                      *File
  var   Stdin                       *File
  var   Stdout                      *File
  func  Symlink                     func(oldname string, newname string) error
  type  SyscallError                struct{Syscall string; Err error}
    method (*SyscallError) Error() string
  func  TempDir                     func() string
  func  Truncate                    func(name string, size int64) error
  func  Unsetenv                    func(key string) error
  const _P_PID                      _P_PID = 1:untyped int
  func  atime                       func(fi FileInfo) time.Time
  func  basename                    func(name string) string
  const blockSize                   blockSize = 4096:untyped int
  type  dirInfo                     struct{buf []byte; nbuf int; bufp int}
  func  epipecheck                  func(file *File, e error)
  var   errFinished                 error
  type  file                        struct{fd int; name string; dirinfo *dirInfo}
    method (*file) close() error
  type  fileStat                    struct{name string; size int64; mode FileMode; modTime time.Time; sys syscall.Stat_t}
    method (*fileStat) IsDir() bool
    method (*fileStat) ModTime() time.Time
    method (*fileStat) Mode() FileMode
    method (*fileStat) Name() string
    method (*fileStat) Size() int64
    method (*fileStat) Sys() interface{}
  func  fillFileStatFromSys         func(fs *fileStat, name string)
  func  findProcess                 func(pid int) (p *Process, err error)
  func  fixCount                    func(n int, err error) (int, error)
  func  getShellName                func(s string) (string, int)
  var   getwdCache                  struct{sync.Mutex; dir string}
  func  hostname                    func() (name string, err error)
  func  init                        func()
  func  init#1                      func()
  var   init$guard                  bool
  func  isAlphaNum                  func(c uint8) bool
  func  isExist                     func(err error) bool
  func  isNotExist                  func(err error) bool
  func  isPermission                func(err error) bool
  func  isShellSpecialVar           func(c uint8) bool
  func  itoa                        func(val int) string
  var   lstat                       func(name string) (FileInfo, error)
  const maxRW                       maxRW = 1073741824:untyped int
  const needsMaxRW                  needsMaxRW = false:untyped bool
  func  newProcess                  func(pid int, handle uintptr) *Process
  func  rename                      func(oldname string, newname string) error
  func  runtime_args                func() []string
  func  runtime_beforeExit          func()
  func  sameFile                    func(fs1 *fileStat, fs2 *fileStat) bool
  func  sigpipe                     func()
  func  startProcess                func(name string, argv []string, attr *ProcAttr) (p *Process, err error)
  const supportsCloseOnExec         supportsCloseOnExec = true:untyped bool
  const supportsCreateWithStickyBit supportsCreateWithStickyBit = true:untyped bool
  func  syscallMode                 func(i FileMode) (o uint32)
  func  timespecToTime              func(ts syscall.Timespec) time.Time
  func  uitoa                       func(val uint) string
  var   useSyscallwd                func(error) bool

package path/filepath:
  func  Abs                  func(path string) (string, error)
  func  Base                 func(path string) string
  func  Clean                func(path string) string
  func  Dir                  func(path string) string
  var   ErrBadPattern        error
  func  EvalSymlinks         func(path string) (string, error)
  func  Ext                  func(path string) string
  func  FromSlash            func(path string) string
  func  Glob                 func(pattern string) (matches []string, err error)
  func  HasPrefix            func(p string, prefix string) bool
  func  IsAbs                func(path string) bool
  func  Join                 func(elem ...string) string
  const ListSeparator        ListSeparator = 58:untyped rune
  func  Match                func(pattern string, name string) (matched bool, err error)
  func  Rel                  func(basepath string, targpath string) (string, error)
  const Separator            Separator = 47:untyped rune
  var   SkipDir              error
  func  Split                func(path string) (dir string, file string)
  func  SplitList            func(path string) []string
  func  ToSlash              func(path string) string
  func  VolumeName           func(path string) string
  func  Walk                 func(root string, walkFn WalkFunc) error
  type  WalkFunc             func(path string, info os.FileInfo, err error) error
  func  abs                  func(path string) (string, error)
  func  cleanGlobPath        func(path string) string
  func  cleanGlobPathWindows func(path string) string
  func  evalSymlinks         func(path string) (string, error)
  func  getEsc               func(chunk string) (r rune, nchunk string, err error)
  func  glob                 func(dir string, pattern string, matches []string) (m []string, e error)
  func  hasMeta              func(path string) bool
  func  init                 func()
  var   init$guard           bool
  func  isDriveLetter        func(path string) bool
  func  isRoot               func(path string) bool
  func  join                 func(elem []string) string
  type  lazybuf              struct{path string; buf []byte; w int; volAndPath string; volLen int}
    method (*lazybuf) append(c byte)
    method (*lazybuf) index(i int) byte
    method (*lazybuf) string() string
  var   lstat                func(name string) (os.FileInfo, error)
  func  matchChunk           func(chunk string, s string) (rest string, ok bool, err error)
  func  readDirNames         func(dirname string) ([]string, error)
  func  sameWord             func(a string, b string) bool
  func  scanChunk            func(pattern string) (star bool, chunk string, rest string)
  func  splitList            func(path string) []string
  func  unixAbs              func(path string) (string, error)
  func  volumeNameLen        func(path string) int
  func  walk                 func(path string, info os.FileInfo, walkFn WalkFunc) error
  func  walkLink             func(path string, linksWalked *int) (newpath string, islink bool, err error)
  func  walkLinks            func(path string, linksWalked *int) (string, error)
  func  walkSymlinks         func(path string) (string, error)

package strings:
  func  Compare                  func(a string, b string) int
  func  Contains                 func(s string, substr string) bool
  func  ContainsAny              func(s string, chars string) bool
  func  ContainsRune             func(s string, r rune) bool
  func  Count                    func(s string, sep string) int
  func  EqualFold                func(s string, t string) bool
  func  Fields                   func(s string) []string
  func  FieldsFunc               func(s string, f func(rune) bool) []string
  func  HasPrefix                func(s string, prefix string) bool
  func  HasSuffix                func(s string, suffix string) bool
  func  Index                    func(s string, sep string) int
  func  IndexAny                 func(s string, chars string) int
  func  IndexByte                func(s string, c byte) int
  func  IndexFunc                func(s string, f func(rune) bool) int
  func  IndexRune                func(s string, r rune) int
  func  Join                     func(a []string, sep string) string
  func  LastIndex                func(s string, sep string) int
  func  LastIndexAny             func(s string, chars string) int
  func  LastIndexByte            func(s string, c byte) int
  func  LastIndexFunc            func(s string, f func(rune) bool) int
  func  Map                      func(mapping func(rune) rune, s string) string
  func  NewReader                func(s string) *Reader
  func  NewReplacer              func(oldnew ...string) *Replacer
  type  Reader                   struct{s string; i int64; prevRune int}
    method (*Reader) Len() int
    method (*Reader) Read(b []byte) (n int, err error)
    method (*Reader) ReadAt(b []byte, off int64) (n int, err error)
    method (*Reader) ReadByte() (byte, error)
    method (*Reader) ReadRune() (ch rune, size int, err error)
    method (*Reader) Reset(s string)
    method (*Reader) Seek(offset int64, whence int) (int64, error)
    method (*Reader) Size() int64
    method (*Reader) UnreadByte() error
    method (*Reader) UnreadRune() error
    method (*Reader) WriteTo(w io.Writer) (n int64, err error)
  func  Repeat                   func(s string, count int) string
  func  Replace                  func(s string, old string, new string, n int) string
  type  Replacer                 struct{r replacer}
    method (*Replacer) Replace(s string) string
    method (*Replacer) WriteString(w io.Writer, s string) (n int, err error)
  func  Split                    func(s string, sep string) []string
  func  SplitAfter               func(s string, sep string) []string
  func  SplitAfterN              func(s string, sep string, n int) []string
  func  SplitN                   func(s string, sep string, n int) []string
  func  Title                    func(s string) string
  func  ToLower                  func(s string) string
  func  ToLowerSpecial           func(_case unicode.SpecialCase, s string) string
  func  ToTitle                  func(s string) string
  func  ToTitleSpecial           func(_case unicode.SpecialCase, s string) string
  func  ToUpper                  func(s string) string
  func  ToUpperSpecial           func(_case unicode.SpecialCase, s string) string
  func  Trim                     func(s string, cutset string) string
  func  TrimFunc                 func(s string, f func(rune) bool) string
  func  TrimLeft                 func(s string, cutset string) string
  func  TrimLeftFunc             func(s string, f func(rune) bool) string
  func  TrimPrefix               func(s string, prefix string) string
  func  TrimRight                func(s string, cutset string) string
  func  TrimRightFunc            func(s string, f func(rune) bool) string
  func  TrimSpace                func(s string) string
  func  TrimSuffix               func(s string, suffix string) string
  type  appendSliceWriter        []byte
    method (*appendSliceWriter) Write(p []byte) (int, error)
    method (*appendSliceWriter) WriteString(s string) (int, error)
  type  byteReplacer             [256]byte
    method (*byteReplacer) Replace(s string) string
    method (*byteReplacer) WriteString(w io.Writer, s string) (n int, err error)
  type  byteStringReplacer       [256][]byte
    method (*byteStringReplacer) Replace(s string) string
    method (*byteStringReplacer) WriteString(w io.Writer, s string) (n int, err error)
  func  explode                  func(s string, n int) []string
  func  genSplit                 func(s string, sep string, sepSave int, n int) []string
  type  genericReplacer          struct{root trieNode; tableSize int; mapping [256]byte}
    method (*genericReplacer) Replace(s string) string
    method (*genericReplacer) WriteString(w io.Writer, s string) (n int, err error)
    method (*genericReplacer) lookup(s string, ignoreRoot bool) (val string, keylen int, found bool)
  func  getStringWriter          func(w io.Writer) stringWriterIface
  func  hashStr                  func(sep string) (uint32, uint32)
  func  hashStrRev               func(sep string) (uint32, uint32)
  func  indexFunc                func(s string, f func(rune) bool, truth bool) int
  func  indexShortStr            func(s string, c string) int
  func  init                     func()
  var   init$guard               bool
  func  isSeparator              func(r rune) bool
  func  lastIndexFunc            func(s string, f func(rune) bool, truth bool) int
  func  longestCommonSuffix      func(a string, b string) (i int)
  func  makeCutsetFunc           func(cutset string) func(rune) bool
  func  makeGenericReplacer      func(oldnew []string) *genericReplacer
  func  makeSingleStringReplacer func(pattern string, value string) *singleStringReplacer
  func  makeStringFinder         func(pattern string) *stringFinder
  func  max                      func(a int, b int) int
  const primeRK                  primeRK = 16777619:untyped int
  type  replacer                 interface{Replace(s string) string; WriteString(w io.Writer, s string) (n int, err error)}
    method (replacer) Replace(s string) string
    method (replacer) WriteString(w io.Writer, s string) (n int, err error)
  const shortStringLen           shortStringLen = 31:untyped int
  type  singleStringReplacer     struct{finder *stringFinder; value string}
    method (*singleStringReplacer) Replace(s string) string
    method (*singleStringReplacer) WriteString(w io.Writer, s string) (n int, err error)
  type  stringFinder             struct{pattern string; badCharSkip [256]int; goodSuffixSkip []int}
    method (*stringFinder) next(text string) int
  type  stringWriter             struct{w io.Writer}
    method (stringWriter) WriteString(s string) (int, error)
  type  stringWriterIface        interface{WriteString(string) (int, error)}
    method (stringWriterIface) WriteString(string) (int, error)
  type  trieNode                 struct{value string; priority int; prefix string; next *trieNode; table []*trieNode}
    method (*trieNode) add(key string, val string, priority int, r *genericReplacer)

package math/rand:
  func  ExpFloat64   func() float64
  func  Float32      func() float32
  func  Float64      func() float64
  func  Int          func() int
  func  Int31        func() int32
  func  Int31n       func(n int32) int32
  func  Int63        func() int64
  func  Int63n       func(n int64) int64
  func  Intn         func(n int) int
  func  New          func(src Source) *Rand
  func  NewSource    func(seed int64) Source
  func  NewZipf      func(r *Rand, s float64, v float64, imax uint64) *Zipf
  func  NormFloat64  func() float64
  func  Perm         func(n int) []int
  type  Rand         struct{src Source; readVal int64; readPos int8}
    method (*Rand) ExpFloat64() float64
    method (*Rand) Float32() float32
    method (*Rand) Float64() float64
    method (*Rand) Int() int
    method (*Rand) Int31() int32
    method (*Rand) Int31n(n int32) int32
    method (*Rand) Int63() int64
    method (*Rand) Int63n(n int64) int64
    method (*Rand) Intn(n int) int
    method (*Rand) NormFloat64() float64
    method (*Rand) Perm(n int) []int
    method (*Rand) Read(p []byte) (n int, err error)
    method (*Rand) Seed(seed int64)
    method (*Rand) Uint32() uint32
  func  Read         func(p []byte) (n int, err error)
  func  Seed         func(seed int64)
  type  Source       interface{Int63() int64; Seed(seed int64)}
    method (Source) Int63() int64
    method (Source) Seed(seed int64)
  func  Uint32       func() uint32
  type  Zipf         struct{r *Rand; imax float64; v float64; q float64; s float64; oneminusQ float64; oneminusQinv float64; hxm float64; hx0minusHxm float64}
    method (*Zipf) Uint64() uint64
    method (*Zipf) h(x float64) float64
    method (*Zipf) hinv(x float64) float64
  const _A           _A = 48271:untyped int
  const _LEN         _LEN = 607:untyped int
  const _M           _M = 2147483647:untyped int
  const _MASK        _MASK = 9223372036854775807:untyped int
  const _MAX         _MAX = 9223372036854775808:untyped int
  const _Q           _Q = 44488:untyped int
  const _R           _R = 3399:untyped int
  const _TAP         _TAP = 273:untyped int
  func  absInt32     func(i int32) uint32
  var   fe           [256]float32
  var   fn           [128]float32
  var   globalRand   *Rand
  func  init         func()
  var   init$guard   bool
  var   ke           [256]uint32
  var   kn           [128]uint32
  type  lockedSource struct{lk sync.Mutex; src Source}
    method (*lockedSource) Int63() (n int64)
    method (*lockedSource) Seed(seed int64)
    method (*lockedSource) read(p []byte, readVal *int64, readPos *int8) (n int, err error)
    method (*lockedSource) seedPos(seed int64, readPos *int8)
  const re           re = 7.69712:untyped float
  func  read         func(p []byte, int63 func() int64, readVal *int64, readPos *int8) (n int, err error)
  const rn           rn = 3.44262:untyped float
  type  rngSource    struct{tap int; feed int; vec [607]int64}
    method (*rngSource) Int63() int64
    method (*rngSource) Seed(seed int64)
  var   rng_cooked   [607]int64
  func  seedrand     func(x int32) int32
  var   we           [256]float32
  var   wn           [128]float32

package fmt:
  func  Errorf            func(format string, a ...interface{}) error
  type  Formatter         interface{Format(f State, c rune)}
    method (Formatter) Format(f State, c rune)
  func  Fprint            func(w io.Writer, a ...interface{}) (n int, err error)
  func  Fprintf           func(w io.Writer, format string, a ...interface{}) (n int, err error)
  func  Fprintln          func(w io.Writer, a ...interface{}) (n int, err error)
  func  Fscan             func(r io.Reader, a ...interface{}) (n int, err error)
  func  Fscanf            func(r io.Reader, format string, a ...interface{}) (n int, err error)
  func  Fscanln           func(r io.Reader, a ...interface{}) (n int, err error)
  type  GoStringer        interface{GoString() string}
    method (GoStringer) GoString() string
  func  Print             func(a ...interface{}) (n int, err error)
  func  Printf            func(format string, a ...interface{}) (n int, err error)
  func  Println           func(a ...interface{}) (n int, err error)
  func  Scan              func(a ...interface{}) (n int, err error)
  type  ScanState         interface{Read(buf []byte) (n int, err error); ReadRune() (r rune, size int, err error); SkipSpace(); Token(skipSpace bool, f func(rune) bool) (token []byte, err error); UnreadRune() error; Width() (wid int, ok bool)}
    method (ScanState) Read(buf []byte) (n int, err error)
    method (ScanState) ReadRune() (r rune, size int, err error)
    method (ScanState) SkipSpace()
    method (ScanState) Token(skipSpace bool, f func(rune) bool) (token []byte, err error)
    method (ScanState) UnreadRune() error
    method (ScanState) Width() (wid int, ok bool)
  func  Scanf             func(format string, a ...interface{}) (n int, err error)
  func  Scanln            func(a ...interface{}) (n int, err error)
  type  Scanner           interface{Scan(state ScanState, verb rune) error}
    method (Scanner) Scan(state ScanState, verb rune) error
  func  Sprint            func(a ...interface{}) string
  func  Sprintf           func(format string, a ...interface{}) string
  func  Sprintln          func(a ...interface{}) string
  func  Sscan             func(str string, a ...interface{}) (n int, err error)
  func  Sscanf            func(str string, format string, a ...interface{}) (n int, err error)
  func  Sscanln           func(str string, a ...interface{}) (n int, err error)
  type  State             interface{Flag(c int) bool; Precision() (prec int, ok bool); Width() (wid int, ok bool); Write(b []byte) (n int, err error)}
    method (State) Flag(c int) bool
    method (State) Precision() (prec int, ok bool)
    method (State) Width() (wid int, ok bool)
    method (State) Write(b []byte) (n int, err error)
  type  Stringer          interface{String() string}
    method (Stringer) String() string
  const badIndexString    badIndexString = "(BADINDEX)":untyped string
  const badPrecString     badPrecString = "%!(BADPREC)":untyped string
  const badWidthString    badWidthString = "%!(BADWIDTH)":untyped string
  const binaryDigits      binaryDigits = "01":untyped string
  var   boolError         error
  type  buffer            []byte
    method (*buffer) Write(p []byte)
    method (*buffer) WriteByte(c byte)
    method (*buffer) WriteRune(r rune)
    method (*buffer) WriteString(s string)
  var   byteType          reflect.Type
  const commaSpaceString  commaSpaceString = ", ":untyped string
  var   complexError      error
  const decimalDigits     decimalDigits = "0123456789":untyped string
  const eof               eof = -1:untyped int
  func  errorHandler      func(errp *error)
  const exponent          exponent = "eEp":untyped string
  const extraString       extraString = "%!(EXTRA ":untyped string
  const floatVerbs        floatVerbs = "beEfFgGv":untyped string
  type  fmt               struct{buf *buffer; fmtFlags; wid int; prec int; intbuf [68]byte}
    method (*fmt) clearflags()
    method (*fmt) fmt_boolean(v bool)
    method (*fmt) fmt_bx(b []byte, digits string)
    method (*fmt) fmt_c(c uint64)
    method (*fmt) fmt_float(v float64, size int, verb rune, prec int)
    method (*fmt) fmt_integer(u uint64, base int, isSigned bool, digits string)
    method (*fmt) fmt_q(s string)
    method (*fmt) fmt_qc(c uint64)
    method (*fmt) fmt_s(s string)
    method (*fmt) fmt_sbx(s string, b []byte, digits string)
    method (*fmt) fmt_sx(s string, digits string)
    method (*fmt) fmt_unicode(u uint64)
    method (*fmt) init(buf *buffer)
    method (*fmt) pad(b []byte)
    method (*fmt) padString(s string)
    method (*fmt) truncate(s string) string
    method (*fmt) writePadding(n int)
  type  fmtFlags          struct{widPresent bool; precPresent bool; minus bool; plus bool; sharp bool; space bool; zero bool; plusV bool; sharpV bool}
  func  getField          func(v reflect.Value, i int) reflect.Value
  func  hexDigit          func(d rune) (int, bool)
  const hexadecimalDigits hexadecimalDigits = "0123456789aAbBcCd...":untyped string
  const hugeWid           hugeWid = 1073741824:untyped int
  func  indexRune         func(s string, r rune) int
  func  init              func()
  var   init$guard        bool
  const intBits           intBits = 64:untyped int
  func  intFromArg        func(a []interface{}, argNum int) (num int, isInt bool, newArgNum int)
  const invReflectString  invReflectString = "<invalid reflect....":untyped string
  func  isSpace           func(r rune) bool
  const ldigits           ldigits = "0123456789abcdefx":untyped string
  const mapString         mapString = "map[":untyped string
  const missingString     missingString = "(MISSING)":untyped string
  func  newPrinter        func() *pp
  func  newScanState      func(r io.Reader, nlIsSpace bool, nlIsEnd bool) (s *ss, old ssave)
  const nilAngleString    nilAngleString = "<nil>":untyped string
  const nilParenString    nilParenString = "(nil)":untyped string
  const nilString         nilString = "nil":untyped string
  const noVerbString      noVerbString = "%!(NOVERB)":untyped string
  func  notSpace          func(r rune) bool
  const octalDigits       octalDigits = "01234567":untyped string
  const panicString       panicString = "(PANIC=":untyped string
  func  parseArgNumber    func(format string) (index int, wid int, ok bool)
  func  parsenum          func(s string, start int, end int) (num int, isnum bool, newi int)
  const percentBangString percentBangString = "%!":untyped string
  const period            period = ".":untyped string
  type  pp                struct{buf buffer; arg interface{}; value reflect.Value; fmt fmt; reordered bool; goodArgNum bool; panicking bool; erroring bool}
    method (*pp) Flag(b int) bool
    method (*pp) Precision() (prec int, ok bool)
    method (*pp) Width() (wid int, ok bool)
    method (*pp) Write(b []byte) (ret int, err error)
    method (*pp) argNumber(argNum int, format string, i int, numArgs int) (newArgNum int, newi int, found bool)
    method (*pp) badArgNum(verb rune)
    method (*pp) badVerb(verb rune)
    method (*pp) catchPanic(arg interface{}, verb rune)
    method (*pp) doPrint(a []interface{})
    method (*pp) doPrintf(format string, a []interface{})
    method (*pp) doPrintln(a []interface{})
    method (*pp) fmt0x64(v uint64, leading0x bool)
    method (*pp) fmtBool(v bool, verb rune)
    method (*pp) fmtBytes(v []byte, verb rune, typeString string)
    method (*pp) fmtComplex(v complex128, size int, verb rune)
    method (*pp) fmtFloat(v float64, size int, verb rune)
    method (*pp) fmtInteger(v uint64, isSigned bool, verb rune)
    method (*pp) fmtPointer(value reflect.Value, verb rune)
    method (*pp) fmtString(v string, verb rune)
    method (*pp) free()
    method (*pp) handleMethods(verb rune) (handled bool)
    method (*pp) missingArg(verb rune)
    method (*pp) printArg(arg interface{}, verb rune)
    method (*pp) printValue(value reflect.Value, verb rune, depth int)
    method (*pp) unknownType(v reflect.Value)
  var   ppFree            sync.Pool
  type  readRune          struct{reader io.Reader; buf [4]byte; pending int; pendBuf [4]byte; peekRune rune}
    method (*readRune) ReadRune() (rr rune, size int, err error)
    method (*readRune) UnreadRune() error
    method (*readRune) readByte() (b byte, err error)
  type  scanError         struct{err error}
  const sign              sign = "+-":untyped string
  const signed            signed = true:untyped bool
  var   space             [][2]uint16
  type  ss                struct{rs io.RuneScanner; buf buffer; count int; atEOF bool; ssave}
    method (*ss) Read(buf []byte) (n int, err error)
    method (*ss) ReadRune() (r rune, size int, err error)
    method (*ss) SkipSpace()
    method (*ss) Token(skipSpace bool, f func(rune) bool) (tok []byte, err error)
    method (*ss) UnreadRune() error
    method (*ss) Width() (wid int, ok bool)
    method (*ss) accept(ok string) bool
    method (*ss) advance(format string) (i int)
    method (*ss) complexTokens() (real string, imag string)
    method (*ss) consume(ok string, accept bool) bool
    method (*ss) convertFloat(str string, n int) float64
    method (*ss) convertString(verb rune) (str string)
    method (*ss) doScan(a []interface{}) (numProcessed int, err error)
    method (*ss) doScanf(format string, a []interface{}) (numProcessed int, err error)
    method (*ss) error(err error)
    method (*ss) errorString(err string)
    method (*ss) floatToken() string
    method (*ss) free(old ssave)
    method (*ss) getBase(verb rune) (base int, digits string)
    method (*ss) getRune() (r rune)
    method (*ss) hexByte() (b byte, ok bool)
    method (*ss) hexString() string
    method (*ss) mustReadRune() (r rune)
    method (*ss) notEOF()
    method (*ss) okVerb(verb rune, okVerbs string, typ string) bool
    method (*ss) peek(ok string) bool
    method (*ss) quotedString() string
    method (*ss) scanBasePrefix() (base int, digits string, found bool)
    method (*ss) scanBool(verb rune) bool
    method (*ss) scanComplex(verb rune, n int) complex128
    method (*ss) scanInt(verb rune, bitSize int) int64
    method (*ss) scanNumber(digits string, haveDigits bool) string
    method (*ss) scanOne(verb rune, arg interface{})
    method (*ss) scanRune(bitSize int) int64
    method (*ss) scanUint(verb rune, bitSize int) uint64
    method (*ss) skipSpace(stopAtNewline bool)
    method (*ss) token(skipSpace bool, f func(rune) bool) []byte
  var   ssFree            sync.Pool
  type  ssave             struct{validSave bool; nlIsEnd bool; nlIsSpace bool; argLimit int; limit int; maxWid int}
  type  stringReader      string
    method (*stringReader) Read(b []byte) (n int, err error)
  func  tooLarge          func(x int) bool
  const udigits           udigits = "0123456789ABCDEFX":untyped string
  const uintptrBits       uintptrBits = 64:untyped int
  const unsigned          unsigned = false:untyped bool

package os/signal:
  func  Ignore         func(sig ...os.Signal)
  func  Notify         func(c chan<- os.Signal, sig ...os.Signal)
  func  Reset          func(sig ...os.Signal)
  func  Stop           func(c chan<- os.Signal)
  func  cancel         func(sigs []os.Signal, action func(int))
  func  disableSignal  func(sig int)
  func  enableSignal   func(sig int)
  type  handler        struct{mask [3]uint32}
    method (*handler) clear(sig int)
    method (*handler) set(sig int)
    method (*handler) want(sig int) bool
  var   handlers       struct{sync.Mutex; m map[chan<- os.Signal]*handler; ref [65]int64}
  func  ignoreSignal   func(sig int)
  func  init           func()
  func  init#1         func()
  var   init$guard     bool
  func  loop           func()
  const numSig         numSig = 65:untyped int
  func  process        func(sig os.Signal)
  func  signal_disable func(uint32)
  func  signal_enable  func(uint32)
  func  signal_ignore  func(uint32)
  func  signal_recv    func() uint32
  func  signum         func(sig os.Signal) int

package bytes:
  type  Buffer            struct{buf []byte; off int; runeBytes [4]byte; bootstrap [64]byte; lastRead readOp}
    method (*Buffer) Bytes() []byte
    method (*Buffer) Cap() int
    method (*Buffer) Grow(n int)
    method (*Buffer) Len() int
    method (*Buffer) Next(n int) []byte
    method (*Buffer) Read(p []byte) (n int, err error)
    method (*Buffer) ReadByte() (byte, error)
    method (*Buffer) ReadBytes(delim byte) (line []byte, err error)
    method (*Buffer) ReadFrom(r io.Reader) (n int64, err error)
    method (*Buffer) ReadRune() (r rune, size int, err error)
    method (*Buffer) ReadString(delim byte) (line string, err error)
    method (*Buffer) Reset()
    method (*Buffer) String() string
    method (*Buffer) Truncate(n int)
    method (*Buffer) UnreadByte() error
    method (*Buffer) UnreadRune() error
    method (*Buffer) Write(p []byte) (n int, err error)
    method (*Buffer) WriteByte(c byte) error
    method (*Buffer) WriteRune(r rune) (n int, err error)
    method (*Buffer) WriteString(s string) (n int, err error)
    method (*Buffer) WriteTo(w io.Writer) (n int64, err error)
    method (*Buffer) grow(n int) int
    method (*Buffer) readSlice(delim byte) (line []byte, err error)
  func  Compare           func(a []byte, b []byte) int
  func  Contains          func(b []byte, subslice []byte) bool
  func  ContainsAny       func(b []byte, chars string) bool
  func  ContainsRune      func(b []byte, r rune) bool
  func  Count             func(s []byte, sep []byte) int
  func  Equal             func(a []byte, b []byte) bool
  func  EqualFold         func(s []byte, t []byte) bool
  var   ErrTooLarge       error
  func  Fields            func(s []byte) [][]byte
  func  FieldsFunc        func(s []byte, f func(rune) bool) [][]byte
  func  HasPrefix         func(s []byte, prefix []byte) bool
  func  HasSuffix         func(s []byte, suffix []byte) bool
  func  Index             func(s []byte, sep []byte) int
  func  IndexAny          func(s []byte, chars string) int
  func  IndexByte         func(s []byte, c byte) int
  func  IndexFunc         func(s []byte, f func(r rune) bool) int
  func  IndexRune         func(s []byte, r rune) int
  func  Join              func(s [][]byte, sep []byte) []byte
  func  LastIndex         func(s []byte, sep []byte) int
  func  LastIndexAny      func(s []byte, chars string) int
  func  LastIndexByte     func(s []byte, c byte) int
  func  LastIndexFunc     func(s []byte, f func(r rune) bool) int
  func  Map               func(mapping func(r rune) rune, s []byte) []byte
  const MinRead           MinRead = 512:untyped int
  func  NewBuffer         func(buf []byte) *Buffer
  func  NewBufferString   func(s string) *Buffer
  func  NewReader         func(b []byte) *Reader
  type  Reader            struct{s []byte; i int64; prevRune int}
    method (*Reader) Len() int
    method (*Reader) Read(b []byte) (n int, err error)
    method (*Reader) ReadAt(b []byte, off int64) (n int, err error)
    method (*Reader) ReadByte() (byte, error)
    method (*Reader) ReadRune() (ch rune, size int, err error)
    method (*Reader) Reset(b []byte)
    method (*Reader) Seek(offset int64, whence int) (int64, error)
    method (*Reader) Size() int64
    method (*Reader) UnreadByte() error
    method (*Reader) UnreadRune() error
    method (*Reader) WriteTo(w io.Writer) (n int64, err error)
  func  Repeat            func(b []byte, count int) []byte
  func  Replace           func(s []byte, old []byte, new []byte, n int) []byte
  func  Runes             func(s []byte) []rune
  func  Split             func(s []byte, sep []byte) [][]byte
  func  SplitAfter        func(s []byte, sep []byte) [][]byte
  func  SplitAfterN       func(s []byte, sep []byte, n int) [][]byte
  func  SplitN            func(s []byte, sep []byte, n int) [][]byte
  func  Title             func(s []byte) []byte
  func  ToLower           func(s []byte) []byte
  func  ToLowerSpecial    func(_case unicode.SpecialCase, s []byte) []byte
  func  ToTitle           func(s []byte) []byte
  func  ToTitleSpecial    func(_case unicode.SpecialCase, s []byte) []byte
  func  ToUpper           func(s []byte) []byte
  func  ToUpperSpecial    func(_case unicode.SpecialCase, s []byte) []byte
  func  Trim              func(s []byte, cutset string) []byte
  func  TrimFunc          func(s []byte, f func(r rune) bool) []byte
  func  TrimLeft          func(s []byte, cutset string) []byte
  func  TrimLeftFunc      func(s []byte, f func(r rune) bool) []byte
  func  TrimPrefix        func(s []byte, prefix []byte) []byte
  func  TrimRight         func(s []byte, cutset string) []byte
  func  TrimRightFunc     func(s []byte, f func(r rune) bool) []byte
  func  TrimSpace         func(s []byte) []byte
  func  TrimSuffix        func(s []byte, suffix []byte) []byte
  func  equalPortable     func(a []byte, b []byte) bool
  func  explode           func(s []byte, n int) [][]byte
  func  genSplit          func(s []byte, sep []byte, sepSave int, n int) [][]byte
  func  indexBytePortable func(s []byte, c byte) int
  func  indexFunc         func(s []byte, f func(r rune) bool, truth bool) int
  func  init              func()
  var   init$guard        bool
  func  isSeparator       func(r rune) bool
  func  lastIndexFunc     func(s []byte, f func(r rune) bool, truth bool) int
  func  makeCutsetFunc    func(cutset string) func(r rune) bool
  func  makeSlice         func(n int) []byte
  const opInvalid         opInvalid = 0:readOp
  const opRead            opRead = 2:readOp
  const opReadRune        opReadRune = 1:readOp
  type  readOp            int

package unsafe:
  func  init       func()
  var   init$guard bool

package sync/atomic:
  func  AddInt32              func(addr *int32, delta int32) (new int32)
  func  AddInt64              func(addr *int64, delta int64) (new int64)
  func  AddUint32             func(addr *uint32, delta uint32) (new uint32)
  func  AddUint64             func(addr *uint64, delta uint64) (new uint64)
  func  AddUintptr            func(addr *uintptr, delta uintptr) (new uintptr)
  func  CompareAndSwapInt32   func(addr *int32, old int32, new int32) (swapped bool)
  func  CompareAndSwapInt64   func(addr *int64, old int64, new int64) (swapped bool)
  func  CompareAndSwapPointer func(addr *unsafe.Pointer, old unsafe.Pointer, new unsafe.Pointer) (swapped bool)
  func  CompareAndSwapUint32  func(addr *uint32, old uint32, new uint32) (swapped bool)
  func  CompareAndSwapUint64  func(addr *uint64, old uint64, new uint64) (swapped bool)
  func  CompareAndSwapUintptr func(addr *uintptr, old uintptr, new uintptr) (swapped bool)
  func  LoadInt32             func(addr *int32) (val int32)
  func  LoadInt64             func(addr *int64) (val int64)
  func  LoadPointer           func(addr *unsafe.Pointer) (val unsafe.Pointer)
  func  LoadUint32            func(addr *uint32) (val uint32)
  func  LoadUint64            func(addr *uint64) (val uint64)
  func  LoadUintptr           func(addr *uintptr) (val uintptr)
  func  StoreInt32            func(addr *int32, val int32)
  func  StoreInt64            func(addr *int64, val int64)
  func  StorePointer          func(addr *unsafe.Pointer, val unsafe.Pointer)
  func  StoreUint32           func(addr *uint32, val uint32)
  func  StoreUint64           func(addr *uint64, val uint64)
  func  StoreUintptr          func(addr *uintptr, val uintptr)
  func  SwapInt32             func(addr *int32, new int32) (old int32)
  func  SwapInt64             func(addr *int64, new int64) (old int64)
  func  SwapPointer           func(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)
  func  SwapUint32            func(addr *uint32, new uint32) (old uint32)
  func  SwapUint64            func(addr *uint64, new uint64) (old uint64)
  func  SwapUintptr           func(addr *uintptr, new uintptr) (old uintptr)
  type  Value                 struct{noCopy noCopy; v interface{}}
    method (*Value) Load() (x interface{})
    method (*Value) Store(x interface{})
  type  ifaceWords            struct{typ unsafe.Pointer; data unsafe.Pointer}
  func  init                  func()
  var   init$guard            bool
  type  noCopy                struct{}
    method (*noCopy) Lock()
  func  panic64               func()
  func  runtime_procPin       func()
  func  runtime_procUnpin     func()

package github.com/JoergReinhardt/worm:
  const BLACK             BLACK = 1:github.com/nsf/termbox-go.Attribute
  const DOWN              DOWN = 2:dir
  const GAME_OVER         GAME_OVER = 8:gameStat
  const GREEN             GREEN = 3:github.com/nsf/termbox-go.Attribute
  const INIT              INIT = 0:gameStat
  const LEFT              LEFT = 4:dir
  const PAUSE             PAUSE = 4:gameStat
  const RED               RED = 2:github.com/nsf/termbox-go.Attribute
  const RIGHT             RIGHT = 8:dir
  const RUN               RUN = 2:gameStat
  const UP                UP = 0:dir
  const WHITE             WHITE = 8:github.com/nsf/termbox-go.Attribute
  var   _GameStat_index_0 [2]uint8
  var   _GameStat_index_1 [2]uint8
  var   _GameStat_index_2 [2]uint8
  var   _GameStat_index_3 [2]uint8
  const _GameStat_name_0  _GameStat_name_0 = "INIT":untyped string
  const _GameStat_name_1  _GameStat_name_1 = "RUN":untyped string
  const _GameStat_name_2  _GameStat_name_2 = "PAUSE":untyped string
  const _GameStat_name_3  _GameStat_name_3 = "GAME_OVER":untyped string
  const animationSpeed    animationSpeed = 10000000:time.Duration
  type  cherry            struct{x int; y int}
    method (cherry) picked(x int, y int) bool
    method (*cherry) pop(x int, y int)
  func  counter           func()
  type  digit             struct{*ring; hasNext bool; next *digit}
    method (*digit) String() string
    method (*digit) addDigit()
    method (digit) advanceRow()
    method (digit) backupRow()
    method (digit) decDigit()
    method (*digit) decrease()
    method (digit) incDigit()
    method (*digit) increase()
    method (digit) nextDigitDelayed()
    method (digit) prevDigitDelayed()
    method (digit) stringDig() string
    method (digit) stringRow() string
    method (*digit) stringRows() []string
  type  digits            []string
  type  dir               uint8
  type  game              struct{*state; *cherry; *worm}
    method (game) RelPos(x int, y int) (d dir)
    method (game) collides(x int, y int) bool
    method (game) grow()
    method (game) move(x int, y int, d dir)
    method (game) picked(x int, y int) bool
    method (*game) play()
    method (game) pop(x int, y int)
    method (game) predNextPos(d dir) (x int, y int)
    method (game) render(fn func(x int, y int, c rune))
    method (*game) reset()
    method (*game) wrapBoard(xi int, yi int) (xo int, yo int)
  func  gameController    func(g *game)
  type  gameStat          uint8
    method (gameStat) String() string
  func  init              func()
  var   init$guard        bool
  func  initScreen        func()
  func  main              func()
  func  newDigit          func() *digit
  func  newDigits         func() digits
  func  newGame           func(sizeFn func() (x int, y int)) *game
  func  newRing           func() *ring
  func  newState          func(sizeFn func() (x int, y int), randFn func() (x int, y int)) *state
  func  newWorm           func(s *state) *worm
  var   points            *digit
  func  render            func(g *game)
  type  ring              struct{*sector}
    method (*ring) advanceRow()
    method (*ring) backupRow()
    method (*ring) decDigit()
    method (*ring) incDigit()
    method (*ring) nextDigitDelayed()
    method (*ring) prevDigitDelayed()
    method (*ring) stringDig() string
    method (*ring) stringRow() string
  func  run               func()
  type  sector            struct{pos int; str string; prev *sector; next *sector}
  var   segChars          map[struct{p dir; n dir}]rune
  type  segment           struct{x int; y int; char rune; tail bool; next *segment}
    method (segment) RelPos(x int, y int) (d dir)
    method (*segment) collides(x int, y int) bool
    method (*segment) grow()
    method (*segment) move(x int, y int, px int, py int)
    method (*segment) render(fn func(x int, y int, c rune))
  type  state             struct{speed time.Duration; eventState gameStat; direction dir; size func() (x int, y int); rand func() (x int, y int)}
  type  worm              struct{*segment}
    method (worm) RelPos(x int, y int) (d dir)
    method (worm) collides(x int, y int) bool
    method (worm) grow()
    method (*worm) move(x int, y int, d dir)
    method (worm) predNextPos(d dir) (x int, y int)
    method (worm) render(fn func(x int, y int, c rune))

package time:
  const ANSIC                    ANSIC = "Mon Jan _2 15:04:...":untyped string
  func  After                    func(d Duration) <-chan Time
  func  AfterFunc                func(d Duration, f func()) *Timer
  const April                    April = 4:Month
  const August                   August = 8:Month
  func  Date                     func(year int, month Month, day int, hour int, min int, sec int, nsec int, loc *Location) Time
  const December                 December = 12:Month
  type  Duration                 int64
    method (Duration) Hours() float64
    method (Duration) Minutes() float64
    method (Duration) Nanoseconds() int64
    method (Duration) Seconds() float64
    method (Duration) String() string
  const February                 February = 2:Month
  func  FixedZone                func(name string, offset int) *Location
  const Friday                   Friday = 5:Weekday
  const Hour                     Hour = 3600000000000:Duration
  const January                  January = 1:Month
  const July                     July = 7:Month
  const June                     June = 6:Month
  const Kitchen                  Kitchen = "3:04PM":untyped string
  func  LoadLocation             func(name string) (*Location, error)
  var   Local                    *Location
  type  Location                 struct{name string; zone []zone; tx []zoneTrans; cacheStart int64; cacheEnd int64; cacheZone *zone}
    method (*Location) String() string
    method (*Location) firstZoneUsed() bool
    method (*Location) get() *Location
    method (*Location) lookup(sec int64) (name string, offset int, isDST bool, start int64, end int64)
    method (*Location) lookupFirstZone() int
    method (*Location) lookupName(name string, unix int64) (offset int, isDST bool, ok bool)
  const March                    March = 3:Month
  const May                      May = 5:Month
  const Microsecond              Microsecond = 1000:Duration
  const Millisecond              Millisecond = 1000000:Duration
  const Minute                   Minute = 60000000000:Duration
  const Monday                   Monday = 1:Weekday
  type  Month                    int
    method (Month) String() string
  const Nanosecond               Nanosecond = 1:Duration
  func  NewTicker                func(d Duration) *Ticker
  func  NewTimer                 func(d Duration) *Timer
  const November                 November = 11:Month
  func  Now                      func() Time
  const October                  October = 10:Month
  func  Parse                    func(layout string, value string) (Time, error)
  func  ParseDuration            func(s string) (Duration, error)
  type  ParseError               struct{Layout string; Value string; LayoutElem string; ValueElem string; Message string}
    method (*ParseError) Error() string
  func  ParseInLocation          func(layout string, value string, loc *Location) (Time, error)
  const RFC1123                  RFC1123 = "Mon, 02 Jan 2006 ...":untyped string
  const RFC1123Z                 RFC1123Z = "Mon, 02 Jan 2006 ...":untyped string
  const RFC3339                  RFC3339 = "2006-01-02T15:04:...":untyped string
  const RFC3339Nano              RFC3339Nano = "2006-01-02T15:04:...":untyped string
  const RFC822                   RFC822 = "02 Jan 06 15:04 MST":untyped string
  const RFC822Z                  RFC822Z = "02 Jan 06 15:04 -...":untyped string
  const RFC850                   RFC850 = "Monday, 02-Jan-06...":untyped string
  const RubyDate                 RubyDate = "Mon Jan 02 15:04:...":untyped string
  const Saturday                 Saturday = 6:Weekday
  const Second                   Second = 1000000000:Duration
  const September                September = 9:Month
  func  Since                    func(t Time) Duration
  func  Sleep                    func(d Duration)
  const Stamp                    Stamp = "Jan _2 15:04:05":untyped string
  const StampMicro               StampMicro = "Jan _2 15:04:05.0...":untyped string
  const StampMilli               StampMilli = "Jan _2 15:04:05.000":untyped string
  const StampNano                StampNano = "Jan _2 15:04:05.0...":untyped string
  const Sunday                   Sunday = 0:Weekday
  const Thursday                 Thursday = 4:Weekday
  func  Tick                     func(d Duration) <-chan Time
  type  Ticker                   struct{C <-chan Time; r runtimeTimer}
    method (*Ticker) Stop()
  type  Time                     struct{sec int64; nsec int32; loc *Location}
    method (Time) Add(d Duration) Time
    method (Time) AddDate(years int, months int, days int) Time
    method (Time) After(u Time) bool
    method (Time) AppendFormat(b []byte, layout string) []byte
    method (Time) Before(u Time) bool
    method (Time) Clock() (hour int, min int, sec int)
    method (Time) Date() (year int, month Month, day int)
    method (Time) Day() int
    method (Time) Equal(u Time) bool
    method (Time) Format(layout string) string
    method (*Time) GobDecode(data []byte) error
    method (Time) GobEncode() ([]byte, error)
    method (Time) Hour() int
    method (Time) ISOWeek() (year int, week int)
    method (Time) In(loc *Location) Time
    method (Time) IsZero() bool
    method (Time) Local() Time
    method (Time) Location() *Location
    method (Time) MarshalBinary() ([]byte, error)
    method (Time) MarshalJSON() ([]byte, error)
    method (Time) MarshalText() ([]byte, error)
    method (Time) Minute() int
    method (Time) Month() Month
    method (Time) Nanosecond() int
    method (Time) Round(d Duration) Time
    method (Time) Second() int
    method (Time) String() string
    method (Time) Sub(u Time) Duration
    method (Time) Truncate(d Duration) Time
    method (Time) UTC() Time
    method (Time) Unix() int64
    method (Time) UnixNano() int64
    method (*Time) UnmarshalBinary(data []byte) error
    method (*Time) UnmarshalJSON(data []byte) error
    method (*Time) UnmarshalText(data []byte) error
    method (Time) Weekday() Weekday
    method (Time) Year() int
    method (Time) YearDay() int
    method (Time) Zone() (name string, offset int)
    method (Time) abs() uint64
    method (Time) date(full bool) (year int, month Month, day int, yday int)
    method (Time) locabs() (name string, offset int, abs uint64)
  type  Timer                    struct{C <-chan Time; r runtimeTimer}
    method (*Timer) Reset(d Duration) bool
    method (*Timer) Stop() bool
  const Tuesday                  Tuesday = 2:Weekday
  var   UTC                      *Location
  func  Unix                     func(sec int64, nsec int64) Time
  const UnixDate                 UnixDate = "Mon Jan _2 15:04:...":untyped string
  const Wednesday                Wednesday = 3:Weekday
  type  Weekday                  int
    method (Weekday) String() string
  func  absClock                 func(abs uint64) (hour int, min int, sec int)
  func  absDate                  func(abs uint64, full bool) (year int, month Month, day int, yday int)
  func  absWeekday               func(abs uint64) Weekday
  const absoluteToInternal       absoluteToInternal = -9223371966579724800:int64
  const absoluteZeroYear         absoluteZeroYear = -292277022399:untyped int
  const alpha                    alpha = -9223372036854775808:untyped int
  func  appendInt                func(b []byte, x int, width int) []byte
  func  atoi                     func(s string) (x int, err error)
  var   atoiError                error
  var   badData                  error
  func  byteString               func(p []byte) string
  func  closefd                  func(fd uintptr)
  func  cutspace                 func(s string) string
  type  data                     struct{p []byte; error bool}
    method (*data) big4() (n uint32, ok bool)
    method (*data) byte() (n byte, ok bool)
    method (*data) read(n int) []byte
  var   days                     [7]string
  var   daysBefore               [13]int32
  func  daysIn                   func(m Month, year int) int
  const daysPer100Years          daysPer100Years = 36524:untyped int
  const daysPer400Years          daysPer400Years = 146097:untyped int
  const daysPer4Years            daysPer4Years = 1461:untyped int
  func  div                      func(t Time, d Duration) (qmod2 int, r Duration)
  var   errBad                   error
  var   errLeadingInt            error
  func  fmtFrac                  func(buf []byte, v uint64, prec int) (nw int, nv uint64)
  func  fmtInt                   func(buf []byte, v uint64) int
  func  forceZipFileForTesting   func(zipOnly bool)
  func  formatNano               func(b []byte, nanosec uint, n int, trim bool) []byte
  func  get2                     func(b []byte) int
  func  get4                     func(b []byte) int
  func  getnum                   func(s string, fixed bool) (int, string, error)
  func  goFunc                   func(arg interface{}, seq uintptr)
  func  init                     func()
  var   init$guard               bool
  func  initLocal                func()
  func  initTestingZone          func()
  const internalToAbsolute       internalToAbsolute = 9223371966579724800:int64
  const internalToUnix           internalToUnix = -62135596800:int64
  const internalYear             internalYear = 1:untyped int
  func  interrupt                func()
  func  isDigit                  func(s string, i int) bool
  func  isLeap                   func(year int) bool
  func  isNotExist               func(err error) bool
  func  leadingInt               func(s string) (x int64, rem string, err error)
  func  loadLocation             func(name string) (*Location, error)
  func  loadZoneData             func(bytes []byte) (l *Location, err error)
  func  loadZoneFile             func(dir string, name string) (l *Location, err error)
  func  loadZoneZip              func(zipfile string, name string) (l *Location, err error)
  var   localLoc                 Location
  var   localOnce                sync.Once
  var   longDayNames             []string
  var   longMonthNames           []string
  func  lookup                   func(tab []string, val string) (int, string, error)
  func  match                    func(s1 string, s2 string) bool
  const maxDuration              maxDuration = 9223372036854775807:Duration
  const minDuration              minDuration = -9223372036854775808:Duration
  var   months                   [12]string
  func  nextStdChunk             func(layout string) (prefix string, std int, suffix string)
  func  norm                     func(hi int, lo int, base int) (nhi int, nlo int)
  func  now                      func() (sec int64, nsec int32)
  const omega                    omega = 9223372036854775807:untyped int
  func  open                     func(name string) (uintptr, error)
  var   origZoneDirs             []string
  func  parse                    func(layout string, value string, defaultLocation *Location, local *Location) (Time, error)
  func  parseGMT                 func(value string) int
  func  parseNanoseconds         func(value string, nbytes int) (ns int, rangeErrString string, err error)
  func  parseTimeZone            func(value string) (length int, ok bool)
  func  preadn                   func(fd uintptr, buf []byte, off int) error
  func  quote                    func(s string) string
  func  readFile                 func(name string) ([]byte, error)
  func  runtimeNano              func() int64
  type  runtimeTimer             struct{i int; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr}
  const secondsPerDay            secondsPerDay = 86400:untyped int
  const secondsPerHour           secondsPerHour = 3600:untyped int
  const secondsPerMinute         secondsPerMinute = 60:untyped int
  const secondsPerWeek           secondsPerWeek = 604800:untyped int
  const seekCurrent              seekCurrent = 1:untyped int
  const seekEnd                  seekEnd = 2:untyped int
  const seekStart                seekStart = 0:untyped int
  func  sendTime                 func(c interface{}, seq uintptr)
  var   shortDayNames            []string
  var   shortMonthNames          []string
  func  skip                     func(value string, prefix string) (string, error)
  func  startTimer               func(*runtimeTimer)
  func  startsWithLowerCase      func(str string) bool
  var   std0x                    [6]int
  const stdArgShift              stdArgShift = 16:untyped int
  const stdDay                   stdDay = 263:untyped int
  const stdFracSecond0           stdFracSecond0 = 32:untyped int
  const stdFracSecond9           stdFracSecond9 = 33:untyped int
  const stdHour                  stdHour = 522:untyped int
  const stdHour12                stdHour12 = 523:untyped int
  const stdISO8601ColonSecondsTZ stdISO8601ColonSecondsTZ = 26:untyped int
  const stdISO8601ColonTZ        stdISO8601ColonTZ = 25:untyped int
  const stdISO8601SecondsTZ      stdISO8601SecondsTZ = 23:untyped int
  const stdISO8601ShortTZ        stdISO8601ShortTZ = 24:untyped int
  const stdISO8601TZ             stdISO8601TZ = 22:untyped int
  const stdLongMonth             stdLongMonth = 257:untyped int
  const stdLongWeekDay           stdLongWeekDay = 261:untyped int
  const stdLongYear              stdLongYear = 273:untyped int
  const stdMask                  stdMask = 65535:untyped int
  const stdMinute                stdMinute = 525:untyped int
  const stdMonth                 stdMonth = 258:untyped int
  const stdNeedClock             stdNeedClock = 512:untyped int
  const stdNeedDate              stdNeedDate = 256:untyped int
  const stdNumColonSecondsTZ     stdNumColonSecondsTZ = 31:untyped int
  const stdNumColonTZ            stdNumColonTZ = 30:untyped int
  const stdNumMonth              stdNumMonth = 259:untyped int
  const stdNumSecondsTz          stdNumSecondsTz = 28:untyped int
  const stdNumShortTZ            stdNumShortTZ = 29:untyped int
  const stdNumTZ                 stdNumTZ = 27:untyped int
  const stdPM                    stdPM = 531:untyped int
  const stdSecond                stdSecond = 527:untyped int
  const stdTZ                    stdTZ = 21:untyped int
  const stdUnderDay              stdUnderDay = 264:untyped int
  const stdWeekDay               stdWeekDay = 262:untyped int
  const stdYear                  stdYear = 274:untyped int
  const stdZeroDay               stdZeroDay = 265:untyped int
  const stdZeroHour12            stdZeroHour12 = 524:untyped int
  const stdZeroMinute            stdZeroMinute = 526:untyped int
  const stdZeroMonth             stdZeroMonth = 260:untyped int
  const stdZeroSecond            stdZeroSecond = 528:untyped int
  const stdpm                    stdpm = 532:untyped int
  func  stopTimer                func(*runtimeTimer) bool
  const timeBinaryVersion        timeBinaryVersion = 1:byte
  var   unitMap                  map[string]int64
  const unixToInternal           unixToInternal = 62135596800:int64
  var   utcLoc                   Location
  func  when                     func(d Duration) int64
  type  zone                     struct{name string; offset int; isDST bool}
  var   zoneDirs                 []string
  type  zoneTrans                struct{when int64; index uint8; isstd bool; isutc bool}
  var   zoneinfo                 string

package math:
  func  Abs                    func(x float64) float64
  func  Acos                   func(x float64) float64
  func  Acosh                  func(x float64) float64
  func  Asin                   func(x float64) float64
  func  Asinh                  func(x float64) float64
  func  Atan                   func(x float64) float64
  func  Atan2                  func(y float64, x float64) float64
  func  Atanh                  func(x float64) float64
  func  Cbrt                   func(x float64) float64
  func  Ceil                   func(x float64) float64
  func  Copysign               func(x float64, y float64) float64
  func  Cos                    func(x float64) float64
  func  Cosh                   func(x float64) float64
  func  Dim                    func(x float64, y float64) float64
  const E                      E = 2.71828:untyped float
  func  Erf                    func(x float64) float64
  func  Erfc                   func(x float64) float64
  func  Exp                    func(x float64) float64
  func  Exp2                   func(x float64) float64
  func  Expm1                  func(x float64) float64
  func  Float32bits            func(f float32) uint32
  func  Float32frombits        func(b uint32) float32
  func  Float64bits            func(f float64) uint64
  func  Float64frombits        func(b uint64) float64
  func  Floor                  func(x float64) float64
  func  Frexp                  func(f float64) (frac float64, exp int)
  func  Gamma                  func(x float64) float64
  func  Hypot                  func(p float64, q float64) float64
  func  Ilogb                  func(x float64) int
  func  Inf                    func(sign int) float64
  func  IsInf                  func(f float64, sign int) bool
  func  IsNaN                  func(f float64) (is bool)
  func  J0                     func(x float64) float64
  func  J1                     func(x float64) float64
  func  Jn                     func(n int, x float64) float64
  func  Ldexp                  func(frac float64, exp int) float64
  func  Lgamma                 func(x float64) (lgamma float64, sign int)
  const Ln10                   Ln10 = 2.30259:untyped float
  const Ln2                    Ln2 = 0.693147:untyped float
  func  Log                    func(x float64) float64
  func  Log10                  func(x float64) float64
  const Log10E                 Log10E = 0.434294:untyped float
  func  Log1p                  func(x float64) float64
  func  Log2                   func(x float64) float64
  const Log2E                  Log2E = 1.4427:untyped float
  func  Logb                   func(x float64) float64
  func  Max                    func(x float64, y float64) float64
  const MaxFloat32             MaxFloat32 = 3.40282e+38:untyped float
  const MaxFloat64             MaxFloat64 = 1.79769e+308:untyped float
  const MaxInt16               MaxInt16 = 32767:untyped int
  const MaxInt32               MaxInt32 = 2147483647:untyped int
  const MaxInt64               MaxInt64 = 9223372036854775807:untyped int
  const MaxInt8                MaxInt8 = 127:untyped int
  const MaxUint16              MaxUint16 = 65535:untyped int
  const MaxUint32              MaxUint32 = 4294967295:untyped int
  const MaxUint64              MaxUint64 = 18446744073709551615:untyped int
  const MaxUint8               MaxUint8 = 255:untyped int
  func  Min                    func(x float64, y float64) float64
  const MinInt16               MinInt16 = -32768:untyped int
  const MinInt32               MinInt32 = -2147483648:untyped int
  const MinInt64               MinInt64 = -9223372036854775808:untyped int
  const MinInt8                MinInt8 = -128:untyped int
  func  Mod                    func(x float64, y float64) float64
  func  Modf                   func(f float64) (int float64, frac float64)
  func  NaN                    func() float64
  func  Nextafter              func(x float64, y float64) (r float64)
  func  Nextafter32            func(x float32, y float32) (r float32)
  const Phi                    Phi = 1.61803:untyped float
  const Pi                     Pi = 3.14159:untyped float
  func  Pow                    func(x float64, y float64) float64
  func  Pow10                  func(e int) float64
  func  Remainder              func(x float64, y float64) float64
  func  Signbit                func(x float64) bool
  func  Sin                    func(x float64) float64
  func  Sincos                 func(x float64) (sin float64, cos float64)
  func  Sinh                   func(x float64) float64
  const SmallestNonzeroFloat32 SmallestNonzeroFloat32 = 1.4013e-45:untyped float
  const SmallestNonzeroFloat64 SmallestNonzeroFloat64 = 4.94066e-324:untyped float
  func  Sqrt                   func(x float64) float64
  const Sqrt2                  Sqrt2 = 1.41421:untyped float
  const SqrtE                  SqrtE = 1.64872:untyped float
  const SqrtPhi                SqrtPhi = 1.27202:untyped float
  const SqrtPi                 SqrtPi = 1.77245:untyped float
  func  Tan                    func(x float64) float64
  func  Tanh                   func(x float64) float64
  func  Trunc                  func(x float64) float64
  func  Y0                     func(x float64) float64
  func  Y1                     func(x float64) float64
  func  Yn                     func(n int, x float64) float64
  var   _cos                   [6]float64
  var   _gamP                  [7]float64
  var   _gamQ                  [8]float64
  var   _gamS                  [5]float64
  var   _lgamA                 [12]float64
  var   _lgamR                 [7]float64
  var   _lgamS                 [7]float64
  var   _lgamT                 [15]float64
  var   _lgamU                 [6]float64
  var   _lgamV                 [6]float64
  var   _lgamW                 [7]float64
  var   _sin                   [6]float64
  var   _tanP                  [3]float64
  var   _tanQ                  [5]float64
  func  acos                   func(x float64) float64
  func  asin                   func(x float64) float64
  func  atan                   func(x float64) float64
  func  atan2                  func(y float64, x float64) float64
  const bias                   bias = 1023:untyped int
  func  ceil                   func(x float64) float64
  func  cos                    func(x float64) float64
  func  dim                    func(x float64, y float64) float64
  const efx                    efx = 0.128379:untyped float
  const efx8                   efx8 = 1.02703:untyped float
  const erx                    erx = 0.845063:untyped float
  func  exp                    func(x float64) float64
  func  exp2                   func(x float64) float64
  func  expm1                  func(x float64) float64
  func  expmulti               func(hi float64, lo float64, k int) float64
  func  floor                  func(x float64) float64
  func  frexp                  func(f float64) (frac float64, exp int)
  func  hasSSE4                func() bool
  func  hypot                  func(p float64, q float64) float64
  func  ilogb                  func(x float64) int
  func  init                   func()
  func  init#1                 func()
  var   init$guard             bool
  func  isNegInt               func(x float64) bool
  func  isOddInt               func(x float64) bool
  func  ldexp                  func(frac float64, exp int) float64
  func  log                    func(x float64) float64
  func  log10                  func(x float64) float64
  func  log1p                  func(x float64) float64
  func  log2                   func(x float64) float64
  const mask                   mask = 2047:untyped int
  func  max                    func(x float64, y float64) float64
  func  min                    func(x float64, y float64) float64
  func  mod                    func(x float64, y float64) float64
  func  modf                   func(f float64) (int float64, frac float64)
  func  normalize              func(x float64) (y float64, exp int)
  var   p0R2                   [6]float64
  var   p0R3                   [6]float64
  var   p0R5                   [6]float64
  var   p0R8                   [6]float64
  var   p0S2                   [5]float64
  var   p0S3                   [5]float64
  var   p0S5                   [5]float64
  var   p0S8                   [5]float64
  var   p1R2                   [6]float64
  var   p1R3                   [6]float64
  var   p1R5                   [6]float64
  var   p1R8                   [6]float64
  var   p1S2                   [5]float64
  var   p1S3                   [5]float64
  var   p1S5                   [5]float64
  var   p1S8                   [5]float64
  const pa0                    pa0 = -0.00236212:untyped float
  const pa1                    pa1 = 0.414856:untyped float
  const pa2                    pa2 = -0.372208:untyped float
  const pa3                    pa3 = 0.318347:untyped float
  const pa4                    pa4 = -0.110895:untyped float
  const pa5                    pa5 = 0.0354783:untyped float
  const pa6                    pa6 = -0.00216638:untyped float
  func  pone                   func(x float64) float64
  var   pow10tab               [70]float64
  const pp0                    pp0 = 0.128379:untyped float
  const pp1                    pp1 = -0.325042:untyped float
  const pp2                    pp2 = -0.0284817:untyped float
  const pp3                    pp3 = -0.00577027:untyped float
  const pp4                    pp4 = -2.3763e-05:untyped float
  func  pzero                  func(x float64) float64
  var   q0R2                   [6]float64
  var   q0R3                   [6]float64
  var   q0R5                   [6]float64
  var   q0R8                   [6]float64
  var   q0S2                   [6]float64
  var   q0S3                   [6]float64
  var   q0S5                   [6]float64
  var   q0S8                   [6]float64
  var   q1R2                   [6]float64
  var   q1R3                   [6]float64
  var   q1R5                   [6]float64
  var   q1R8                   [6]float64
  var   q1S2                   [6]float64
  var   q1S3                   [6]float64
  var   q1S5                   [6]float64
  var   q1S8                   [6]float64
  const qa1                    qa1 = 0.106421:untyped float
  const qa2                    qa2 = 0.540398:untyped float
  const qa3                    qa3 = 0.0718287:untyped float
  const qa4                    qa4 = 0.126171:untyped float
  const qa5                    qa5 = 0.0136371:untyped float
  const qa6                    qa6 = 0.0119845:untyped float
  func  qone                   func(x float64) float64
  const qq1                    qq1 = 0.397917:untyped float
  const qq2                    qq2 = 0.0650222:untyped float
  const qq3                    qq3 = 0.00508131:untyped float
  const qq4                    qq4 = 0.000132495:untyped float
  const qq5                    qq5 = -3.96023e-06:untyped float
  func  qzero                  func(x float64) float64
  const ra0                    ra0 = -0.00986494:untyped float
  const ra1                    ra1 = -0.693859:untyped float
  const ra2                    ra2 = -10.5586:untyped float
  const ra3                    ra3 = -62.3753:untyped float
  const ra4                    ra4 = -162.397:untyped float
  const ra5                    ra5 = -184.605:untyped float
  const ra6                    ra6 = -81.2874:untyped float
  const ra7                    ra7 = -9.81433:untyped float
  const rb0                    rb0 = -0.00986494:untyped float
  const rb1                    rb1 = -0.799283:untyped float
  const rb2                    rb2 = -17.758:untyped float
  const rb3                    rb3 = -160.636:untyped float
  const rb4                    rb4 = -637.566:untyped float
  const rb5                    rb5 = -1025.1:untyped float
  const rb6                    rb6 = -483.519:untyped float
  func  remainder              func(x float64, y float64) float64
  const sa1                    sa1 = 19.6513:untyped float
  const sa2                    sa2 = 137.658:untyped float
  const sa3                    sa3 = 434.566:untyped float
  const sa4                    sa4 = 645.387:untyped float
  const sa5                    sa5 = 429.008:untyped float
  const sa6                    sa6 = 108.635:untyped float
  const sa7                    sa7 = 6.57025:untyped float
  const sa8                    sa8 = -0.0604244:untyped float
  func  satan                  func(x float64) float64
  const sb1                    sb1 = 30.3381:untyped float
  const sb2                    sb2 = 325.793:untyped float
  const sb3                    sb3 = 1536.73:untyped float
  const sb4                    sb4 = 3199.86:untyped float
  const sb5                    sb5 = 2553.05:untyped float
  const sb6                    sb6 = 474.529:untyped float
  const sb7                    sb7 = -22.441:untyped float
  const shift                  shift = 52:untyped int
  func  sin                    func(x float64) float64
  func  sinPi                  func(x float64) float64
  func  sincos                 func(x float64) (sin float64, cos float64)
  func  sqrt                   func(x float64) float64
  func  stirling               func(x float64) float64
  func  tan                    func(x float64) float64
  var   tanhP                  [3]float64
  var   tanhQ                  [3]float64
  func  trunc                  func(x float64) float64
  var   useSSE4                bool
  const uvinf                  uvinf = 9218868437227405312:untyped int
  const uvnan                  uvnan = 9221120237041090561:untyped int
  const uvneginf               uvneginf = 18442240474082181120:untyped int
  func  xatan                  func(x float64) float64

package encoding/hex:
  func  Decode           func(dst []byte, src []byte) (int, error)
  func  DecodeString     func(s string) ([]byte, error)
  func  DecodedLen       func(x int) int
  func  Dump             func(data []byte) string
  func  Dumper           func(w io.Writer) io.WriteCloser
  func  Encode           func(dst []byte, src []byte) int
  func  EncodeToString   func(src []byte) string
  func  EncodedLen       func(n int) int
  var   ErrLength        error
  type  InvalidByteError byte
    method (InvalidByteError) Error() string
  type  dumper           struct{w io.Writer; rightChars [18]byte; buf [14]byte; used int; n uint}
    method (*dumper) Close() (err error)
    method (*dumper) Write(data []byte) (n int, err error)
  func  fromHexChar      func(c byte) (byte, bool)
  const hextable         hextable = "0123456789abcdef":untyped string
  func  init             func()
  var   init$guard       bool
  func  toChar           func(b byte) byte

package syscall:
  const AF_ALG                            AF_ALG = 38:untyped int
  const AF_APPLETALK                      AF_APPLETALK = 5:untyped int
  const AF_ASH                            AF_ASH = 18:untyped int
  const AF_ATMPVC                         AF_ATMPVC = 8:untyped int
  const AF_ATMSVC                         AF_ATMSVC = 20:untyped int
  const AF_AX25                           AF_AX25 = 3:untyped int
  const AF_BLUETOOTH                      AF_BLUETOOTH = 31:untyped int
  const AF_BRIDGE                         AF_BRIDGE = 7:untyped int
  const AF_CAIF                           AF_CAIF = 37:untyped int
  const AF_CAN                            AF_CAN = 29:untyped int
  const AF_DECnet                         AF_DECnet = 12:untyped int
  const AF_ECONET                         AF_ECONET = 19:untyped int
  const AF_FILE                           AF_FILE = 1:untyped int
  const AF_IEEE802154                     AF_IEEE802154 = 36:untyped int
  const AF_INET                           AF_INET = 2:untyped int
  const AF_INET6                          AF_INET6 = 10:untyped int
  const AF_IPX                            AF_IPX = 4:untyped int
  const AF_IRDA                           AF_IRDA = 23:untyped int
  const AF_ISDN                           AF_ISDN = 34:untyped int
  const AF_IUCV                           AF_IUCV = 32:untyped int
  const AF_KEY                            AF_KEY = 15:untyped int
  const AF_LLC                            AF_LLC = 26:untyped int
  const AF_LOCAL                          AF_LOCAL = 1:untyped int
  const AF_MAX                            AF_MAX = 39:untyped int
  const AF_NETBEUI                        AF_NETBEUI = 13:untyped int
  const AF_NETLINK                        AF_NETLINK = 16:untyped int
  const AF_NETROM                         AF_NETROM = 6:untyped int
  const AF_PACKET                         AF_PACKET = 17:untyped int
  const AF_PHONET                         AF_PHONET = 35:untyped int
  const AF_PPPOX                          AF_PPPOX = 24:untyped int
  const AF_RDS                            AF_RDS = 21:untyped int
  const AF_ROSE                           AF_ROSE = 11:untyped int
  const AF_ROUTE                          AF_ROUTE = 16:untyped int
  const AF_RXRPC                          AF_RXRPC = 33:untyped int
  const AF_SECURITY                       AF_SECURITY = 14:untyped int
  const AF_SNA                            AF_SNA = 22:untyped int
  const AF_TIPC                           AF_TIPC = 30:untyped int
  const AF_UNIX                           AF_UNIX = 1:untyped int
  const AF_UNSPEC                         AF_UNSPEC = 0:untyped int
  const AF_WANPIPE                        AF_WANPIPE = 25:untyped int
  const AF_X25                            AF_X25 = 9:untyped int
  const ARPHRD_ADAPT                      ARPHRD_ADAPT = 264:untyped int
  const ARPHRD_APPLETLK                   ARPHRD_APPLETLK = 8:untyped int
  const ARPHRD_ARCNET                     ARPHRD_ARCNET = 7:untyped int
  const ARPHRD_ASH                        ARPHRD_ASH = 781:untyped int
  const ARPHRD_ATM                        ARPHRD_ATM = 19:untyped int
  const ARPHRD_AX25                       ARPHRD_AX25 = 3:untyped int
  const ARPHRD_BIF                        ARPHRD_BIF = 775:untyped int
  const ARPHRD_CHAOS                      ARPHRD_CHAOS = 5:untyped int
  const ARPHRD_CISCO                      ARPHRD_CISCO = 513:untyped int
  const ARPHRD_CSLIP                      ARPHRD_CSLIP = 257:untyped int
  const ARPHRD_CSLIP6                     ARPHRD_CSLIP6 = 259:untyped int
  const ARPHRD_DDCMP                      ARPHRD_DDCMP = 517:untyped int
  const ARPHRD_DLCI                       ARPHRD_DLCI = 15:untyped int
  const ARPHRD_ECONET                     ARPHRD_ECONET = 782:untyped int
  const ARPHRD_EETHER                     ARPHRD_EETHER = 2:untyped int
  const ARPHRD_ETHER                      ARPHRD_ETHER = 1:untyped int
  const ARPHRD_EUI64                      ARPHRD_EUI64 = 27:untyped int
  const ARPHRD_FCAL                       ARPHRD_FCAL = 785:untyped int
  const ARPHRD_FCFABRIC                   ARPHRD_FCFABRIC = 787:untyped int
  const ARPHRD_FCPL                       ARPHRD_FCPL = 786:untyped int
  const ARPHRD_FCPP                       ARPHRD_FCPP = 784:untyped int
  const ARPHRD_FDDI                       ARPHRD_FDDI = 774:untyped int
  const ARPHRD_FRAD                       ARPHRD_FRAD = 770:untyped int
  const ARPHRD_HDLC                       ARPHRD_HDLC = 513:untyped int
  const ARPHRD_HIPPI                      ARPHRD_HIPPI = 780:untyped int
  const ARPHRD_HWX25                      ARPHRD_HWX25 = 272:untyped int
  const ARPHRD_IEEE1394                   ARPHRD_IEEE1394 = 24:untyped int
  const ARPHRD_IEEE802                    ARPHRD_IEEE802 = 6:untyped int
  const ARPHRD_IEEE80211                  ARPHRD_IEEE80211 = 801:untyped int
  const ARPHRD_IEEE80211_PRISM            ARPHRD_IEEE80211_PRISM = 802:untyped int
  const ARPHRD_IEEE80211_RADIOTAP         ARPHRD_IEEE80211_RADIOTAP = 803:untyped int
  const ARPHRD_IEEE802154                 ARPHRD_IEEE802154 = 804:untyped int
  const ARPHRD_IEEE802154_PHY             ARPHRD_IEEE802154_PHY = 805:untyped int
  const ARPHRD_IEEE802_TR                 ARPHRD_IEEE802_TR = 800:untyped int
  const ARPHRD_INFINIBAND                 ARPHRD_INFINIBAND = 32:untyped int
  const ARPHRD_IPDDP                      ARPHRD_IPDDP = 777:untyped int
  const ARPHRD_IPGRE                      ARPHRD_IPGRE = 778:untyped int
  const ARPHRD_IRDA                       ARPHRD_IRDA = 783:untyped int
  const ARPHRD_LAPB                       ARPHRD_LAPB = 516:untyped int
  const ARPHRD_LOCALTLK                   ARPHRD_LOCALTLK = 773:untyped int
  const ARPHRD_LOOPBACK                   ARPHRD_LOOPBACK = 772:untyped int
  const ARPHRD_METRICOM                   ARPHRD_METRICOM = 23:untyped int
  const ARPHRD_NETROM                     ARPHRD_NETROM = 0:untyped int
  const ARPHRD_NONE                       ARPHRD_NONE = 65534:untyped int
  const ARPHRD_PIMREG                     ARPHRD_PIMREG = 779:untyped int
  const ARPHRD_PPP                        ARPHRD_PPP = 512:untyped int
  const ARPHRD_PRONET                     ARPHRD_PRONET = 4:untyped int
  const ARPHRD_RAWHDLC                    ARPHRD_RAWHDLC = 518:untyped int
  const ARPHRD_ROSE                       ARPHRD_ROSE = 270:untyped int
  const ARPHRD_RSRVD                      ARPHRD_RSRVD = 260:untyped int
  const ARPHRD_SIT                        ARPHRD_SIT = 776:untyped int
  const ARPHRD_SKIP                       ARPHRD_SKIP = 771:untyped int
  const ARPHRD_SLIP                       ARPHRD_SLIP = 256:untyped int
  const ARPHRD_SLIP6                      ARPHRD_SLIP6 = 258:untyped int
  const ARPHRD_TUNNEL                     ARPHRD_TUNNEL = 768:untyped int
  const ARPHRD_TUNNEL6                    ARPHRD_TUNNEL6 = 769:untyped int
  const ARPHRD_VOID                       ARPHRD_VOID = 65535:untyped int
  const ARPHRD_X25                        ARPHRD_X25 = 271:untyped int
  func  Accept                            func(fd int) (nfd int, sa Sockaddr, err error)
  func  Accept4                           func(fd int, flags int) (nfd int, sa Sockaddr, err error)
  func  Access                            func(path string, mode uint32) (err error)
  func  Acct                              func(path string) (err error)
  func  Adjtimex                          func(buf *Timex) (state int, err error)
  func  AttachLsf                         func(fd int, i []SockFilter) error
  const B0                                B0 = 0:untyped int
  const B1000000                          B1000000 = 4104:untyped int
  const B110                              B110 = 3:untyped int
  const B115200                           B115200 = 4098:untyped int
  const B1152000                          B1152000 = 4105:untyped int
  const B1200                             B1200 = 9:untyped int
  const B134                              B134 = 4:untyped int
  const B150                              B150 = 5:untyped int
  const B1500000                          B1500000 = 4106:untyped int
  const B1800                             B1800 = 10:untyped int
  const B19200                            B19200 = 14:untyped int
  const B200                              B200 = 6:untyped int
  const B2000000                          B2000000 = 4107:untyped int
  const B230400                           B230400 = 4099:untyped int
  const B2400                             B2400 = 11:untyped int
  const B2500000                          B2500000 = 4108:untyped int
  const B300                              B300 = 7:untyped int
  const B3000000                          B3000000 = 4109:untyped int
  const B3500000                          B3500000 = 4110:untyped int
  const B38400                            B38400 = 15:untyped int
  const B4000000                          B4000000 = 4111:untyped int
  const B460800                           B460800 = 4100:untyped int
  const B4800                             B4800 = 12:untyped int
  const B50                               B50 = 1:untyped int
  const B500000                           B500000 = 4101:untyped int
  const B57600                            B57600 = 4097:untyped int
  const B576000                           B576000 = 4102:untyped int
  const B600                              B600 = 8:untyped int
  const B75                               B75 = 2:untyped int
  const B921600                           B921600 = 4103:untyped int
  const B9600                             B9600 = 13:untyped int
  const BPF_A                             BPF_A = 16:untyped int
  const BPF_ABS                           BPF_ABS = 32:untyped int
  const BPF_ADD                           BPF_ADD = 0:untyped int
  const BPF_ALU                           BPF_ALU = 4:untyped int
  const BPF_AND                           BPF_AND = 80:untyped int
  const BPF_B                             BPF_B = 16:untyped int
  const BPF_DIV                           BPF_DIV = 48:untyped int
  const BPF_H                             BPF_H = 8:untyped int
  const BPF_IMM                           BPF_IMM = 0:untyped int
  const BPF_IND                           BPF_IND = 64:untyped int
  const BPF_JA                            BPF_JA = 0:untyped int
  const BPF_JEQ                           BPF_JEQ = 16:untyped int
  const BPF_JGE                           BPF_JGE = 48:untyped int
  const BPF_JGT                           BPF_JGT = 32:untyped int
  const BPF_JMP                           BPF_JMP = 5:untyped int
  const BPF_JSET                          BPF_JSET = 64:untyped int
  const BPF_K                             BPF_K = 0:untyped int
  const BPF_LD                            BPF_LD = 0:untyped int
  const BPF_LDX                           BPF_LDX = 1:untyped int
  const BPF_LEN                           BPF_LEN = 128:untyped int
  const BPF_LSH                           BPF_LSH = 96:untyped int
  const BPF_MAJOR_VERSION                 BPF_MAJOR_VERSION = 1:untyped int
  const BPF_MAXINSNS                      BPF_MAXINSNS = 4096:untyped int
  const BPF_MEM                           BPF_MEM = 96:untyped int
  const BPF_MEMWORDS                      BPF_MEMWORDS = 16:untyped int
  const BPF_MINOR_VERSION                 BPF_MINOR_VERSION = 1:untyped int
  const BPF_MISC                          BPF_MISC = 7:untyped int
  const BPF_MSH                           BPF_MSH = 160:untyped int
  const BPF_MUL                           BPF_MUL = 32:untyped int
  const BPF_NEG                           BPF_NEG = 128:untyped int
  const BPF_OR                            BPF_OR = 64:untyped int
  const BPF_RET                           BPF_RET = 6:untyped int
  const BPF_RSH                           BPF_RSH = 112:untyped int
  const BPF_ST                            BPF_ST = 2:untyped int
  const BPF_STX                           BPF_STX = 3:untyped int
  const BPF_SUB                           BPF_SUB = 16:untyped int
  const BPF_TAX                           BPF_TAX = 0:untyped int
  const BPF_TXA                           BPF_TXA = 128:untyped int
  const BPF_W                             BPF_W = 0:untyped int
  const BPF_X                             BPF_X = 8:untyped int
  const BRKINT                            BRKINT = 2:untyped int
  func  Bind                              func(fd int, sa Sockaddr) (err error)
  func  BindToDevice                      func(fd int, device string) (err error)
  func  BytePtrFromString                 func(s string) (*byte, error)
  func  ByteSliceFromString               func(s string) ([]byte, error)
  const CLOCAL                            CLOCAL = 2048:untyped int
  const CLONE_CHILD_CLEARTID              CLONE_CHILD_CLEARTID = 2097152:untyped int
  const CLONE_CHILD_SETTID                CLONE_CHILD_SETTID = 16777216:untyped int
  const CLONE_DETACHED                    CLONE_DETACHED = 4194304:untyped int
  const CLONE_FILES                       CLONE_FILES = 1024:untyped int
  const CLONE_FS                          CLONE_FS = 512:untyped int
  const CLONE_IO                          CLONE_IO = 2147483648:untyped int
  const CLONE_NEWIPC                      CLONE_NEWIPC = 134217728:untyped int
  const CLONE_NEWNET                      CLONE_NEWNET = 1073741824:untyped int
  const CLONE_NEWNS                       CLONE_NEWNS = 131072:untyped int
  const CLONE_NEWPID                      CLONE_NEWPID = 536870912:untyped int
  const CLONE_NEWUSER                     CLONE_NEWUSER = 268435456:untyped int
  const CLONE_NEWUTS                      CLONE_NEWUTS = 67108864:untyped int
  const CLONE_PARENT                      CLONE_PARENT = 32768:untyped int
  const CLONE_PARENT_SETTID               CLONE_PARENT_SETTID = 1048576:untyped int
  const CLONE_PTRACE                      CLONE_PTRACE = 8192:untyped int
  const CLONE_SETTLS                      CLONE_SETTLS = 524288:untyped int
  const CLONE_SIGHAND                     CLONE_SIGHAND = 2048:untyped int
  const CLONE_SYSVSEM                     CLONE_SYSVSEM = 262144:untyped int
  const CLONE_THREAD                      CLONE_THREAD = 65536:untyped int
  const CLONE_UNTRACED                    CLONE_UNTRACED = 8388608:untyped int
  const CLONE_VFORK                       CLONE_VFORK = 16384:untyped int
  const CLONE_VM                          CLONE_VM = 256:untyped int
  const CREAD                             CREAD = 128:untyped int
  const CS5                               CS5 = 0:untyped int
  const CS6                               CS6 = 16:untyped int
  const CS7                               CS7 = 32:untyped int
  const CS8                               CS8 = 48:untyped int
  const CSIZE                             CSIZE = 48:untyped int
  const CSTOPB                            CSTOPB = 64:untyped int
  func  Chdir                             func(path string) (err error)
  func  Chmod                             func(path string, mode uint32) (err error)
  func  Chown                             func(path string, uid int, gid int) (err error)
  func  Chroot                            func(path string) (err error)
  func  Clearenv                          func()
  func  Close                             func(fd int) (err error)
  func  CloseOnExec                       func(fd int)
  func  CmsgLen                           func(datalen int) int
  func  CmsgSpace                         func(datalen int) int
  type  Cmsghdr                           struct{Len uint64; Level int32; Type int32; X__cmsg_data [0]uint8}
    method (*Cmsghdr) SetLen(length int)
  func  Connect                           func(fd int, sa Sockaddr) (err error)
  func  Creat                             func(path string, mode uint32) (fd int, err error)
  type  Credential                        struct{Uid uint32; Gid uint32; Groups []uint32}
  const DT_BLK                            DT_BLK = 6:untyped int
  const DT_CHR                            DT_CHR = 2:untyped int
  const DT_DIR                            DT_DIR = 4:untyped int
  const DT_FIFO                           DT_FIFO = 1:untyped int
  const DT_LNK                            DT_LNK = 10:untyped int
  const DT_REG                            DT_REG = 8:untyped int
  const DT_SOCK                           DT_SOCK = 12:untyped int
  const DT_UNKNOWN                        DT_UNKNOWN = 0:untyped int
  const DT_WHT                            DT_WHT = 14:untyped int
  func  DetachLsf                         func(fd int) error
  type  Dirent                            struct{Ino uint64; Off int64; Reclen uint16; Type uint8; Name [256]int8; Pad_cgo_0 [5]byte}
  func  Dup                               func(oldfd int) (fd int, err error)
  func  Dup2                              func(oldfd int, newfd int) (err error)
  func  Dup3                              func(oldfd int, newfd int, flags int) (err error)
  const E2BIG                             E2BIG = 7:Errno
  const EACCES                            EACCES = 13:Errno
  const EADDRINUSE                        EADDRINUSE = 98:Errno
  const EADDRNOTAVAIL                     EADDRNOTAVAIL = 99:Errno
  const EADV                              EADV = 68:Errno
  const EAFNOSUPPORT                      EAFNOSUPPORT = 97:Errno
  const EAGAIN                            EAGAIN = 11:Errno
  const EALREADY                          EALREADY = 114:Errno
  const EBADE                             EBADE = 52:Errno
  const EBADF                             EBADF = 9:Errno
  const EBADFD                            EBADFD = 77:Errno
  const EBADMSG                           EBADMSG = 74:Errno
  const EBADR                             EBADR = 53:Errno
  const EBADRQC                           EBADRQC = 56:Errno
  const EBADSLT                           EBADSLT = 57:Errno
  const EBFONT                            EBFONT = 59:Errno
  const EBUSY                             EBUSY = 16:Errno
  const ECANCELED                         ECANCELED = 125:Errno
  const ECHILD                            ECHILD = 10:Errno
  const ECHO                              ECHO = 8:untyped int
  const ECHOCTL                           ECHOCTL = 512:untyped int
  const ECHOE                             ECHOE = 16:untyped int
  const ECHOK                             ECHOK = 32:untyped int
  const ECHOKE                            ECHOKE = 2048:untyped int
  const ECHONL                            ECHONL = 64:untyped int
  const ECHOPRT                           ECHOPRT = 1024:untyped int
  const ECHRNG                            ECHRNG = 44:Errno
  const ECOMM                             ECOMM = 70:Errno
  const ECONNABORTED                      ECONNABORTED = 103:Errno
  const ECONNREFUSED                      ECONNREFUSED = 111:Errno
  const ECONNRESET                        ECONNRESET = 104:Errno
  const EDEADLK                           EDEADLK = 35:Errno
  const EDEADLOCK                         EDEADLOCK = 35:Errno
  const EDESTADDRREQ                      EDESTADDRREQ = 89:Errno
  const EDOM                              EDOM = 33:Errno
  const EDOTDOT                           EDOTDOT = 73:Errno
  const EDQUOT                            EDQUOT = 122:Errno
  const EEXIST                            EEXIST = 17:Errno
  const EFAULT                            EFAULT = 14:Errno
  const EFBIG                             EFBIG = 27:Errno
  const EHOSTDOWN                         EHOSTDOWN = 112:Errno
  const EHOSTUNREACH                      EHOSTUNREACH = 113:Errno
  const EIDRM                             EIDRM = 43:Errno
  const EILSEQ                            EILSEQ = 84:Errno
  const EINPROGRESS                       EINPROGRESS = 115:Errno
  const EINTR                             EINTR = 4:Errno
  const EINVAL                            EINVAL = 22:Errno
  const EIO                               EIO = 5:Errno
  const EISCONN                           EISCONN = 106:Errno
  const EISDIR                            EISDIR = 21:Errno
  const EISNAM                            EISNAM = 120:Errno
  const EKEYEXPIRED                       EKEYEXPIRED = 127:Errno
  const EKEYREJECTED                      EKEYREJECTED = 129:Errno
  const EKEYREVOKED                       EKEYREVOKED = 128:Errno
  const EL2HLT                            EL2HLT = 51:Errno
  const EL2NSYNC                          EL2NSYNC = 45:Errno
  const EL3HLT                            EL3HLT = 46:Errno
  const EL3RST                            EL3RST = 47:Errno
  const ELIBACC                           ELIBACC = 79:Errno
  const ELIBBAD                           ELIBBAD = 80:Errno
  const ELIBEXEC                          ELIBEXEC = 83:Errno
  const ELIBMAX                           ELIBMAX = 82:Errno
  const ELIBSCN                           ELIBSCN = 81:Errno
  const ELNRNG                            ELNRNG = 48:Errno
  const ELOOP                             ELOOP = 40:Errno
  const EMEDIUMTYPE                       EMEDIUMTYPE = 124:Errno
  const EMFILE                            EMFILE = 24:Errno
  const EMLINK                            EMLINK = 31:Errno
  const EMSGSIZE                          EMSGSIZE = 90:Errno
  const EMULTIHOP                         EMULTIHOP = 72:Errno
  const ENAMETOOLONG                      ENAMETOOLONG = 36:Errno
  const ENAVAIL                           ENAVAIL = 119:Errno
  const ENETDOWN                          ENETDOWN = 100:Errno
  const ENETRESET                         ENETRESET = 102:Errno
  const ENETUNREACH                       ENETUNREACH = 101:Errno
  const ENFILE                            ENFILE = 23:Errno
  const ENOANO                            ENOANO = 55:Errno
  const ENOBUFS                           ENOBUFS = 105:Errno
  const ENOCSI                            ENOCSI = 50:Errno
  const ENODATA                           ENODATA = 61:Errno
  const ENODEV                            ENODEV = 19:Errno
  const ENOENT                            ENOENT = 2:Errno
  const ENOEXEC                           ENOEXEC = 8:Errno
  const ENOKEY                            ENOKEY = 126:Errno
  const ENOLCK                            ENOLCK = 37:Errno
  const ENOLINK                           ENOLINK = 67:Errno
  const ENOMEDIUM                         ENOMEDIUM = 123:Errno
  const ENOMEM                            ENOMEM = 12:Errno
  const ENOMSG                            ENOMSG = 42:Errno
  const ENONET                            ENONET = 64:Errno
  const ENOPKG                            ENOPKG = 65:Errno
  const ENOPROTOOPT                       ENOPROTOOPT = 92:Errno
  const ENOSPC                            ENOSPC = 28:Errno
  const ENOSR                             ENOSR = 63:Errno
  const ENOSTR                            ENOSTR = 60:Errno
  const ENOSYS                            ENOSYS = 38:Errno
  const ENOTBLK                           ENOTBLK = 15:Errno
  const ENOTCONN                          ENOTCONN = 107:Errno
  const ENOTDIR                           ENOTDIR = 20:Errno
  const ENOTEMPTY                         ENOTEMPTY = 39:Errno
  const ENOTNAM                           ENOTNAM = 118:Errno
  const ENOTRECOVERABLE                   ENOTRECOVERABLE = 131:Errno
  const ENOTSOCK                          ENOTSOCK = 88:Errno
  const ENOTSUP                           ENOTSUP = 95:Errno
  const ENOTTY                            ENOTTY = 25:Errno
  const ENOTUNIQ                          ENOTUNIQ = 76:Errno
  const ENXIO                             ENXIO = 6:Errno
  const EOPNOTSUPP                        EOPNOTSUPP = 95:Errno
  const EOVERFLOW                         EOVERFLOW = 75:Errno
  const EOWNERDEAD                        EOWNERDEAD = 130:Errno
  const EPERM                             EPERM = 1:Errno
  const EPFNOSUPPORT                      EPFNOSUPPORT = 96:Errno
  const EPIPE                             EPIPE = 32:Errno
  const EPOLLERR                          EPOLLERR = 8:untyped int
  const EPOLLET                           EPOLLET = -2147483648:untyped int
  const EPOLLHUP                          EPOLLHUP = 16:untyped int
  const EPOLLIN                           EPOLLIN = 1:untyped int
  const EPOLLMSG                          EPOLLMSG = 1024:untyped int
  const EPOLLONESHOT                      EPOLLONESHOT = 1073741824:untyped int
  const EPOLLOUT                          EPOLLOUT = 4:untyped int
  const EPOLLPRI                          EPOLLPRI = 2:untyped int
  const EPOLLRDBAND                       EPOLLRDBAND = 128:untyped int
  const EPOLLRDHUP                        EPOLLRDHUP = 8192:untyped int
  const EPOLLRDNORM                       EPOLLRDNORM = 64:untyped int
  const EPOLLWRBAND                       EPOLLWRBAND = 512:untyped int
  const EPOLLWRNORM                       EPOLLWRNORM = 256:untyped int
  const EPOLL_CLOEXEC                     EPOLL_CLOEXEC = 524288:untyped int
  const EPOLL_CTL_ADD                     EPOLL_CTL_ADD = 1:untyped int
  const EPOLL_CTL_DEL                     EPOLL_CTL_DEL = 2:untyped int
  const EPOLL_CTL_MOD                     EPOLL_CTL_MOD = 3:untyped int
  const EPOLL_NONBLOCK                    EPOLL_NONBLOCK = 2048:untyped int
  const EPROTO                            EPROTO = 71:Errno
  const EPROTONOSUPPORT                   EPROTONOSUPPORT = 93:Errno
  const EPROTOTYPE                        EPROTOTYPE = 91:Errno
  const ERANGE                            ERANGE = 34:Errno
  const EREMCHG                           EREMCHG = 78:Errno
  const EREMOTE                           EREMOTE = 66:Errno
  const EREMOTEIO                         EREMOTEIO = 121:Errno
  const ERESTART                          ERESTART = 85:Errno
  const ERFKILL                           ERFKILL = 132:Errno
  const EROFS                             EROFS = 30:Errno
  const ESHUTDOWN                         ESHUTDOWN = 108:Errno
  const ESOCKTNOSUPPORT                   ESOCKTNOSUPPORT = 94:Errno
  const ESPIPE                            ESPIPE = 29:Errno
  const ESRCH                             ESRCH = 3:Errno
  const ESRMNT                            ESRMNT = 69:Errno
  const ESTALE                            ESTALE = 116:Errno
  const ESTRPIPE                          ESTRPIPE = 86:Errno
  const ETH_P_1588                        ETH_P_1588 = 35063:untyped int
  const ETH_P_8021Q                       ETH_P_8021Q = 33024:untyped int
  const ETH_P_802_2                       ETH_P_802_2 = 4:untyped int
  const ETH_P_802_3                       ETH_P_802_3 = 1:untyped int
  const ETH_P_AARP                        ETH_P_AARP = 33011:untyped int
  const ETH_P_ALL                         ETH_P_ALL = 3:untyped int
  const ETH_P_AOE                         ETH_P_AOE = 34978:untyped int
  const ETH_P_ARCNET                      ETH_P_ARCNET = 26:untyped int
  const ETH_P_ARP                         ETH_P_ARP = 2054:untyped int
  const ETH_P_ATALK                       ETH_P_ATALK = 32923:untyped int
  const ETH_P_ATMFATE                     ETH_P_ATMFATE = 34948:untyped int
  const ETH_P_ATMMPOA                     ETH_P_ATMMPOA = 34892:untyped int
  const ETH_P_AX25                        ETH_P_AX25 = 2:untyped int
  const ETH_P_BPQ                         ETH_P_BPQ = 2303:untyped int
  const ETH_P_CAIF                        ETH_P_CAIF = 247:untyped int
  const ETH_P_CAN                         ETH_P_CAN = 12:untyped int
  const ETH_P_CONTROL                     ETH_P_CONTROL = 22:untyped int
  const ETH_P_CUST                        ETH_P_CUST = 24582:untyped int
  const ETH_P_DDCMP                       ETH_P_DDCMP = 6:untyped int
  const ETH_P_DEC                         ETH_P_DEC = 24576:untyped int
  const ETH_P_DIAG                        ETH_P_DIAG = 24581:untyped int
  const ETH_P_DNA_DL                      ETH_P_DNA_DL = 24577:untyped int
  const ETH_P_DNA_RC                      ETH_P_DNA_RC = 24578:untyped int
  const ETH_P_DNA_RT                      ETH_P_DNA_RT = 24579:untyped int
  const ETH_P_DSA                         ETH_P_DSA = 27:untyped int
  const ETH_P_ECONET                      ETH_P_ECONET = 24:untyped int
  const ETH_P_EDSA                        ETH_P_EDSA = 56026:untyped int
  const ETH_P_FCOE                        ETH_P_FCOE = 35078:untyped int
  const ETH_P_FIP                         ETH_P_FIP = 35092:untyped int
  const ETH_P_HDLC                        ETH_P_HDLC = 25:untyped int
  const ETH_P_IEEE802154                  ETH_P_IEEE802154 = 246:untyped int
  const ETH_P_IEEEPUP                     ETH_P_IEEEPUP = 2560:untyped int
  const ETH_P_IEEEPUPAT                   ETH_P_IEEEPUPAT = 2561:untyped int
  const ETH_P_IP                          ETH_P_IP = 2048:untyped int
  const ETH_P_IPV6                        ETH_P_IPV6 = 34525:untyped int
  const ETH_P_IPX                         ETH_P_IPX = 33079:untyped int
  const ETH_P_IRDA                        ETH_P_IRDA = 23:untyped int
  const ETH_P_LAT                         ETH_P_LAT = 24580:untyped int
  const ETH_P_LINK_CTL                    ETH_P_LINK_CTL = 34924:untyped int
  const ETH_P_LOCALTALK                   ETH_P_LOCALTALK = 9:untyped int
  const ETH_P_LOOP                        ETH_P_LOOP = 96:untyped int
  const ETH_P_MOBITEX                     ETH_P_MOBITEX = 21:untyped int
  const ETH_P_MPLS_MC                     ETH_P_MPLS_MC = 34888:untyped int
  const ETH_P_MPLS_UC                     ETH_P_MPLS_UC = 34887:untyped int
  const ETH_P_PAE                         ETH_P_PAE = 34958:untyped int
  const ETH_P_PAUSE                       ETH_P_PAUSE = 34824:untyped int
  const ETH_P_PHONET                      ETH_P_PHONET = 245:untyped int
  const ETH_P_PPPTALK                     ETH_P_PPPTALK = 16:untyped int
  const ETH_P_PPP_DISC                    ETH_P_PPP_DISC = 34915:untyped int
  const ETH_P_PPP_MP                      ETH_P_PPP_MP = 8:untyped int
  const ETH_P_PPP_SES                     ETH_P_PPP_SES = 34916:untyped int
  const ETH_P_PUP                         ETH_P_PUP = 512:untyped int
  const ETH_P_PUPAT                       ETH_P_PUPAT = 513:untyped int
  const ETH_P_RARP                        ETH_P_RARP = 32821:untyped int
  const ETH_P_SCA                         ETH_P_SCA = 24583:untyped int
  const ETH_P_SLOW                        ETH_P_SLOW = 34825:untyped int
  const ETH_P_SNAP                        ETH_P_SNAP = 5:untyped int
  const ETH_P_TEB                         ETH_P_TEB = 25944:untyped int
  const ETH_P_TIPC                        ETH_P_TIPC = 35018:untyped int
  const ETH_P_TRAILER                     ETH_P_TRAILER = 28:untyped int
  const ETH_P_TR_802_2                    ETH_P_TR_802_2 = 17:untyped int
  const ETH_P_WAN_PPP                     ETH_P_WAN_PPP = 7:untyped int
  const ETH_P_WCCP                        ETH_P_WCCP = 34878:untyped int
  const ETH_P_X25                         ETH_P_X25 = 2053:untyped int
  const ETIME                             ETIME = 62:Errno
  const ETIMEDOUT                         ETIMEDOUT = 110:Errno
  const ETOOMANYREFS                      ETOOMANYREFS = 109:Errno
  const ETXTBSY                           ETXTBSY = 26:Errno
  const EUCLEAN                           EUCLEAN = 117:Errno
  const EUNATCH                           EUNATCH = 49:Errno
  const EUSERS                            EUSERS = 87:Errno
  const EWOULDBLOCK                       EWOULDBLOCK = 11:Errno
  const EXDEV                             EXDEV = 18:Errno
  const EXFULL                            EXFULL = 54:Errno
  func  Environ                           func() []string
  func  EpollCreate                       func(size int) (fd int, err error)
  func  EpollCreate1                      func(flag int) (fd int, err error)
  func  EpollCtl                          func(epfd int, op int, fd int, event *EpollEvent) (err error)
  type  EpollEvent                        struct{Events uint32; Fd int32; Pad int32}
  func  EpollWait                         func(epfd int, events []EpollEvent, msec int) (n int, err error)
  type  Errno                             uintptr
    method (Errno) Error() string
    method (Errno) Temporary() bool
    method (Errno) Timeout() bool
  func  Exec                              func(argv0 string, argv []string, envv []string) (err error)
  func  Exit                              func(code int)
  const FD_CLOEXEC                        FD_CLOEXEC = 1:untyped int
  const FD_SETSIZE                        FD_SETSIZE = 1024:untyped int
  const FLUSHO                            FLUSHO = 4096:untyped int
  const F_DUPFD                           F_DUPFD = 0:untyped int
  const F_DUPFD_CLOEXEC                   F_DUPFD_CLOEXEC = 1030:untyped int
  const F_EXLCK                           F_EXLCK = 4:untyped int
  const F_GETFD                           F_GETFD = 1:untyped int
  const F_GETFL                           F_GETFL = 3:untyped int
  const F_GETLEASE                        F_GETLEASE = 1025:untyped int
  const F_GETLK                           F_GETLK = 5:untyped int
  const F_GETLK64                         F_GETLK64 = 5:untyped int
  const F_GETOWN                          F_GETOWN = 9:untyped int
  const F_GETOWN_EX                       F_GETOWN_EX = 16:untyped int
  const F_GETPIPE_SZ                      F_GETPIPE_SZ = 1032:untyped int
  const F_GETSIG                          F_GETSIG = 11:untyped int
  const F_LOCK                            F_LOCK = 1:untyped int
  const F_NOTIFY                          F_NOTIFY = 1026:untyped int
  const F_OK                              F_OK = 0:untyped int
  const F_RDLCK                           F_RDLCK = 0:untyped int
  const F_SETFD                           F_SETFD = 2:untyped int
  const F_SETFL                           F_SETFL = 4:untyped int
  const F_SETLEASE                        F_SETLEASE = 1024:untyped int
  const F_SETLK                           F_SETLK = 6:untyped int
  const F_SETLK64                         F_SETLK64 = 6:untyped int
  const F_SETLKW                          F_SETLKW = 7:untyped int
  const F_SETLKW64                        F_SETLKW64 = 7:untyped int
  const F_SETOWN                          F_SETOWN = 8:untyped int
  const F_SETOWN_EX                       F_SETOWN_EX = 15:untyped int
  const F_SETPIPE_SZ                      F_SETPIPE_SZ = 1031:untyped int
  const F_SETSIG                          F_SETSIG = 10:untyped int
  const F_SHLCK                           F_SHLCK = 8:untyped int
  const F_TEST                            F_TEST = 3:untyped int
  const F_TLOCK                           F_TLOCK = 2:untyped int
  const F_ULOCK                           F_ULOCK = 0:untyped int
  const F_UNLCK                           F_UNLCK = 2:untyped int
  const F_WRLCK                           F_WRLCK = 1:untyped int
  func  Faccessat                         func(dirfd int, path string, mode uint32, flags int) (err error)
  func  Fallocate                         func(fd int, mode uint32, off int64, len int64) (err error)
  func  Fchdir                            func(fd int) (err error)
  func  Fchmod                            func(fd int, mode uint32) (err error)
  func  Fchmodat                          func(dirfd int, path string, mode uint32, flags int) (err error)
  func  Fchown                            func(fd int, uid int, gid int) (err error)
  func  Fchownat                          func(dirfd int, path string, uid int, gid int, flags int) (err error)
  func  FcntlFlock                        func(fd uintptr, cmd int, lk *Flock_t) error
  type  FdSet                             struct{Bits [16]int64}
  func  Fdatasync                         func(fd int) (err error)
  func  Flock                             func(fd int, how int) (err error)
  type  Flock_t                           struct{Type int16; Whence int16; Pad_cgo_0 [4]byte; Start int64; Len int64; Pid int32; Pad_cgo_1 [4]byte}
  func  ForkExec                          func(argv0 string, argv []string, attr *ProcAttr) (pid int, err error)
  var   ForkLock                          sync.RWMutex
  type  Fsid                              struct{X__val [2]int32}
  func  Fstat                             func(fd int, stat *Stat_t) (err error)
  func  Fstatfs                           func(fd int, buf *Statfs_t) (err error)
  func  Fsync                             func(fd int) (err error)
  func  Ftruncate                         func(fd int, length int64) (err error)
  func  Futimes                           func(fd int, tv []Timeval) (err error)
  func  Futimesat                         func(dirfd int, path string, tv []Timeval) (err error)
  func  Getcwd                            func(buf []byte) (n int, err error)
  func  Getdents                          func(fd int, buf []byte) (n int, err error)
  func  Getegid                           func() (egid int)
  func  Getenv                            func(key string) (value string, found bool)
  func  Geteuid                           func() (euid int)
  func  Getgid                            func() (gid int)
  func  Getgroups                         func() (gids []int, err error)
  func  Getpagesize                       func() int
  func  Getpeername                       func(fd int) (sa Sockaddr, err error)
  func  Getpgid                           func(pid int) (pgid int, err error)
  func  Getpgrp                           func() (pid int)
  func  Getpid                            func() (pid int)
  func  Getppid                           func() (ppid int)
  func  Getpriority                       func(which int, who int) (prio int, err error)
  func  Getrlimit                         func(resource int, rlim *Rlimit) (err error)
  func  Getrusage                         func(who int, rusage *Rusage) (err error)
  func  Getsockname                       func(fd int) (sa Sockaddr, err error)
  func  GetsockoptICMPv6Filter            func(fd int, level int, opt int) (*ICMPv6Filter, error)
  func  GetsockoptIPMreq                  func(fd int, level int, opt int) (*IPMreq, error)
  func  GetsockoptIPMreqn                 func(fd int, level int, opt int) (*IPMreqn, error)
  func  GetsockoptIPv6MTUInfo             func(fd int, level int, opt int) (*IPv6MTUInfo, error)
  func  GetsockoptIPv6Mreq                func(fd int, level int, opt int) (*IPv6Mreq, error)
  func  GetsockoptInet4Addr               func(fd int, level int, opt int) (value [4]byte, err error)
  func  GetsockoptInt                     func(fd int, level int, opt int) (value int, err error)
  func  GetsockoptUcred                   func(fd int, level int, opt int) (*Ucred, error)
  func  Gettid                            func() (tid int)
  func  Gettimeofday                      func(tv *Timeval) (err error)
  func  Getuid                            func() (uid int)
  func  Getwd                             func() (wd string, err error)
  func  Getxattr                          func(path string, attr string, dest []byte) (sz int, err error)
  const HUPCL                             HUPCL = 1024:untyped int
  const ICANON                            ICANON = 2:untyped int
  const ICMPV6_FILTER                     ICMPV6_FILTER = 1:untyped int
  type  ICMPv6Filter                      struct{Data [8]uint32}
  const ICRNL                             ICRNL = 256:untyped int
  const IEXTEN                            IEXTEN = 32768:untyped int
  const IFA_ADDRESS                       IFA_ADDRESS = 1:untyped int
  const IFA_ANYCAST                       IFA_ANYCAST = 5:untyped int
  const IFA_BROADCAST                     IFA_BROADCAST = 4:untyped int
  const IFA_CACHEINFO                     IFA_CACHEINFO = 6:untyped int
  const IFA_F_DADFAILED                   IFA_F_DADFAILED = 8:untyped int
  const IFA_F_DEPRECATED                  IFA_F_DEPRECATED = 32:untyped int
  const IFA_F_HOMEADDRESS                 IFA_F_HOMEADDRESS = 16:untyped int
  const IFA_F_NODAD                       IFA_F_NODAD = 2:untyped int
  const IFA_F_OPTIMISTIC                  IFA_F_OPTIMISTIC = 4:untyped int
  const IFA_F_PERMANENT                   IFA_F_PERMANENT = 128:untyped int
  const IFA_F_SECONDARY                   IFA_F_SECONDARY = 1:untyped int
  const IFA_F_TEMPORARY                   IFA_F_TEMPORARY = 1:untyped int
  const IFA_F_TENTATIVE                   IFA_F_TENTATIVE = 64:untyped int
  const IFA_LABEL                         IFA_LABEL = 3:untyped int
  const IFA_LOCAL                         IFA_LOCAL = 2:untyped int
  const IFA_MAX                           IFA_MAX = 7:untyped int
  const IFA_MULTICAST                     IFA_MULTICAST = 7:untyped int
  const IFA_UNSPEC                        IFA_UNSPEC = 0:untyped int
  const IFF_ALLMULTI                      IFF_ALLMULTI = 512:untyped int
  const IFF_AUTOMEDIA                     IFF_AUTOMEDIA = 16384:untyped int
  const IFF_BROADCAST                     IFF_BROADCAST = 2:untyped int
  const IFF_DEBUG                         IFF_DEBUG = 4:untyped int
  const IFF_DYNAMIC                       IFF_DYNAMIC = 32768:untyped int
  const IFF_LOOPBACK                      IFF_LOOPBACK = 8:untyped int
  const IFF_MASTER                        IFF_MASTER = 1024:untyped int
  const IFF_MULTICAST                     IFF_MULTICAST = 4096:untyped int
  const IFF_NOARP                         IFF_NOARP = 128:untyped int
  const IFF_NOTRAILERS                    IFF_NOTRAILERS = 32:untyped int
  const IFF_NO_PI                         IFF_NO_PI = 4096:untyped int
  const IFF_ONE_QUEUE                     IFF_ONE_QUEUE = 8192:untyped int
  const IFF_POINTOPOINT                   IFF_POINTOPOINT = 16:untyped int
  const IFF_PORTSEL                       IFF_PORTSEL = 8192:untyped int
  const IFF_PROMISC                       IFF_PROMISC = 256:untyped int
  const IFF_RUNNING                       IFF_RUNNING = 64:untyped int
  const IFF_SLAVE                         IFF_SLAVE = 2048:untyped int
  const IFF_TAP                           IFF_TAP = 2:untyped int
  const IFF_TUN                           IFF_TUN = 1:untyped int
  const IFF_TUN_EXCL                      IFF_TUN_EXCL = 32768:untyped int
  const IFF_UP                            IFF_UP = 1:untyped int
  const IFF_VNET_HDR                      IFF_VNET_HDR = 16384:untyped int
  const IFLA_ADDRESS                      IFLA_ADDRESS = 1:untyped int
  const IFLA_BROADCAST                    IFLA_BROADCAST = 2:untyped int
  const IFLA_COST                         IFLA_COST = 8:untyped int
  const IFLA_IFALIAS                      IFLA_IFALIAS = 20:untyped int
  const IFLA_IFNAME                       IFLA_IFNAME = 3:untyped int
  const IFLA_LINK                         IFLA_LINK = 5:untyped int
  const IFLA_LINKINFO                     IFLA_LINKINFO = 18:untyped int
  const IFLA_LINKMODE                     IFLA_LINKMODE = 17:untyped int
  const IFLA_MAP                          IFLA_MAP = 14:untyped int
  const IFLA_MASTER                       IFLA_MASTER = 10:untyped int
  const IFLA_MAX                          IFLA_MAX = 29:untyped int
  const IFLA_MTU                          IFLA_MTU = 4:untyped int
  const IFLA_NET_NS_PID                   IFLA_NET_NS_PID = 19:untyped int
  const IFLA_OPERSTATE                    IFLA_OPERSTATE = 16:untyped int
  const IFLA_PRIORITY                     IFLA_PRIORITY = 9:untyped int
  const IFLA_PROTINFO                     IFLA_PROTINFO = 12:untyped int
  const IFLA_QDISC                        IFLA_QDISC = 6:untyped int
  const IFLA_STATS                        IFLA_STATS = 7:untyped int
  const IFLA_TXQLEN                       IFLA_TXQLEN = 13:untyped int
  const IFLA_UNSPEC                       IFLA_UNSPEC = 0:untyped int
  const IFLA_WEIGHT                       IFLA_WEIGHT = 15:untyped int
  const IFLA_WIRELESS                     IFLA_WIRELESS = 11:untyped int
  const IFNAMSIZ                          IFNAMSIZ = 16:untyped int
  const IGNBRK                            IGNBRK = 1:untyped int
  const IGNCR                             IGNCR = 128:untyped int
  const IGNPAR                            IGNPAR = 4:untyped int
  const IMAXBEL                           IMAXBEL = 8192:untyped int
  const INLCR                             INLCR = 64:untyped int
  const INPCK                             INPCK = 16:untyped int
  const IN_ACCESS                         IN_ACCESS = 1:untyped int
  const IN_ALL_EVENTS                     IN_ALL_EVENTS = 4095:untyped int
  const IN_ATTRIB                         IN_ATTRIB = 4:untyped int
  const IN_CLASSA_HOST                    IN_CLASSA_HOST = 16777215:untyped int
  const IN_CLASSA_MAX                     IN_CLASSA_MAX = 128:untyped int
  const IN_CLASSA_NET                     IN_CLASSA_NET = 4278190080:untyped int
  const IN_CLASSA_NSHIFT                  IN_CLASSA_NSHIFT = 24:untyped int
  const IN_CLASSB_HOST                    IN_CLASSB_HOST = 65535:untyped int
  const IN_CLASSB_MAX                     IN_CLASSB_MAX = 65536:untyped int
  const IN_CLASSB_NET                     IN_CLASSB_NET = 4294901760:untyped int
  const IN_CLASSB_NSHIFT                  IN_CLASSB_NSHIFT = 16:untyped int
  const IN_CLASSC_HOST                    IN_CLASSC_HOST = 255:untyped int
  const IN_CLASSC_NET                     IN_CLASSC_NET = 4294967040:untyped int
  const IN_CLASSC_NSHIFT                  IN_CLASSC_NSHIFT = 8:untyped int
  const IN_CLOEXEC                        IN_CLOEXEC = 524288:untyped int
  const IN_CLOSE                          IN_CLOSE = 24:untyped int
  const IN_CLOSE_NOWRITE                  IN_CLOSE_NOWRITE = 16:untyped int
  const IN_CLOSE_WRITE                    IN_CLOSE_WRITE = 8:untyped int
  const IN_CREATE                         IN_CREATE = 256:untyped int
  const IN_DELETE                         IN_DELETE = 512:untyped int
  const IN_DELETE_SELF                    IN_DELETE_SELF = 1024:untyped int
  const IN_DONT_FOLLOW                    IN_DONT_FOLLOW = 33554432:untyped int
  const IN_EXCL_UNLINK                    IN_EXCL_UNLINK = 67108864:untyped int
  const IN_IGNORED                        IN_IGNORED = 32768:untyped int
  const IN_ISDIR                          IN_ISDIR = 1073741824:untyped int
  const IN_LOOPBACKNET                    IN_LOOPBACKNET = 127:untyped int
  const IN_MASK_ADD                       IN_MASK_ADD = 536870912:untyped int
  const IN_MODIFY                         IN_MODIFY = 2:untyped int
  const IN_MOVE                           IN_MOVE = 192:untyped int
  const IN_MOVED_FROM                     IN_MOVED_FROM = 64:untyped int
  const IN_MOVED_TO                       IN_MOVED_TO = 128:untyped int
  const IN_MOVE_SELF                      IN_MOVE_SELF = 2048:untyped int
  const IN_NONBLOCK                       IN_NONBLOCK = 2048:untyped int
  const IN_ONESHOT                        IN_ONESHOT = 2147483648:untyped int
  const IN_ONLYDIR                        IN_ONLYDIR = 16777216:untyped int
  const IN_OPEN                           IN_OPEN = 32:untyped int
  const IN_Q_OVERFLOW                     IN_Q_OVERFLOW = 16384:untyped int
  const IN_UNMOUNT                        IN_UNMOUNT = 8192:untyped int
  type  IPMreq                            struct{Multiaddr [4]byte; Interface [4]byte}
  type  IPMreqn                           struct{Multiaddr [4]byte; Address [4]byte; Ifindex int32}
  const IPPROTO_AH                        IPPROTO_AH = 51:untyped int
  const IPPROTO_COMP                      IPPROTO_COMP = 108:untyped int
  const IPPROTO_DCCP                      IPPROTO_DCCP = 33:untyped int
  const IPPROTO_DSTOPTS                   IPPROTO_DSTOPTS = 60:untyped int
  const IPPROTO_EGP                       IPPROTO_EGP = 8:untyped int
  const IPPROTO_ENCAP                     IPPROTO_ENCAP = 98:untyped int
  const IPPROTO_ESP                       IPPROTO_ESP = 50:untyped int
  const IPPROTO_FRAGMENT                  IPPROTO_FRAGMENT = 44:untyped int
  const IPPROTO_GRE                       IPPROTO_GRE = 47:untyped int
  const IPPROTO_HOPOPTS                   IPPROTO_HOPOPTS = 0:untyped int
  const IPPROTO_ICMP                      IPPROTO_ICMP = 1:untyped int
  const IPPROTO_ICMPV6                    IPPROTO_ICMPV6 = 58:untyped int
  const IPPROTO_IDP                       IPPROTO_IDP = 22:untyped int
  const IPPROTO_IGMP                      IPPROTO_IGMP = 2:untyped int
  const IPPROTO_IP                        IPPROTO_IP = 0:untyped int
  const IPPROTO_IPIP                      IPPROTO_IPIP = 4:untyped int
  const IPPROTO_IPV6                      IPPROTO_IPV6 = 41:untyped int
  const IPPROTO_MTP                       IPPROTO_MTP = 92:untyped int
  const IPPROTO_NONE                      IPPROTO_NONE = 59:untyped int
  const IPPROTO_PIM                       IPPROTO_PIM = 103:untyped int
  const IPPROTO_PUP                       IPPROTO_PUP = 12:untyped int
  const IPPROTO_RAW                       IPPROTO_RAW = 255:untyped int
  const IPPROTO_ROUTING                   IPPROTO_ROUTING = 43:untyped int
  const IPPROTO_RSVP                      IPPROTO_RSVP = 46:untyped int
  const IPPROTO_SCTP                      IPPROTO_SCTP = 132:untyped int
  const IPPROTO_TCP                       IPPROTO_TCP = 6:untyped int
  const IPPROTO_TP                        IPPROTO_TP = 29:untyped int
  const IPPROTO_UDP                       IPPROTO_UDP = 17:untyped int
  const IPPROTO_UDPLITE                   IPPROTO_UDPLITE = 136:untyped int
  const IPV6_2292DSTOPTS                  IPV6_2292DSTOPTS = 4:untyped int
  const IPV6_2292HOPLIMIT                 IPV6_2292HOPLIMIT = 8:untyped int
  const IPV6_2292HOPOPTS                  IPV6_2292HOPOPTS = 3:untyped int
  const IPV6_2292PKTINFO                  IPV6_2292PKTINFO = 2:untyped int
  const IPV6_2292PKTOPTIONS               IPV6_2292PKTOPTIONS = 6:untyped int
  const IPV6_2292RTHDR                    IPV6_2292RTHDR = 5:untyped int
  const IPV6_ADDRFORM                     IPV6_ADDRFORM = 1:untyped int
  const IPV6_ADD_MEMBERSHIP               IPV6_ADD_MEMBERSHIP = 20:untyped int
  const IPV6_AUTHHDR                      IPV6_AUTHHDR = 10:untyped int
  const IPV6_CHECKSUM                     IPV6_CHECKSUM = 7:untyped int
  const IPV6_DROP_MEMBERSHIP              IPV6_DROP_MEMBERSHIP = 21:untyped int
  const IPV6_DSTOPTS                      IPV6_DSTOPTS = 59:untyped int
  const IPV6_HOPLIMIT                     IPV6_HOPLIMIT = 52:untyped int
  const IPV6_HOPOPTS                      IPV6_HOPOPTS = 54:untyped int
  const IPV6_IPSEC_POLICY                 IPV6_IPSEC_POLICY = 34:untyped int
  const IPV6_JOIN_ANYCAST                 IPV6_JOIN_ANYCAST = 27:untyped int
  const IPV6_JOIN_GROUP                   IPV6_JOIN_GROUP = 20:untyped int
  const IPV6_LEAVE_ANYCAST                IPV6_LEAVE_ANYCAST = 28:untyped int
  const IPV6_LEAVE_GROUP                  IPV6_LEAVE_GROUP = 21:untyped int
  const IPV6_MTU                          IPV6_MTU = 24:untyped int
  const IPV6_MTU_DISCOVER                 IPV6_MTU_DISCOVER = 23:untyped int
  const IPV6_MULTICAST_HOPS               IPV6_MULTICAST_HOPS = 18:untyped int
  const IPV6_MULTICAST_IF                 IPV6_MULTICAST_IF = 17:untyped int
  const IPV6_MULTICAST_LOOP               IPV6_MULTICAST_LOOP = 19:untyped int
  const IPV6_NEXTHOP                      IPV6_NEXTHOP = 9:untyped int
  const IPV6_PKTINFO                      IPV6_PKTINFO = 50:untyped int
  const IPV6_PMTUDISC_DO                  IPV6_PMTUDISC_DO = 2:untyped int
  const IPV6_PMTUDISC_DONT                IPV6_PMTUDISC_DONT = 0:untyped int
  const IPV6_PMTUDISC_PROBE               IPV6_PMTUDISC_PROBE = 3:untyped int
  const IPV6_PMTUDISC_WANT                IPV6_PMTUDISC_WANT = 1:untyped int
  const IPV6_RECVDSTOPTS                  IPV6_RECVDSTOPTS = 58:untyped int
  const IPV6_RECVERR                      IPV6_RECVERR = 25:untyped int
  const IPV6_RECVHOPLIMIT                 IPV6_RECVHOPLIMIT = 51:untyped int
  const IPV6_RECVHOPOPTS                  IPV6_RECVHOPOPTS = 53:untyped int
  const IPV6_RECVPKTINFO                  IPV6_RECVPKTINFO = 49:untyped int
  const IPV6_RECVRTHDR                    IPV6_RECVRTHDR = 56:untyped int
  const IPV6_RECVTCLASS                   IPV6_RECVTCLASS = 66:untyped int
  const IPV6_ROUTER_ALERT                 IPV6_ROUTER_ALERT = 22:untyped int
  const IPV6_RTHDR                        IPV6_RTHDR = 57:untyped int
  const IPV6_RTHDRDSTOPTS                 IPV6_RTHDRDSTOPTS = 55:untyped int
  const IPV6_RTHDR_LOOSE                  IPV6_RTHDR_LOOSE = 0:untyped int
  const IPV6_RTHDR_STRICT                 IPV6_RTHDR_STRICT = 1:untyped int
  const IPV6_RTHDR_TYPE_0                 IPV6_RTHDR_TYPE_0 = 0:untyped int
  const IPV6_RXDSTOPTS                    IPV6_RXDSTOPTS = 59:untyped int
  const IPV6_RXHOPOPTS                    IPV6_RXHOPOPTS = 54:untyped int
  const IPV6_TCLASS                       IPV6_TCLASS = 67:untyped int
  const IPV6_UNICAST_HOPS                 IPV6_UNICAST_HOPS = 16:untyped int
  const IPV6_V6ONLY                       IPV6_V6ONLY = 26:untyped int
  const IPV6_XFRM_POLICY                  IPV6_XFRM_POLICY = 35:untyped int
  const IP_ADD_MEMBERSHIP                 IP_ADD_MEMBERSHIP = 35:untyped int
  const IP_ADD_SOURCE_MEMBERSHIP          IP_ADD_SOURCE_MEMBERSHIP = 39:untyped int
  const IP_BLOCK_SOURCE                   IP_BLOCK_SOURCE = 38:untyped int
  const IP_DEFAULT_MULTICAST_LOOP         IP_DEFAULT_MULTICAST_LOOP = 1:untyped int
  const IP_DEFAULT_MULTICAST_TTL          IP_DEFAULT_MULTICAST_TTL = 1:untyped int
  const IP_DF                             IP_DF = 16384:untyped int
  const IP_DROP_MEMBERSHIP                IP_DROP_MEMBERSHIP = 36:untyped int
  const IP_DROP_SOURCE_MEMBERSHIP         IP_DROP_SOURCE_MEMBERSHIP = 40:untyped int
  const IP_FREEBIND                       IP_FREEBIND = 15:untyped int
  const IP_HDRINCL                        IP_HDRINCL = 3:untyped int
  const IP_IPSEC_POLICY                   IP_IPSEC_POLICY = 16:untyped int
  const IP_MAXPACKET                      IP_MAXPACKET = 65535:untyped int
  const IP_MAX_MEMBERSHIPS                IP_MAX_MEMBERSHIPS = 20:untyped int
  const IP_MF                             IP_MF = 8192:untyped int
  const IP_MINTTL                         IP_MINTTL = 21:untyped int
  const IP_MSFILTER                       IP_MSFILTER = 41:untyped int
  const IP_MSS                            IP_MSS = 576:untyped int
  const IP_MTU                            IP_MTU = 14:untyped int
  const IP_MTU_DISCOVER                   IP_MTU_DISCOVER = 10:untyped int
  const IP_MULTICAST_IF                   IP_MULTICAST_IF = 32:untyped int
  const IP_MULTICAST_LOOP                 IP_MULTICAST_LOOP = 34:untyped int
  const IP_MULTICAST_TTL                  IP_MULTICAST_TTL = 33:untyped int
  const IP_OFFMASK                        IP_OFFMASK = 8191:untyped int
  const IP_OPTIONS                        IP_OPTIONS = 4:untyped int
  const IP_ORIGDSTADDR                    IP_ORIGDSTADDR = 20:untyped int
  const IP_PASSSEC                        IP_PASSSEC = 18:untyped int
  const IP_PKTINFO                        IP_PKTINFO = 8:untyped int
  const IP_PKTOPTIONS                     IP_PKTOPTIONS = 9:untyped int
  const IP_PMTUDISC                       IP_PMTUDISC = 10:untyped int
  const IP_PMTUDISC_DO                    IP_PMTUDISC_DO = 2:untyped int
  const IP_PMTUDISC_DONT                  IP_PMTUDISC_DONT = 0:untyped int
  const IP_PMTUDISC_PROBE                 IP_PMTUDISC_PROBE = 3:untyped int
  const IP_PMTUDISC_WANT                  IP_PMTUDISC_WANT = 1:untyped int
  const IP_RECVERR                        IP_RECVERR = 11:untyped int
  const IP_RECVOPTS                       IP_RECVOPTS = 6:untyped int
  const IP_RECVORIGDSTADDR                IP_RECVORIGDSTADDR = 20:untyped int
  const IP_RECVRETOPTS                    IP_RECVRETOPTS = 7:untyped int
  const IP_RECVTOS                        IP_RECVTOS = 13:untyped int
  const IP_RECVTTL                        IP_RECVTTL = 12:untyped int
  const IP_RETOPTS                        IP_RETOPTS = 7:untyped int
  const IP_RF                             IP_RF = 32768:untyped int
  const IP_ROUTER_ALERT                   IP_ROUTER_ALERT = 5:untyped int
  const IP_TOS                            IP_TOS = 1:untyped int
  const IP_TRANSPARENT                    IP_TRANSPARENT = 19:untyped int
  const IP_TTL                            IP_TTL = 2:untyped int
  const IP_UNBLOCK_SOURCE                 IP_UNBLOCK_SOURCE = 37:untyped int
  const IP_XFRM_POLICY                    IP_XFRM_POLICY = 17:untyped int
  type  IPv6MTUInfo                       struct{Addr RawSockaddrInet6; Mtu uint32}
  type  IPv6Mreq                          struct{Multiaddr [16]byte; Interface uint32}
  const ISIG                              ISIG = 1:untyped int
  const ISTRIP                            ISTRIP = 32:untyped int
  const IUCLC                             IUCLC = 512:untyped int
  const IUTF8                             IUTF8 = 16384:untyped int
  const IXANY                             IXANY = 2048:untyped int
  const IXOFF                             IXOFF = 4096:untyped int
  const IXON                              IXON = 1024:untyped int
  type  IfAddrmsg                         struct{Family uint8; Prefixlen uint8; Flags uint8; Scope uint8; Index uint32}
  type  IfInfomsg                         struct{Family uint8; X__ifi_pad uint8; Type uint16; Index int32; Flags uint32; Change uint32}
  const ImplementsGetwd                   ImplementsGetwd = true:untyped bool
  type  Inet4Pktinfo                      struct{Ifindex int32; Spec_dst [4]byte; Addr [4]byte}
  type  Inet6Pktinfo                      struct{Addr [16]byte; Ifindex uint32}
  func  InotifyAddWatch                   func(fd int, pathname string, mask uint32) (watchdesc int, err error)
  type  InotifyEvent                      struct{Wd int32; Mask uint32; Cookie uint32; Len uint32; Name [0]uint8}
  func  InotifyInit                       func() (fd int, err error)
  func  InotifyInit1                      func(flags int) (fd int, err error)
  func  InotifyRmWatch                    func(fd int, watchdesc uint32) (success int, err error)
  func  Ioperm                            func(from int, num int, on int) (err error)
  func  Iopl                              func(level int) (err error)
  type  Iovec                             struct{Base *byte; Len uint64}
    method (*Iovec) SetLen(length int)
  func  Kill                              func(pid int, sig Signal) (err error)
  func  Klogctl                           func(typ int, buf []byte) (n int, err error)
  const LINUX_REBOOT_CMD_CAD_OFF          LINUX_REBOOT_CMD_CAD_OFF = 0:untyped int
  const LINUX_REBOOT_CMD_CAD_ON           LINUX_REBOOT_CMD_CAD_ON = 2309737967:untyped int
  const LINUX_REBOOT_CMD_HALT             LINUX_REBOOT_CMD_HALT = 3454992675:untyped int
  const LINUX_REBOOT_CMD_KEXEC            LINUX_REBOOT_CMD_KEXEC = 1163412803:untyped int
  const LINUX_REBOOT_CMD_POWER_OFF        LINUX_REBOOT_CMD_POWER_OFF = 1126301404:untyped int
  const LINUX_REBOOT_CMD_RESTART          LINUX_REBOOT_CMD_RESTART = 19088743:untyped int
  const LINUX_REBOOT_CMD_RESTART2         LINUX_REBOOT_CMD_RESTART2 = 2712847316:untyped int
  const LINUX_REBOOT_CMD_SW_SUSPEND       LINUX_REBOOT_CMD_SW_SUSPEND = 3489725666:untyped int
  const LINUX_REBOOT_MAGIC1               LINUX_REBOOT_MAGIC1 = 4276215469:untyped int
  const LINUX_REBOOT_MAGIC2               LINUX_REBOOT_MAGIC2 = 672274793:untyped int
  const LOCK_EX                           LOCK_EX = 2:untyped int
  const LOCK_NB                           LOCK_NB = 4:untyped int
  const LOCK_SH                           LOCK_SH = 1:untyped int
  const LOCK_UN                           LOCK_UN = 8:untyped int
  func  Lchown                            func(path string, uid int, gid int) (err error)
  type  Linger                            struct{Onoff int32; Linger int32}
  func  Link                              func(oldpath string, newpath string) (err error)
  func  Listen                            func(s int, n int) (err error)
  func  Listxattr                         func(path string, dest []byte) (sz int, err error)
  func  LsfJump                           func(code int, k int, jt int, jf int) *SockFilter
  func  LsfSocket                         func(ifindex int, proto int) (int, error)
  func  LsfStmt                           func(code int, k int) *SockFilter
  func  Lstat                             func(path string, stat *Stat_t) (err error)
  const MADV_DOFORK                       MADV_DOFORK = 11:untyped int
  const MADV_DONTFORK                     MADV_DONTFORK = 10:untyped int
  const MADV_DONTNEED                     MADV_DONTNEED = 4:untyped int
  const MADV_HUGEPAGE                     MADV_HUGEPAGE = 14:untyped int
  const MADV_HWPOISON                     MADV_HWPOISON = 100:untyped int
  const MADV_MERGEABLE                    MADV_MERGEABLE = 12:untyped int
  const MADV_NOHUGEPAGE                   MADV_NOHUGEPAGE = 15:untyped int
  const MADV_NORMAL                       MADV_NORMAL = 0:untyped int
  const MADV_RANDOM                       MADV_RANDOM = 1:untyped int
  const MADV_REMOVE                       MADV_REMOVE = 9:untyped int
  const MADV_SEQUENTIAL                   MADV_SEQUENTIAL = 2:untyped int
  const MADV_UNMERGEABLE                  MADV_UNMERGEABLE = 13:untyped int
  const MADV_WILLNEED                     MADV_WILLNEED = 3:untyped int
  const MAP_32BIT                         MAP_32BIT = 64:untyped int
  const MAP_ANON                          MAP_ANON = 32:untyped int
  const MAP_ANONYMOUS                     MAP_ANONYMOUS = 32:untyped int
  const MAP_DENYWRITE                     MAP_DENYWRITE = 2048:untyped int
  const MAP_EXECUTABLE                    MAP_EXECUTABLE = 4096:untyped int
  const MAP_FILE                          MAP_FILE = 0:untyped int
  const MAP_FIXED                         MAP_FIXED = 16:untyped int
  const MAP_GROWSDOWN                     MAP_GROWSDOWN = 256:untyped int
  const MAP_HUGETLB                       MAP_HUGETLB = 262144:untyped int
  const MAP_LOCKED                        MAP_LOCKED = 8192:untyped int
  const MAP_NONBLOCK                      MAP_NONBLOCK = 65536:untyped int
  const MAP_NORESERVE                     MAP_NORESERVE = 16384:untyped int
  const MAP_POPULATE                      MAP_POPULATE = 32768:untyped int
  const MAP_PRIVATE                       MAP_PRIVATE = 2:untyped int
  const MAP_SHARED                        MAP_SHARED = 1:untyped int
  const MAP_STACK                         MAP_STACK = 131072:untyped int
  const MAP_TYPE                          MAP_TYPE = 15:untyped int
  const MCL_CURRENT                       MCL_CURRENT = 1:untyped int
  const MCL_FUTURE                        MCL_FUTURE = 2:untyped int
  const MNT_DETACH                        MNT_DETACH = 2:untyped int
  const MNT_EXPIRE                        MNT_EXPIRE = 4:untyped int
  const MNT_FORCE                         MNT_FORCE = 1:untyped int
  const MSG_CMSG_CLOEXEC                  MSG_CMSG_CLOEXEC = 1073741824:untyped int
  const MSG_CONFIRM                       MSG_CONFIRM = 2048:untyped int
  const MSG_CTRUNC                        MSG_CTRUNC = 8:untyped int
  const MSG_DONTROUTE                     MSG_DONTROUTE = 4:untyped int
  const MSG_DONTWAIT                      MSG_DONTWAIT = 64:untyped int
  const MSG_EOR                           MSG_EOR = 128:untyped int
  const MSG_ERRQUEUE                      MSG_ERRQUEUE = 8192:untyped int
  const MSG_FASTOPEN                      MSG_FASTOPEN = 536870912:untyped int
  const MSG_FIN                           MSG_FIN = 512:untyped int
  const MSG_MORE                          MSG_MORE = 32768:untyped int
  const MSG_NOSIGNAL                      MSG_NOSIGNAL = 16384:untyped int
  const MSG_OOB                           MSG_OOB = 1:untyped int
  const MSG_PEEK                          MSG_PEEK = 2:untyped int
  const MSG_PROXY                         MSG_PROXY = 16:untyped int
  const MSG_RST                           MSG_RST = 4096:untyped int
  const MSG_SYN                           MSG_SYN = 1024:untyped int
  const MSG_TRUNC                         MSG_TRUNC = 32:untyped int
  const MSG_TRYHARD                       MSG_TRYHARD = 4:untyped int
  const MSG_WAITALL                       MSG_WAITALL = 256:untyped int
  const MSG_WAITFORONE                    MSG_WAITFORONE = 65536:untyped int
  const MS_ACTIVE                         MS_ACTIVE = 1073741824:untyped int
  const MS_ASYNC                          MS_ASYNC = 1:untyped int
  const MS_BIND                           MS_BIND = 4096:untyped int
  const MS_DIRSYNC                        MS_DIRSYNC = 128:untyped int
  const MS_INVALIDATE                     MS_INVALIDATE = 2:untyped int
  const MS_I_VERSION                      MS_I_VERSION = 8388608:untyped int
  const MS_KERNMOUNT                      MS_KERNMOUNT = 4194304:untyped int
  const MS_MANDLOCK                       MS_MANDLOCK = 64:untyped int
  const MS_MGC_MSK                        MS_MGC_MSK = 4294901760:untyped int
  const MS_MGC_VAL                        MS_MGC_VAL = 3236757504:untyped int
  const MS_MOVE                           MS_MOVE = 8192:untyped int
  const MS_NOATIME                        MS_NOATIME = 1024:untyped int
  const MS_NODEV                          MS_NODEV = 4:untyped int
  const MS_NODIRATIME                     MS_NODIRATIME = 2048:untyped int
  const MS_NOEXEC                         MS_NOEXEC = 8:untyped int
  const MS_NOSUID                         MS_NOSUID = 2:untyped int
  const MS_NOUSER                         MS_NOUSER = -2147483648:untyped int
  const MS_POSIXACL                       MS_POSIXACL = 65536:untyped int
  const MS_PRIVATE                        MS_PRIVATE = 262144:untyped int
  const MS_RDONLY                         MS_RDONLY = 1:untyped int
  const MS_REC                            MS_REC = 16384:untyped int
  const MS_RELATIME                       MS_RELATIME = 2097152:untyped int
  const MS_REMOUNT                        MS_REMOUNT = 32:untyped int
  const MS_RMT_MASK                       MS_RMT_MASK = 8388689:untyped int
  const MS_SHARED                         MS_SHARED = 1048576:untyped int
  const MS_SILENT                         MS_SILENT = 32768:untyped int
  const MS_SLAVE                          MS_SLAVE = 524288:untyped int
  const MS_STRICTATIME                    MS_STRICTATIME = 16777216:untyped int
  const MS_SYNC                           MS_SYNC = 4:untyped int
  const MS_SYNCHRONOUS                    MS_SYNCHRONOUS = 16:untyped int
  const MS_UNBINDABLE                     MS_UNBINDABLE = 131072:untyped int
  func  Madvise                           func(b []byte, advice int) (err error)
  func  Mkdir                             func(path string, mode uint32) (err error)
  func  Mkdirat                           func(dirfd int, path string, mode uint32) (err error)
  func  Mkfifo                            func(path string, mode uint32) (err error)
  func  Mknod                             func(path string, mode uint32, dev int) (err error)
  func  Mknodat                           func(dirfd int, path string, mode uint32, dev int) (err error)
  func  Mlock                             func(b []byte) (err error)
  func  Mlockall                          func(flags int) (err error)
  func  Mmap                              func(fd int, offset int64, length int, prot int, flags int) (data []byte, err error)
  func  Mount                             func(source string, target string, fstype string, flags uintptr, data string) (err error)
  func  Mprotect                          func(b []byte, prot int) (err error)
  type  Msghdr                            struct{Name *byte; Namelen uint32; Pad_cgo_0 [4]byte; Iov *Iovec; Iovlen uint64; Control *byte; Controllen uint64; Flags int32; Pad_cgo_1 [4]byte}
    method (*Msghdr) SetControllen(length int)
  func  Munlock                           func(b []byte) (err error)
  func  Munlockall                        func() (err error)
  func  Munmap                            func(b []byte) (err error)
  const NAME_MAX                          NAME_MAX = 255:untyped int
  const NETLINK_ADD_MEMBERSHIP            NETLINK_ADD_MEMBERSHIP = 1:untyped int
  const NETLINK_AUDIT                     NETLINK_AUDIT = 9:untyped int
  const NETLINK_BROADCAST_ERROR           NETLINK_BROADCAST_ERROR = 4:untyped int
  const NETLINK_CONNECTOR                 NETLINK_CONNECTOR = 11:untyped int
  const NETLINK_DNRTMSG                   NETLINK_DNRTMSG = 14:untyped int
  const NETLINK_DROP_MEMBERSHIP           NETLINK_DROP_MEMBERSHIP = 2:untyped int
  const NETLINK_ECRYPTFS                  NETLINK_ECRYPTFS = 19:untyped int
  const NETLINK_FIB_LOOKUP                NETLINK_FIB_LOOKUP = 10:untyped int
  const NETLINK_FIREWALL                  NETLINK_FIREWALL = 3:untyped int
  const NETLINK_GENERIC                   NETLINK_GENERIC = 16:untyped int
  const NETLINK_INET_DIAG                 NETLINK_INET_DIAG = 4:untyped int
  const NETLINK_IP6_FW                    NETLINK_IP6_FW = 13:untyped int
  const NETLINK_ISCSI                     NETLINK_ISCSI = 8:untyped int
  const NETLINK_KOBJECT_UEVENT            NETLINK_KOBJECT_UEVENT = 15:untyped int
  const NETLINK_NETFILTER                 NETLINK_NETFILTER = 12:untyped int
  const NETLINK_NFLOG                     NETLINK_NFLOG = 5:untyped int
  const NETLINK_NO_ENOBUFS                NETLINK_NO_ENOBUFS = 5:untyped int
  const NETLINK_PKTINFO                   NETLINK_PKTINFO = 3:untyped int
  const NETLINK_ROUTE                     NETLINK_ROUTE = 0:untyped int
  const NETLINK_SCSITRANSPORT             NETLINK_SCSITRANSPORT = 18:untyped int
  const NETLINK_SELINUX                   NETLINK_SELINUX = 7:untyped int
  const NETLINK_UNUSED                    NETLINK_UNUSED = 1:untyped int
  const NETLINK_USERSOCK                  NETLINK_USERSOCK = 2:untyped int
  const NETLINK_XFRM                      NETLINK_XFRM = 6:untyped int
  const NLA_ALIGNTO                       NLA_ALIGNTO = 4:untyped int
  const NLA_F_NESTED                      NLA_F_NESTED = 32768:untyped int
  const NLA_F_NET_BYTEORDER               NLA_F_NET_BYTEORDER = 16384:untyped int
  const NLA_HDRLEN                        NLA_HDRLEN = 4:untyped int
  const NLMSG_ALIGNTO                     NLMSG_ALIGNTO = 4:untyped int
  const NLMSG_DONE                        NLMSG_DONE = 3:untyped int
  const NLMSG_ERROR                       NLMSG_ERROR = 2:untyped int
  const NLMSG_HDRLEN                      NLMSG_HDRLEN = 16:untyped int
  const NLMSG_MIN_TYPE                    NLMSG_MIN_TYPE = 16:untyped int
  const NLMSG_NOOP                        NLMSG_NOOP = 1:untyped int
  const NLMSG_OVERRUN                     NLMSG_OVERRUN = 4:untyped int
  const NLM_F_ACK                         NLM_F_ACK = 4:untyped int
  const NLM_F_APPEND                      NLM_F_APPEND = 2048:untyped int
  const NLM_F_ATOMIC                      NLM_F_ATOMIC = 1024:untyped int
  const NLM_F_CREATE                      NLM_F_CREATE = 1024:untyped int
  const NLM_F_DUMP                        NLM_F_DUMP = 768:untyped int
  const NLM_F_ECHO                        NLM_F_ECHO = 8:untyped int
  const NLM_F_EXCL                        NLM_F_EXCL = 512:untyped int
  const NLM_F_MATCH                       NLM_F_MATCH = 512:untyped int
  const NLM_F_MULTI                       NLM_F_MULTI = 2:untyped int
  const NLM_F_REPLACE                     NLM_F_REPLACE = 256:untyped int
  const NLM_F_REQUEST                     NLM_F_REQUEST = 1:untyped int
  const NLM_F_ROOT                        NLM_F_ROOT = 256:untyped int
  const NOFLSH                            NOFLSH = 128:untyped int
  func  Nanosleep                         func(time *Timespec, leftover *Timespec) (err error)
  type  NetlinkMessage                    struct{Header NlMsghdr; Data []byte}
  func  NetlinkRIB                        func(proto int, family int) ([]byte, error)
  type  NetlinkRouteAttr                  struct{Attr RtAttr; Value []byte}
  type  NetlinkRouteRequest               struct{Header NlMsghdr; Data RtGenmsg}
    method (*NetlinkRouteRequest) toWireFormat() []byte
  type  NlAttr                            struct{Len uint16; Type uint16}
  type  NlMsgerr                          struct{Error int32; Msg NlMsghdr}
  type  NlMsghdr                          struct{Len uint32; Type uint16; Flags uint16; Seq uint32; Pid uint32}
  func  NsecToTimespec                    func(nsec int64) (ts Timespec)
  func  NsecToTimeval                     func(nsec int64) (tv Timeval)
  const OCRNL                             OCRNL = 8:untyped int
  const OFDEL                             OFDEL = 128:untyped int
  const OFILL                             OFILL = 64:untyped int
  const OLCUC                             OLCUC = 2:untyped int
  const ONLCR                             ONLCR = 4:untyped int
  const ONLRET                            ONLRET = 32:untyped int
  const ONOCR                             ONOCR = 16:untyped int
  const OPOST                             OPOST = 1:untyped int
  const O_ACCMODE                         O_ACCMODE = 3:untyped int
  const O_APPEND                          O_APPEND = 1024:untyped int
  const O_ASYNC                           O_ASYNC = 8192:untyped int
  const O_CLOEXEC                         O_CLOEXEC = 524288:untyped int
  const O_CREAT                           O_CREAT = 64:untyped int
  const O_DIRECT                          O_DIRECT = 16384:untyped int
  const O_DIRECTORY                       O_DIRECTORY = 65536:untyped int
  const O_DSYNC                           O_DSYNC = 4096:untyped int
  const O_EXCL                            O_EXCL = 128:untyped int
  const O_FSYNC                           O_FSYNC = 1052672:untyped int
  const O_LARGEFILE                       O_LARGEFILE = 0:untyped int
  const O_NDELAY                          O_NDELAY = 2048:untyped int
  const O_NOATIME                         O_NOATIME = 262144:untyped int
  const O_NOCTTY                          O_NOCTTY = 256:untyped int
  const O_NOFOLLOW                        O_NOFOLLOW = 131072:untyped int
  const O_NONBLOCK                        O_NONBLOCK = 2048:untyped int
  const O_RDONLY                          O_RDONLY = 0:untyped int
  const O_RDWR                            O_RDWR = 2:untyped int
  const O_RSYNC                           O_RSYNC = 1052672:untyped int
  const O_SYNC                            O_SYNC = 1052672:untyped int
  const O_TRUNC                           O_TRUNC = 512:untyped int
  const O_WRONLY                          O_WRONLY = 1:untyped int
  func  Open                              func(path string, mode int, perm uint32) (fd int, err error)
  func  Openat                            func(dirfd int, path string, flags int, mode uint32) (fd int, err error)
  const PACKET_ADD_MEMBERSHIP             PACKET_ADD_MEMBERSHIP = 1:untyped int
  const PACKET_BROADCAST                  PACKET_BROADCAST = 1:untyped int
  const PACKET_DROP_MEMBERSHIP            PACKET_DROP_MEMBERSHIP = 2:untyped int
  const PACKET_FASTROUTE                  PACKET_FASTROUTE = 6:untyped int
  const PACKET_HOST                       PACKET_HOST = 0:untyped int
  const PACKET_LOOPBACK                   PACKET_LOOPBACK = 5:untyped int
  const PACKET_MR_ALLMULTI                PACKET_MR_ALLMULTI = 2:untyped int
  const PACKET_MR_MULTICAST               PACKET_MR_MULTICAST = 0:untyped int
  const PACKET_MR_PROMISC                 PACKET_MR_PROMISC = 1:untyped int
  const PACKET_MULTICAST                  PACKET_MULTICAST = 2:untyped int
  const PACKET_OTHERHOST                  PACKET_OTHERHOST = 3:untyped int
  const PACKET_OUTGOING                   PACKET_OUTGOING = 4:untyped int
  const PACKET_RECV_OUTPUT                PACKET_RECV_OUTPUT = 3:untyped int
  const PACKET_RX_RING                    PACKET_RX_RING = 5:untyped int
  const PACKET_STATISTICS                 PACKET_STATISTICS = 6:untyped int
  const PARENB                            PARENB = 256:untyped int
  const PARMRK                            PARMRK = 8:untyped int
  const PARODD                            PARODD = 512:untyped int
  const PENDIN                            PENDIN = 16384:untyped int
  const PRIO_PGRP                         PRIO_PGRP = 1:untyped int
  const PRIO_PROCESS                      PRIO_PROCESS = 0:untyped int
  const PRIO_USER                         PRIO_USER = 2:untyped int
  const PROT_EXEC                         PROT_EXEC = 4:untyped int
  const PROT_GROWSDOWN                    PROT_GROWSDOWN = 16777216:untyped int
  const PROT_GROWSUP                      PROT_GROWSUP = 33554432:untyped int
  const PROT_NONE                         PROT_NONE = 0:untyped int
  const PROT_READ                         PROT_READ = 1:untyped int
  const PROT_WRITE                        PROT_WRITE = 2:untyped int
  const PR_CAPBSET_DROP                   PR_CAPBSET_DROP = 24:untyped int
  const PR_CAPBSET_READ                   PR_CAPBSET_READ = 23:untyped int
  const PR_ENDIAN_BIG                     PR_ENDIAN_BIG = 0:untyped int
  const PR_ENDIAN_LITTLE                  PR_ENDIAN_LITTLE = 1:untyped int
  const PR_ENDIAN_PPC_LITTLE              PR_ENDIAN_PPC_LITTLE = 2:untyped int
  const PR_FPEMU_NOPRINT                  PR_FPEMU_NOPRINT = 1:untyped int
  const PR_FPEMU_SIGFPE                   PR_FPEMU_SIGFPE = 2:untyped int
  const PR_FP_EXC_ASYNC                   PR_FP_EXC_ASYNC = 2:untyped int
  const PR_FP_EXC_DISABLED                PR_FP_EXC_DISABLED = 0:untyped int
  const PR_FP_EXC_DIV                     PR_FP_EXC_DIV = 65536:untyped int
  const PR_FP_EXC_INV                     PR_FP_EXC_INV = 1048576:untyped int
  const PR_FP_EXC_NONRECOV                PR_FP_EXC_NONRECOV = 1:untyped int
  const PR_FP_EXC_OVF                     PR_FP_EXC_OVF = 131072:untyped int
  const PR_FP_EXC_PRECISE                 PR_FP_EXC_PRECISE = 3:untyped int
  const PR_FP_EXC_RES                     PR_FP_EXC_RES = 524288:untyped int
  const PR_FP_EXC_SW_ENABLE               PR_FP_EXC_SW_ENABLE = 128:untyped int
  const PR_FP_EXC_UND                     PR_FP_EXC_UND = 262144:untyped int
  const PR_GET_DUMPABLE                   PR_GET_DUMPABLE = 3:untyped int
  const PR_GET_ENDIAN                     PR_GET_ENDIAN = 19:untyped int
  const PR_GET_FPEMU                      PR_GET_FPEMU = 9:untyped int
  const PR_GET_FPEXC                      PR_GET_FPEXC = 11:untyped int
  const PR_GET_KEEPCAPS                   PR_GET_KEEPCAPS = 7:untyped int
  const PR_GET_NAME                       PR_GET_NAME = 16:untyped int
  const PR_GET_PDEATHSIG                  PR_GET_PDEATHSIG = 2:untyped int
  const PR_GET_SECCOMP                    PR_GET_SECCOMP = 21:untyped int
  const PR_GET_SECUREBITS                 PR_GET_SECUREBITS = 27:untyped int
  const PR_GET_TIMERSLACK                 PR_GET_TIMERSLACK = 30:untyped int
  const PR_GET_TIMING                     PR_GET_TIMING = 13:untyped int
  const PR_GET_TSC                        PR_GET_TSC = 25:untyped int
  const PR_GET_UNALIGN                    PR_GET_UNALIGN = 5:untyped int
  const PR_MCE_KILL                       PR_MCE_KILL = 33:untyped int
  const PR_MCE_KILL_CLEAR                 PR_MCE_KILL_CLEAR = 0:untyped int
  const PR_MCE_KILL_DEFAULT               PR_MCE_KILL_DEFAULT = 2:untyped int
  const PR_MCE_KILL_EARLY                 PR_MCE_KILL_EARLY = 1:untyped int
  const PR_MCE_KILL_GET                   PR_MCE_KILL_GET = 34:untyped int
  const PR_MCE_KILL_LATE                  PR_MCE_KILL_LATE = 0:untyped int
  const PR_MCE_KILL_SET                   PR_MCE_KILL_SET = 1:untyped int
  const PR_SET_DUMPABLE                   PR_SET_DUMPABLE = 4:untyped int
  const PR_SET_ENDIAN                     PR_SET_ENDIAN = 20:untyped int
  const PR_SET_FPEMU                      PR_SET_FPEMU = 10:untyped int
  const PR_SET_FPEXC                      PR_SET_FPEXC = 12:untyped int
  const PR_SET_KEEPCAPS                   PR_SET_KEEPCAPS = 8:untyped int
  const PR_SET_NAME                       PR_SET_NAME = 15:untyped int
  const PR_SET_PDEATHSIG                  PR_SET_PDEATHSIG = 1:untyped int
  const PR_SET_PTRACER                    PR_SET_PTRACER = 1499557217:untyped int
  const PR_SET_SECCOMP                    PR_SET_SECCOMP = 22:untyped int
  const PR_SET_SECUREBITS                 PR_SET_SECUREBITS = 28:untyped int
  const PR_SET_TIMERSLACK                 PR_SET_TIMERSLACK = 29:untyped int
  const PR_SET_TIMING                     PR_SET_TIMING = 14:untyped int
  const PR_SET_TSC                        PR_SET_TSC = 26:untyped int
  const PR_SET_UNALIGN                    PR_SET_UNALIGN = 6:untyped int
  const PR_TASK_PERF_EVENTS_DISABLE       PR_TASK_PERF_EVENTS_DISABLE = 31:untyped int
  const PR_TASK_PERF_EVENTS_ENABLE        PR_TASK_PERF_EVENTS_ENABLE = 32:untyped int
  const PR_TIMING_STATISTICAL             PR_TIMING_STATISTICAL = 0:untyped int
  const PR_TIMING_TIMESTAMP               PR_TIMING_TIMESTAMP = 1:untyped int
  const PR_TSC_ENABLE                     PR_TSC_ENABLE = 1:untyped int
  const PR_TSC_SIGSEGV                    PR_TSC_SIGSEGV = 2:untyped int
  const PR_UNALIGN_NOPRINT                PR_UNALIGN_NOPRINT = 1:untyped int
  const PR_UNALIGN_SIGBUS                 PR_UNALIGN_SIGBUS = 2:untyped int
  const PTRACE_ARCH_PRCTL                 PTRACE_ARCH_PRCTL = 30:untyped int
  const PTRACE_ATTACH                     PTRACE_ATTACH = 16:untyped int
  const PTRACE_CONT                       PTRACE_CONT = 7:untyped int
  const PTRACE_DETACH                     PTRACE_DETACH = 17:untyped int
  const PTRACE_EVENT_CLONE                PTRACE_EVENT_CLONE = 3:untyped int
  const PTRACE_EVENT_EXEC                 PTRACE_EVENT_EXEC = 4:untyped int
  const PTRACE_EVENT_EXIT                 PTRACE_EVENT_EXIT = 6:untyped int
  const PTRACE_EVENT_FORK                 PTRACE_EVENT_FORK = 1:untyped int
  const PTRACE_EVENT_VFORK                PTRACE_EVENT_VFORK = 2:untyped int
  const PTRACE_EVENT_VFORK_DONE           PTRACE_EVENT_VFORK_DONE = 5:untyped int
  const PTRACE_GETEVENTMSG                PTRACE_GETEVENTMSG = 16897:untyped int
  const PTRACE_GETFPREGS                  PTRACE_GETFPREGS = 14:untyped int
  const PTRACE_GETFPXREGS                 PTRACE_GETFPXREGS = 18:untyped int
  const PTRACE_GETREGS                    PTRACE_GETREGS = 12:untyped int
  const PTRACE_GETREGSET                  PTRACE_GETREGSET = 16900:untyped int
  const PTRACE_GETSIGINFO                 PTRACE_GETSIGINFO = 16898:untyped int
  const PTRACE_GET_THREAD_AREA            PTRACE_GET_THREAD_AREA = 25:untyped int
  const PTRACE_KILL                       PTRACE_KILL = 8:untyped int
  const PTRACE_OLDSETOPTIONS              PTRACE_OLDSETOPTIONS = 21:untyped int
  const PTRACE_O_MASK                     PTRACE_O_MASK = 127:untyped int
  const PTRACE_O_TRACECLONE               PTRACE_O_TRACECLONE = 8:untyped int
  const PTRACE_O_TRACEEXEC                PTRACE_O_TRACEEXEC = 16:untyped int
  const PTRACE_O_TRACEEXIT                PTRACE_O_TRACEEXIT = 64:untyped int
  const PTRACE_O_TRACEFORK                PTRACE_O_TRACEFORK = 2:untyped int
  const PTRACE_O_TRACESYSGOOD             PTRACE_O_TRACESYSGOOD = 1:untyped int
  const PTRACE_O_TRACEVFORK               PTRACE_O_TRACEVFORK = 4:untyped int
  const PTRACE_O_TRACEVFORKDONE           PTRACE_O_TRACEVFORKDONE = 32:untyped int
  const PTRACE_PEEKDATA                   PTRACE_PEEKDATA = 2:untyped int
  const PTRACE_PEEKTEXT                   PTRACE_PEEKTEXT = 1:untyped int
  const PTRACE_PEEKUSR                    PTRACE_PEEKUSR = 3:untyped int
  const PTRACE_POKEDATA                   PTRACE_POKEDATA = 5:untyped int
  const PTRACE_POKETEXT                   PTRACE_POKETEXT = 4:untyped int
  const PTRACE_POKEUSR                    PTRACE_POKEUSR = 6:untyped int
  const PTRACE_SETFPREGS                  PTRACE_SETFPREGS = 15:untyped int
  const PTRACE_SETFPXREGS                 PTRACE_SETFPXREGS = 19:untyped int
  const PTRACE_SETOPTIONS                 PTRACE_SETOPTIONS = 16896:untyped int
  const PTRACE_SETREGS                    PTRACE_SETREGS = 13:untyped int
  const PTRACE_SETREGSET                  PTRACE_SETREGSET = 16901:untyped int
  const PTRACE_SETSIGINFO                 PTRACE_SETSIGINFO = 16899:untyped int
  const PTRACE_SET_THREAD_AREA            PTRACE_SET_THREAD_AREA = 26:untyped int
  const PTRACE_SINGLEBLOCK                PTRACE_SINGLEBLOCK = 33:untyped int
  const PTRACE_SINGLESTEP                 PTRACE_SINGLESTEP = 9:untyped int
  const PTRACE_SYSCALL                    PTRACE_SYSCALL = 24:untyped int
  const PTRACE_SYSEMU                     PTRACE_SYSEMU = 31:untyped int
  const PTRACE_SYSEMU_SINGLESTEP          PTRACE_SYSEMU_SINGLESTEP = 32:untyped int
  const PTRACE_TRACEME                    PTRACE_TRACEME = 0:untyped int
  func  ParseDirent                       func(buf []byte, max int, names []string) (consumed int, count int, newnames []string)
  func  ParseNetlinkMessage               func(b []byte) ([]NetlinkMessage, error)
  func  ParseNetlinkRouteAttr             func(m *NetlinkMessage) ([]NetlinkRouteAttr, error)
  func  ParseSocketControlMessage         func(b []byte) ([]SocketControlMessage, error)
  func  ParseUnixCredentials              func(m *SocketControlMessage) (*Ucred, error)
  func  ParseUnixRights                   func(m *SocketControlMessage) ([]int, error)
  const PathMax                           PathMax = 4096:untyped int
  func  Pause                             func() (err error)
  func  Pipe                              func(p []int) (err error)
  func  Pipe2                             func(p []int, flags int) (err error)
  func  PivotRoot                         func(newroot string, putold string) (err error)
  func  Pread                             func(fd int, p []byte, offset int64) (n int, err error)
  type  ProcAttr                          struct{Dir string; Env []string; Files []uintptr; Sys *SysProcAttr}
  func  PtraceAttach                      func(pid int) (err error)
  func  PtraceCont                        func(pid int, signal int) (err error)
  func  PtraceDetach                      func(pid int) (err error)
  func  PtraceGetEventMsg                 func(pid int) (msg uint, err error)
  func  PtraceGetRegs                     func(pid int, regsout *PtraceRegs) (err error)
  func  PtracePeekData                    func(pid int, addr uintptr, out []byte) (count int, err error)
  func  PtracePeekText                    func(pid int, addr uintptr, out []byte) (count int, err error)
  func  PtracePokeData                    func(pid int, addr uintptr, data []byte) (count int, err error)
  func  PtracePokeText                    func(pid int, addr uintptr, data []byte) (count int, err error)
  type  PtraceRegs                        struct{R15 uint64; R14 uint64; R13 uint64; R12 uint64; Rbp uint64; Rbx uint64; R11 uint64; R10 uint64; R9 uint64; R8 uint64; Rax uint64; Rcx uint64; Rdx uint64; Rsi uint64; Rdi uint64; Orig_rax uint64; Rip uint64; Cs uint64; Eflags uint64; Rsp uint64; Ss uint64; Fs_base uint64; Gs_base uint64; Ds uint64; Es uint64; Fs uint64; Gs uint64}
    method (*PtraceRegs) PC() uint64
    method (*PtraceRegs) SetPC(pc uint64)
  func  PtraceSetOptions                  func(pid int, options int) (err error)
  func  PtraceSetRegs                     func(pid int, regs *PtraceRegs) (err error)
  func  PtraceSingleStep                  func(pid int) (err error)
  func  PtraceSyscall                     func(pid int, signal int) (err error)
  func  Pwrite                            func(fd int, p []byte, offset int64) (n int, err error)
  const RLIMIT_AS                         RLIMIT_AS = 9:untyped int
  const RLIMIT_CORE                       RLIMIT_CORE = 4:untyped int
  const RLIMIT_CPU                        RLIMIT_CPU = 0:untyped int
  const RLIMIT_DATA                       RLIMIT_DATA = 2:untyped int
  const RLIMIT_FSIZE                      RLIMIT_FSIZE = 1:untyped int
  const RLIMIT_NOFILE                     RLIMIT_NOFILE = 7:untyped int
  const RLIMIT_STACK                      RLIMIT_STACK = 3:untyped int
  const RLIM_INFINITY                     RLIM_INFINITY = -1:untyped int
  const RTAX_ADVMSS                       RTAX_ADVMSS = 8:untyped int
  const RTAX_CWND                         RTAX_CWND = 7:untyped int
  const RTAX_FEATURES                     RTAX_FEATURES = 12:untyped int
  const RTAX_FEATURE_ALLFRAG              RTAX_FEATURE_ALLFRAG = 8:untyped int
  const RTAX_FEATURE_ECN                  RTAX_FEATURE_ECN = 1:untyped int
  const RTAX_FEATURE_SACK                 RTAX_FEATURE_SACK = 2:untyped int
  const RTAX_FEATURE_TIMESTAMP            RTAX_FEATURE_TIMESTAMP = 4:untyped int
  const RTAX_HOPLIMIT                     RTAX_HOPLIMIT = 10:untyped int
  const RTAX_INITCWND                     RTAX_INITCWND = 11:untyped int
  const RTAX_INITRWND                     RTAX_INITRWND = 14:untyped int
  const RTAX_LOCK                         RTAX_LOCK = 1:untyped int
  const RTAX_MAX                          RTAX_MAX = 14:untyped int
  const RTAX_MTU                          RTAX_MTU = 2:untyped int
  const RTAX_REORDERING                   RTAX_REORDERING = 9:untyped int
  const RTAX_RTO_MIN                      RTAX_RTO_MIN = 13:untyped int
  const RTAX_RTT                          RTAX_RTT = 4:untyped int
  const RTAX_RTTVAR                       RTAX_RTTVAR = 5:untyped int
  const RTAX_SSTHRESH                     RTAX_SSTHRESH = 6:untyped int
  const RTAX_UNSPEC                       RTAX_UNSPEC = 0:untyped int
  const RTAX_WINDOW                       RTAX_WINDOW = 3:untyped int
  const RTA_ALIGNTO                       RTA_ALIGNTO = 4:untyped int
  const RTA_CACHEINFO                     RTA_CACHEINFO = 12:untyped int
  const RTA_DST                           RTA_DST = 1:untyped int
  const RTA_FLOW                          RTA_FLOW = 11:untyped int
  const RTA_GATEWAY                       RTA_GATEWAY = 5:untyped int
  const RTA_IIF                           RTA_IIF = 3:untyped int
  const RTA_MAX                           RTA_MAX = 16:untyped int
  const RTA_METRICS                       RTA_METRICS = 8:untyped int
  const RTA_MULTIPATH                     RTA_MULTIPATH = 9:untyped int
  const RTA_OIF                           RTA_OIF = 4:untyped int
  const RTA_PREFSRC                       RTA_PREFSRC = 7:untyped int
  const RTA_PRIORITY                      RTA_PRIORITY = 6:untyped int
  const RTA_SRC                           RTA_SRC = 2:untyped int
  const RTA_TABLE                         RTA_TABLE = 15:untyped int
  const RTA_UNSPEC                        RTA_UNSPEC = 0:untyped int
  const RTCF_DIRECTSRC                    RTCF_DIRECTSRC = 67108864:untyped int
  const RTCF_DOREDIRECT                   RTCF_DOREDIRECT = 16777216:untyped int
  const RTCF_LOG                          RTCF_LOG = 33554432:untyped int
  const RTCF_MASQ                         RTCF_MASQ = 4194304:untyped int
  const RTCF_NAT                          RTCF_NAT = 8388608:untyped int
  const RTCF_VALVE                        RTCF_VALVE = 2097152:untyped int
  const RTF_ADDRCLASSMASK                 RTF_ADDRCLASSMASK = 4160749568:untyped int
  const RTF_ADDRCONF                      RTF_ADDRCONF = 262144:untyped int
  const RTF_ALLONLINK                     RTF_ALLONLINK = 131072:untyped int
  const RTF_BROADCAST                     RTF_BROADCAST = 268435456:untyped int
  const RTF_CACHE                         RTF_CACHE = 16777216:untyped int
  const RTF_DEFAULT                       RTF_DEFAULT = 65536:untyped int
  const RTF_DYNAMIC                       RTF_DYNAMIC = 16:untyped int
  const RTF_FLOW                          RTF_FLOW = 33554432:untyped int
  const RTF_GATEWAY                       RTF_GATEWAY = 2:untyped int
  const RTF_HOST                          RTF_HOST = 4:untyped int
  const RTF_INTERFACE                     RTF_INTERFACE = 1073741824:untyped int
  const RTF_IRTT                          RTF_IRTT = 256:untyped int
  const RTF_LINKRT                        RTF_LINKRT = 1048576:untyped int
  const RTF_LOCAL                         RTF_LOCAL = 2147483648:untyped int
  const RTF_MODIFIED                      RTF_MODIFIED = 32:untyped int
  const RTF_MSS                           RTF_MSS = 64:untyped int
  const RTF_MTU                           RTF_MTU = 64:untyped int
  const RTF_MULTICAST                     RTF_MULTICAST = 536870912:untyped int
  const RTF_NAT                           RTF_NAT = 134217728:untyped int
  const RTF_NOFORWARD                     RTF_NOFORWARD = 4096:untyped int
  const RTF_NONEXTHOP                     RTF_NONEXTHOP = 2097152:untyped int
  const RTF_NOPMTUDISC                    RTF_NOPMTUDISC = 16384:untyped int
  const RTF_POLICY                        RTF_POLICY = 67108864:untyped int
  const RTF_REINSTATE                     RTF_REINSTATE = 8:untyped int
  const RTF_REJECT                        RTF_REJECT = 512:untyped int
  const RTF_STATIC                        RTF_STATIC = 1024:untyped int
  const RTF_THROW                         RTF_THROW = 8192:untyped int
  const RTF_UP                            RTF_UP = 1:untyped int
  const RTF_WINDOW                        RTF_WINDOW = 128:untyped int
  const RTF_XRESOLVE                      RTF_XRESOLVE = 2048:untyped int
  const RTM_BASE                          RTM_BASE = 16:untyped int
  const RTM_DELACTION                     RTM_DELACTION = 49:untyped int
  const RTM_DELADDR                       RTM_DELADDR = 21:untyped int
  const RTM_DELADDRLABEL                  RTM_DELADDRLABEL = 73:untyped int
  const RTM_DELLINK                       RTM_DELLINK = 17:untyped int
  const RTM_DELNEIGH                      RTM_DELNEIGH = 29:untyped int
  const RTM_DELQDISC                      RTM_DELQDISC = 37:untyped int
  const RTM_DELROUTE                      RTM_DELROUTE = 25:untyped int
  const RTM_DELRULE                       RTM_DELRULE = 33:untyped int
  const RTM_DELTCLASS                     RTM_DELTCLASS = 41:untyped int
  const RTM_DELTFILTER                    RTM_DELTFILTER = 45:untyped int
  const RTM_F_CLONED                      RTM_F_CLONED = 512:untyped int
  const RTM_F_EQUALIZE                    RTM_F_EQUALIZE = 1024:untyped int
  const RTM_F_NOTIFY                      RTM_F_NOTIFY = 256:untyped int
  const RTM_F_PREFIX                      RTM_F_PREFIX = 2048:untyped int
  const RTM_GETACTION                     RTM_GETACTION = 50:untyped int
  const RTM_GETADDR                       RTM_GETADDR = 22:untyped int
  const RTM_GETADDRLABEL                  RTM_GETADDRLABEL = 74:untyped int
  const RTM_GETANYCAST                    RTM_GETANYCAST = 62:untyped int
  const RTM_GETDCB                        RTM_GETDCB = 78:untyped int
  const RTM_GETLINK                       RTM_GETLINK = 18:untyped int
  const RTM_GETMULTICAST                  RTM_GETMULTICAST = 58:untyped int
  const RTM_GETNEIGH                      RTM_GETNEIGH = 30:untyped int
  const RTM_GETNEIGHTBL                   RTM_GETNEIGHTBL = 66:untyped int
  const RTM_GETQDISC                      RTM_GETQDISC = 38:untyped int
  const RTM_GETROUTE                      RTM_GETROUTE = 26:untyped int
  const RTM_GETRULE                       RTM_GETRULE = 34:untyped int
  const RTM_GETTCLASS                     RTM_GETTCLASS = 42:untyped int
  const RTM_GETTFILTER                    RTM_GETTFILTER = 46:untyped int
  const RTM_MAX                           RTM_MAX = 79:untyped int
  const RTM_NEWACTION                     RTM_NEWACTION = 48:untyped int
  const RTM_NEWADDR                       RTM_NEWADDR = 20:untyped int
  const RTM_NEWADDRLABEL                  RTM_NEWADDRLABEL = 72:untyped int
  const RTM_NEWLINK                       RTM_NEWLINK = 16:untyped int
  const RTM_NEWNDUSEROPT                  RTM_NEWNDUSEROPT = 68:untyped int
  const RTM_NEWNEIGH                      RTM_NEWNEIGH = 28:untyped int
  const RTM_NEWNEIGHTBL                   RTM_NEWNEIGHTBL = 64:untyped int
  const RTM_NEWPREFIX                     RTM_NEWPREFIX = 52:untyped int
  const RTM_NEWQDISC                      RTM_NEWQDISC = 36:untyped int
  const RTM_NEWROUTE                      RTM_NEWROUTE = 24:untyped int
  const RTM_NEWRULE                       RTM_NEWRULE = 32:untyped int
  const RTM_NEWTCLASS                     RTM_NEWTCLASS = 40:untyped int
  const RTM_NEWTFILTER                    RTM_NEWTFILTER = 44:untyped int
  const RTM_NR_FAMILIES                   RTM_NR_FAMILIES = 16:untyped int
  const RTM_NR_MSGTYPES                   RTM_NR_MSGTYPES = 64:untyped int
  const RTM_SETDCB                        RTM_SETDCB = 79:untyped int
  const RTM_SETLINK                       RTM_SETLINK = 19:untyped int
  const RTM_SETNEIGHTBL                   RTM_SETNEIGHTBL = 67:untyped int
  const RTNH_ALIGNTO                      RTNH_ALIGNTO = 4:untyped int
  const RTNH_F_DEAD                       RTNH_F_DEAD = 1:untyped int
  const RTNH_F_ONLINK                     RTNH_F_ONLINK = 4:untyped int
  const RTNH_F_PERVASIVE                  RTNH_F_PERVASIVE = 2:untyped int
  const RTNLGRP_IPV4_IFADDR               RTNLGRP_IPV4_IFADDR = 5:untyped int
  const RTNLGRP_IPV4_MROUTE               RTNLGRP_IPV4_MROUTE = 6:untyped int
  const RTNLGRP_IPV4_ROUTE                RTNLGRP_IPV4_ROUTE = 7:untyped int
  const RTNLGRP_IPV4_RULE                 RTNLGRP_IPV4_RULE = 8:untyped int
  const RTNLGRP_IPV6_IFADDR               RTNLGRP_IPV6_IFADDR = 9:untyped int
  const RTNLGRP_IPV6_IFINFO               RTNLGRP_IPV6_IFINFO = 12:untyped int
  const RTNLGRP_IPV6_MROUTE               RTNLGRP_IPV6_MROUTE = 10:untyped int
  const RTNLGRP_IPV6_PREFIX               RTNLGRP_IPV6_PREFIX = 18:untyped int
  const RTNLGRP_IPV6_ROUTE                RTNLGRP_IPV6_ROUTE = 11:untyped int
  const RTNLGRP_IPV6_RULE                 RTNLGRP_IPV6_RULE = 19:untyped int
  const RTNLGRP_LINK                      RTNLGRP_LINK = 1:untyped int
  const RTNLGRP_ND_USEROPT                RTNLGRP_ND_USEROPT = 20:untyped int
  const RTNLGRP_NEIGH                     RTNLGRP_NEIGH = 3:untyped int
  const RTNLGRP_NONE                      RTNLGRP_NONE = 0:untyped int
  const RTNLGRP_NOTIFY                    RTNLGRP_NOTIFY = 2:untyped int
  const RTNLGRP_TC                        RTNLGRP_TC = 4:untyped int
  const RTN_ANYCAST                       RTN_ANYCAST = 4:untyped int
  const RTN_BLACKHOLE                     RTN_BLACKHOLE = 6:untyped int
  const RTN_BROADCAST                     RTN_BROADCAST = 3:untyped int
  const RTN_LOCAL                         RTN_LOCAL = 2:untyped int
  const RTN_MAX                           RTN_MAX = 11:untyped int
  const RTN_MULTICAST                     RTN_MULTICAST = 5:untyped int
  const RTN_NAT                           RTN_NAT = 10:untyped int
  const RTN_PROHIBIT                      RTN_PROHIBIT = 8:untyped int
  const RTN_THROW                         RTN_THROW = 9:untyped int
  const RTN_UNICAST                       RTN_UNICAST = 1:untyped int
  const RTN_UNREACHABLE                   RTN_UNREACHABLE = 7:untyped int
  const RTN_UNSPEC                        RTN_UNSPEC = 0:untyped int
  const RTN_XRESOLVE                      RTN_XRESOLVE = 11:untyped int
  const RTPROT_BIRD                       RTPROT_BIRD = 12:untyped int
  const RTPROT_BOOT                       RTPROT_BOOT = 3:untyped int
  const RTPROT_DHCP                       RTPROT_DHCP = 16:untyped int
  const RTPROT_DNROUTED                   RTPROT_DNROUTED = 13:untyped int
  const RTPROT_GATED                      RTPROT_GATED = 8:untyped int
  const RTPROT_KERNEL                     RTPROT_KERNEL = 2:untyped int
  const RTPROT_MRT                        RTPROT_MRT = 10:untyped int
  const RTPROT_NTK                        RTPROT_NTK = 15:untyped int
  const RTPROT_RA                         RTPROT_RA = 9:untyped int
  const RTPROT_REDIRECT                   RTPROT_REDIRECT = 1:untyped int
  const RTPROT_STATIC                     RTPROT_STATIC = 4:untyped int
  const RTPROT_UNSPEC                     RTPROT_UNSPEC = 0:untyped int
  const RTPROT_XORP                       RTPROT_XORP = 14:untyped int
  const RTPROT_ZEBRA                      RTPROT_ZEBRA = 11:untyped int
  const RT_CLASS_DEFAULT                  RT_CLASS_DEFAULT = 253:untyped int
  const RT_CLASS_LOCAL                    RT_CLASS_LOCAL = 255:untyped int
  const RT_CLASS_MAIN                     RT_CLASS_MAIN = 254:untyped int
  const RT_CLASS_MAX                      RT_CLASS_MAX = 255:untyped int
  const RT_CLASS_UNSPEC                   RT_CLASS_UNSPEC = 0:untyped int
  const RT_SCOPE_HOST                     RT_SCOPE_HOST = 254:untyped int
  const RT_SCOPE_LINK                     RT_SCOPE_LINK = 253:untyped int
  const RT_SCOPE_NOWHERE                  RT_SCOPE_NOWHERE = 255:untyped int
  const RT_SCOPE_SITE                     RT_SCOPE_SITE = 200:untyped int
  const RT_SCOPE_UNIVERSE                 RT_SCOPE_UNIVERSE = 0:untyped int
  const RT_TABLE_COMPAT                   RT_TABLE_COMPAT = 252:untyped int
  const RT_TABLE_DEFAULT                  RT_TABLE_DEFAULT = 253:untyped int
  const RT_TABLE_LOCAL                    RT_TABLE_LOCAL = 255:untyped int
  const RT_TABLE_MAIN                     RT_TABLE_MAIN = 254:untyped int
  const RT_TABLE_MAX                      RT_TABLE_MAX = 4294967295:untyped int
  const RT_TABLE_UNSPEC                   RT_TABLE_UNSPEC = 0:untyped int
  const RUSAGE_CHILDREN                   RUSAGE_CHILDREN = -1:untyped int
  const RUSAGE_SELF                       RUSAGE_SELF = 0:untyped int
  const RUSAGE_THREAD                     RUSAGE_THREAD = 1:untyped int
  type  RawSockaddr                       struct{Family uint16; Data [14]int8}
  type  RawSockaddrAny                    struct{Addr RawSockaddr; Pad [96]int8}
  type  RawSockaddrInet4                  struct{Family uint16; Port uint16; Addr [4]byte; Zero [8]uint8}
  type  RawSockaddrInet6                  struct{Family uint16; Port uint16; Flowinfo uint32; Addr [16]byte; Scope_id uint32}
  type  RawSockaddrLinklayer              struct{Family uint16; Protocol uint16; Ifindex int32; Hatype uint16; Pkttype uint8; Halen uint8; Addr [8]uint8}
  type  RawSockaddrNetlink                struct{Family uint16; Pad uint16; Pid uint32; Groups uint32}
  type  RawSockaddrUnix                   struct{Family uint16; Path [108]int8}
  func  RawSyscall                        func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err Errno)
  func  RawSyscall6                       func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr) (r1 uintptr, r2 uintptr, err Errno)
  func  Read                              func(fd int, p []byte) (n int, err error)
  func  ReadDirent                        func(fd int, buf []byte) (n int, err error)
  func  Readlink                          func(path string, buf []byte) (n int, err error)
  func  Reboot                            func(cmd int) (err error)
  func  Recvfrom                          func(fd int, p []byte, flags int) (n int, from Sockaddr, err error)
  func  Recvmsg                           func(fd int, p []byte, oob []byte, flags int) (n int, oobn int, recvflags int, from Sockaddr, err error)
  func  Removexattr                       func(path string, attr string) (err error)
  func  Rename                            func(oldpath string, newpath string) (err error)
  func  Renameat                          func(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)
  type  Rlimit                            struct{Cur uint64; Max uint64}
  func  Rmdir                             func(path string) error
  type  RtAttr                            struct{Len uint16; Type uint16}
  type  RtGenmsg                          struct{Family uint8}
  type  RtMsg                             struct{Family uint8; Dst_len uint8; Src_len uint8; Tos uint8; Table uint8; Protocol uint8; Scope uint8; Type uint8; Flags uint32}
  type  RtNexthop                         struct{Len uint16; Flags uint8; Hops uint8; Ifindex int32}
  type  Rusage                            struct{Utime Timeval; Stime Timeval; Maxrss int64; Ixrss int64; Idrss int64; Isrss int64; Minflt int64; Majflt int64; Nswap int64; Inblock int64; Oublock int64; Msgsnd int64; Msgrcv int64; Nsignals int64; Nvcsw int64; Nivcsw int64}
  const SCM_CREDENTIALS                   SCM_CREDENTIALS = 2:untyped int
  const SCM_RIGHTS                        SCM_RIGHTS = 1:untyped int
  const SCM_TIMESTAMP                     SCM_TIMESTAMP = 29:untyped int
  const SCM_TIMESTAMPING                  SCM_TIMESTAMPING = 37:untyped int
  const SCM_TIMESTAMPNS                   SCM_TIMESTAMPNS = 35:untyped int
  const SHUT_RD                           SHUT_RD = 0:untyped int
  const SHUT_RDWR                         SHUT_RDWR = 2:untyped int
  const SHUT_WR                           SHUT_WR = 1:untyped int
  const SIGABRT                           SIGABRT = 6:Signal
  const SIGALRM                           SIGALRM = 14:Signal
  const SIGBUS                            SIGBUS = 7:Signal
  const SIGCHLD                           SIGCHLD = 17:Signal
  const SIGCLD                            SIGCLD = 17:Signal
  const SIGCONT                           SIGCONT = 18:Signal
  const SIGFPE                            SIGFPE = 8:Signal
  const SIGHUP                            SIGHUP = 1:Signal
  const SIGILL                            SIGILL = 4:Signal
  const SIGINT                            SIGINT = 2:Signal
  const SIGIO                             SIGIO = 29:Signal
  const SIGIOT                            SIGIOT = 6:Signal
  const SIGKILL                           SIGKILL = 9:Signal
  const SIGPIPE                           SIGPIPE = 13:Signal
  const SIGPOLL                           SIGPOLL = 29:Signal
  const SIGPROF                           SIGPROF = 27:Signal
  const SIGPWR                            SIGPWR = 30:Signal
  const SIGQUIT                           SIGQUIT = 3:Signal
  const SIGSEGV                           SIGSEGV = 11:Signal
  const SIGSTKFLT                         SIGSTKFLT = 16:Signal
  const SIGSTOP                           SIGSTOP = 19:Signal
  const SIGSYS                            SIGSYS = 31:Signal
  const SIGTERM                           SIGTERM = 15:Signal
  const SIGTRAP                           SIGTRAP = 5:Signal
  const SIGTSTP                           SIGTSTP = 20:Signal
  const SIGTTIN                           SIGTTIN = 21:Signal
  const SIGTTOU                           SIGTTOU = 22:Signal
  const SIGUNUSED                         SIGUNUSED = 31:Signal
  const SIGURG                            SIGURG = 23:Signal
  const SIGUSR1                           SIGUSR1 = 10:Signal
  const SIGUSR2                           SIGUSR2 = 12:Signal
  const SIGVTALRM                         SIGVTALRM = 26:Signal
  const SIGWINCH                          SIGWINCH = 28:Signal
  const SIGXCPU                           SIGXCPU = 24:Signal
  const SIGXFSZ                           SIGXFSZ = 25:Signal
  const SIOCADDDLCI                       SIOCADDDLCI = 35200:untyped int
  const SIOCADDMULTI                      SIOCADDMULTI = 35121:untyped int
  const SIOCADDRT                         SIOCADDRT = 35083:untyped int
  const SIOCATMARK                        SIOCATMARK = 35077:untyped int
  const SIOCDARP                          SIOCDARP = 35155:untyped int
  const SIOCDELDLCI                       SIOCDELDLCI = 35201:untyped int
  const SIOCDELMULTI                      SIOCDELMULTI = 35122:untyped int
  const SIOCDELRT                         SIOCDELRT = 35084:untyped int
  const SIOCDEVPRIVATE                    SIOCDEVPRIVATE = 35312:untyped int
  const SIOCDIFADDR                       SIOCDIFADDR = 35126:untyped int
  const SIOCDRARP                         SIOCDRARP = 35168:untyped int
  const SIOCGARP                          SIOCGARP = 35156:untyped int
  const SIOCGIFADDR                       SIOCGIFADDR = 35093:untyped int
  const SIOCGIFBR                         SIOCGIFBR = 35136:untyped int
  const SIOCGIFBRDADDR                    SIOCGIFBRDADDR = 35097:untyped int
  const SIOCGIFCONF                       SIOCGIFCONF = 35090:untyped int
  const SIOCGIFCOUNT                      SIOCGIFCOUNT = 35128:untyped int
  const SIOCGIFDSTADDR                    SIOCGIFDSTADDR = 35095:untyped int
  const SIOCGIFENCAP                      SIOCGIFENCAP = 35109:untyped int
  const SIOCGIFFLAGS                      SIOCGIFFLAGS = 35091:untyped int
  const SIOCGIFHWADDR                     SIOCGIFHWADDR = 35111:untyped int
  const SIOCGIFINDEX                      SIOCGIFINDEX = 35123:untyped int
  const SIOCGIFMAP                        SIOCGIFMAP = 35184:untyped int
  const SIOCGIFMEM                        SIOCGIFMEM = 35103:untyped int
  const SIOCGIFMETRIC                     SIOCGIFMETRIC = 35101:untyped int
  const SIOCGIFMTU                        SIOCGIFMTU = 35105:untyped int
  const SIOCGIFNAME                       SIOCGIFNAME = 35088:untyped int
  const SIOCGIFNETMASK                    SIOCGIFNETMASK = 35099:untyped int
  const SIOCGIFPFLAGS                     SIOCGIFPFLAGS = 35125:untyped int
  const SIOCGIFSLAVE                      SIOCGIFSLAVE = 35113:untyped int
  const SIOCGIFTXQLEN                     SIOCGIFTXQLEN = 35138:untyped int
  const SIOCGPGRP                         SIOCGPGRP = 35076:untyped int
  const SIOCGRARP                         SIOCGRARP = 35169:untyped int
  const SIOCGSTAMP                        SIOCGSTAMP = 35078:untyped int
  const SIOCGSTAMPNS                      SIOCGSTAMPNS = 35079:untyped int
  const SIOCPROTOPRIVATE                  SIOCPROTOPRIVATE = 35296:untyped int
  const SIOCRTMSG                         SIOCRTMSG = 35085:untyped int
  const SIOCSARP                          SIOCSARP = 35157:untyped int
  const SIOCSIFADDR                       SIOCSIFADDR = 35094:untyped int
  const SIOCSIFBR                         SIOCSIFBR = 35137:untyped int
  const SIOCSIFBRDADDR                    SIOCSIFBRDADDR = 35098:untyped int
  const SIOCSIFDSTADDR                    SIOCSIFDSTADDR = 35096:untyped int
  const SIOCSIFENCAP                      SIOCSIFENCAP = 35110:untyped int
  const SIOCSIFFLAGS                      SIOCSIFFLAGS = 35092:untyped int
  const SIOCSIFHWADDR                     SIOCSIFHWADDR = 35108:untyped int
  const SIOCSIFHWBROADCAST                SIOCSIFHWBROADCAST = 35127:untyped int
  const SIOCSIFLINK                       SIOCSIFLINK = 35089:untyped int
  const SIOCSIFMAP                        SIOCSIFMAP = 35185:untyped int
  const SIOCSIFMEM                        SIOCSIFMEM = 35104:untyped int
  const SIOCSIFMETRIC                     SIOCSIFMETRIC = 35102:untyped int
  const SIOCSIFMTU                        SIOCSIFMTU = 35106:untyped int
  const SIOCSIFNAME                       SIOCSIFNAME = 35107:untyped int
  const SIOCSIFNETMASK                    SIOCSIFNETMASK = 35100:untyped int
  const SIOCSIFPFLAGS                     SIOCSIFPFLAGS = 35124:untyped int
  const SIOCSIFSLAVE                      SIOCSIFSLAVE = 35120:untyped int
  const SIOCSIFTXQLEN                     SIOCSIFTXQLEN = 35139:untyped int
  const SIOCSPGRP                         SIOCSPGRP = 35074:untyped int
  const SIOCSRARP                         SIOCSRARP = 35170:untyped int
  const SOCK_CLOEXEC                      SOCK_CLOEXEC = 524288:untyped int
  const SOCK_DCCP                         SOCK_DCCP = 6:untyped int
  const SOCK_DGRAM                        SOCK_DGRAM = 2:untyped int
  const SOCK_NONBLOCK                     SOCK_NONBLOCK = 2048:untyped int
  const SOCK_PACKET                       SOCK_PACKET = 10:untyped int
  const SOCK_RAW                          SOCK_RAW = 3:untyped int
  const SOCK_RDM                          SOCK_RDM = 4:untyped int
  const SOCK_SEQPACKET                    SOCK_SEQPACKET = 5:untyped int
  const SOCK_STREAM                       SOCK_STREAM = 1:untyped int
  const SOL_AAL                           SOL_AAL = 265:untyped int
  const SOL_ATM                           SOL_ATM = 264:untyped int
  const SOL_DECNET                        SOL_DECNET = 261:untyped int
  const SOL_ICMPV6                        SOL_ICMPV6 = 58:untyped int
  const SOL_IP                            SOL_IP = 0:untyped int
  const SOL_IPV6                          SOL_IPV6 = 41:untyped int
  const SOL_IRDA                          SOL_IRDA = 266:untyped int
  const SOL_PACKET                        SOL_PACKET = 263:untyped int
  const SOL_RAW                           SOL_RAW = 255:untyped int
  const SOL_SOCKET                        SOL_SOCKET = 1:untyped int
  const SOL_TCP                           SOL_TCP = 6:untyped int
  const SOL_X25                           SOL_X25 = 262:untyped int
  const SOMAXCONN                         SOMAXCONN = 128:untyped int
  const SO_ACCEPTCONN                     SO_ACCEPTCONN = 30:untyped int
  const SO_ATTACH_FILTER                  SO_ATTACH_FILTER = 26:untyped int
  const SO_BINDTODEVICE                   SO_BINDTODEVICE = 25:untyped int
  const SO_BROADCAST                      SO_BROADCAST = 6:untyped int
  const SO_BSDCOMPAT                      SO_BSDCOMPAT = 14:untyped int
  const SO_DEBUG                          SO_DEBUG = 1:untyped int
  const SO_DETACH_FILTER                  SO_DETACH_FILTER = 27:untyped int
  const SO_DOMAIN                         SO_DOMAIN = 39:untyped int
  const SO_DONTROUTE                      SO_DONTROUTE = 5:untyped int
  const SO_ERROR                          SO_ERROR = 4:untyped int
  const SO_KEEPALIVE                      SO_KEEPALIVE = 9:untyped int
  const SO_LINGER                         SO_LINGER = 13:untyped int
  const SO_MARK                           SO_MARK = 36:untyped int
  const SO_NO_CHECK                       SO_NO_CHECK = 11:untyped int
  const SO_OOBINLINE                      SO_OOBINLINE = 10:untyped int
  const SO_PASSCRED                       SO_PASSCRED = 16:untyped int
  const SO_PASSSEC                        SO_PASSSEC = 34:untyped int
  const SO_PEERCRED                       SO_PEERCRED = 17:untyped int
  const SO_PEERNAME                       SO_PEERNAME = 28:untyped int
  const SO_PEERSEC                        SO_PEERSEC = 31:untyped int
  const SO_PRIORITY                       SO_PRIORITY = 12:untyped int
  const SO_PROTOCOL                       SO_PROTOCOL = 38:untyped int
  const SO_RCVBUF                         SO_RCVBUF = 8:untyped int
  const SO_RCVBUFFORCE                    SO_RCVBUFFORCE = 33:untyped int
  const SO_RCVLOWAT                       SO_RCVLOWAT = 18:untyped int
  const SO_RCVTIMEO                       SO_RCVTIMEO = 20:untyped int
  const SO_REUSEADDR                      SO_REUSEADDR = 2:untyped int
  const SO_RXQ_OVFL                       SO_RXQ_OVFL = 40:untyped int
  const SO_SECURITY_AUTHENTICATION        SO_SECURITY_AUTHENTICATION = 22:untyped int
  const SO_SECURITY_ENCRYPTION_NETWORK    SO_SECURITY_ENCRYPTION_NETWORK = 24:untyped int
  const SO_SECURITY_ENCRYPTION_TRANSPORT  SO_SECURITY_ENCRYPTION_TRANSPORT = 23:untyped int
  const SO_SNDBUF                         SO_SNDBUF = 7:untyped int
  const SO_SNDBUFFORCE                    SO_SNDBUFFORCE = 32:untyped int
  const SO_SNDLOWAT                       SO_SNDLOWAT = 19:untyped int
  const SO_SNDTIMEO                       SO_SNDTIMEO = 21:untyped int
  const SO_TIMESTAMP                      SO_TIMESTAMP = 29:untyped int
  const SO_TIMESTAMPING                   SO_TIMESTAMPING = 37:untyped int
  const SO_TIMESTAMPNS                    SO_TIMESTAMPNS = 35:untyped int
  const SO_TYPE                           SO_TYPE = 3:untyped int
  const SYS_ACCEPT                        SYS_ACCEPT = 43:untyped int
  const SYS_ACCEPT4                       SYS_ACCEPT4 = 288:untyped int
  const SYS_ACCESS                        SYS_ACCESS = 21:untyped int
  const SYS_ACCT                          SYS_ACCT = 163:untyped int
  const SYS_ADD_KEY                       SYS_ADD_KEY = 248:untyped int
  const SYS_ADJTIMEX                      SYS_ADJTIMEX = 159:untyped int
  const SYS_AFS_SYSCALL                   SYS_AFS_SYSCALL = 183:untyped int
  const SYS_ALARM                         SYS_ALARM = 37:untyped int
  const SYS_ARCH_PRCTL                    SYS_ARCH_PRCTL = 158:untyped int
  const SYS_BIND                          SYS_BIND = 49:untyped int
  const SYS_BRK                           SYS_BRK = 12:untyped int
  const SYS_CAPGET                        SYS_CAPGET = 125:untyped int
  const SYS_CAPSET                        SYS_CAPSET = 126:untyped int
  const SYS_CHDIR                         SYS_CHDIR = 80:untyped int
  const SYS_CHMOD                         SYS_CHMOD = 90:untyped int
  const SYS_CHOWN                         SYS_CHOWN = 92:untyped int
  const SYS_CHROOT                        SYS_CHROOT = 161:untyped int
  const SYS_CLOCK_GETRES                  SYS_CLOCK_GETRES = 229:untyped int
  const SYS_CLOCK_GETTIME                 SYS_CLOCK_GETTIME = 228:untyped int
  const SYS_CLOCK_NANOSLEEP               SYS_CLOCK_NANOSLEEP = 230:untyped int
  const SYS_CLOCK_SETTIME                 SYS_CLOCK_SETTIME = 227:untyped int
  const SYS_CLONE                         SYS_CLONE = 56:untyped int
  const SYS_CLOSE                         SYS_CLOSE = 3:untyped int
  const SYS_CONNECT                       SYS_CONNECT = 42:untyped int
  const SYS_CREAT                         SYS_CREAT = 85:untyped int
  const SYS_CREATE_MODULE                 SYS_CREATE_MODULE = 174:untyped int
  const SYS_DELETE_MODULE                 SYS_DELETE_MODULE = 176:untyped int
  const SYS_DUP                           SYS_DUP = 32:untyped int
  const SYS_DUP2                          SYS_DUP2 = 33:untyped int
  const SYS_DUP3                          SYS_DUP3 = 292:untyped int
  const SYS_EPOLL_CREATE                  SYS_EPOLL_CREATE = 213:untyped int
  const SYS_EPOLL_CREATE1                 SYS_EPOLL_CREATE1 = 291:untyped int
  const SYS_EPOLL_CTL                     SYS_EPOLL_CTL = 233:untyped int
  const SYS_EPOLL_CTL_OLD                 SYS_EPOLL_CTL_OLD = 214:untyped int
  const SYS_EPOLL_PWAIT                   SYS_EPOLL_PWAIT = 281:untyped int
  const SYS_EPOLL_WAIT                    SYS_EPOLL_WAIT = 232:untyped int
  const SYS_EPOLL_WAIT_OLD                SYS_EPOLL_WAIT_OLD = 215:untyped int
  const SYS_EVENTFD                       SYS_EVENTFD = 284:untyped int
  const SYS_EVENTFD2                      SYS_EVENTFD2 = 290:untyped int
  const SYS_EXECVE                        SYS_EXECVE = 59:untyped int
  const SYS_EXIT                          SYS_EXIT = 60:untyped int
  const SYS_EXIT_GROUP                    SYS_EXIT_GROUP = 231:untyped int
  const SYS_FACCESSAT                     SYS_FACCESSAT = 269:untyped int
  const SYS_FADVISE64                     SYS_FADVISE64 = 221:untyped int
  const SYS_FALLOCATE                     SYS_FALLOCATE = 285:untyped int
  const SYS_FANOTIFY_INIT                 SYS_FANOTIFY_INIT = 300:untyped int
  const SYS_FANOTIFY_MARK                 SYS_FANOTIFY_MARK = 301:untyped int
  const SYS_FCHDIR                        SYS_FCHDIR = 81:untyped int
  const SYS_FCHMOD                        SYS_FCHMOD = 91:untyped int
  const SYS_FCHMODAT                      SYS_FCHMODAT = 268:untyped int
  const SYS_FCHOWN                        SYS_FCHOWN = 93:untyped int
  const SYS_FCHOWNAT                      SYS_FCHOWNAT = 260:untyped int
  const SYS_FCNTL                         SYS_FCNTL = 72:untyped int
  const SYS_FDATASYNC                     SYS_FDATASYNC = 75:untyped int
  const SYS_FGETXATTR                     SYS_FGETXATTR = 193:untyped int
  const SYS_FLISTXATTR                    SYS_FLISTXATTR = 196:untyped int
  const SYS_FLOCK                         SYS_FLOCK = 73:untyped int
  const SYS_FORK                          SYS_FORK = 57:untyped int
  const SYS_FREMOVEXATTR                  SYS_FREMOVEXATTR = 199:untyped int
  const SYS_FSETXATTR                     SYS_FSETXATTR = 190:untyped int
  const SYS_FSTAT                         SYS_FSTAT = 5:untyped int
  const SYS_FSTATFS                       SYS_FSTATFS = 138:untyped int
  const SYS_FSYNC                         SYS_FSYNC = 74:untyped int
  const SYS_FTRUNCATE                     SYS_FTRUNCATE = 77:untyped int
  const SYS_FUTEX                         SYS_FUTEX = 202:untyped int
  const SYS_FUTIMESAT                     SYS_FUTIMESAT = 261:untyped int
  const SYS_GETCWD                        SYS_GETCWD = 79:untyped int
  const SYS_GETDENTS                      SYS_GETDENTS = 78:untyped int
  const SYS_GETDENTS64                    SYS_GETDENTS64 = 217:untyped int
  const SYS_GETEGID                       SYS_GETEGID = 108:untyped int
  const SYS_GETEUID                       SYS_GETEUID = 107:untyped int
  const SYS_GETGID                        SYS_GETGID = 104:untyped int
  const SYS_GETGROUPS                     SYS_GETGROUPS = 115:untyped int
  const SYS_GETITIMER                     SYS_GETITIMER = 36:untyped int
  const SYS_GETPEERNAME                   SYS_GETPEERNAME = 52:untyped int
  const SYS_GETPGID                       SYS_GETPGID = 121:untyped int
  const SYS_GETPGRP                       SYS_GETPGRP = 111:untyped int
  const SYS_GETPID                        SYS_GETPID = 39:untyped int
  const SYS_GETPMSG                       SYS_GETPMSG = 181:untyped int
  const SYS_GETPPID                       SYS_GETPPID = 110:untyped int
  const SYS_GETPRIORITY                   SYS_GETPRIORITY = 140:untyped int
  const SYS_GETRESGID                     SYS_GETRESGID = 120:untyped int
  const SYS_GETRESUID                     SYS_GETRESUID = 118:untyped int
  const SYS_GETRLIMIT                     SYS_GETRLIMIT = 97:untyped int
  const SYS_GETRUSAGE                     SYS_GETRUSAGE = 98:untyped int
  const SYS_GETSID                        SYS_GETSID = 124:untyped int
  const SYS_GETSOCKNAME                   SYS_GETSOCKNAME = 51:untyped int
  const SYS_GETSOCKOPT                    SYS_GETSOCKOPT = 55:untyped int
  const SYS_GETTID                        SYS_GETTID = 186:untyped int
  const SYS_GETTIMEOFDAY                  SYS_GETTIMEOFDAY = 96:untyped int
  const SYS_GETUID                        SYS_GETUID = 102:untyped int
  const SYS_GETXATTR                      SYS_GETXATTR = 191:untyped int
  const SYS_GET_KERNEL_SYMS               SYS_GET_KERNEL_SYMS = 177:untyped int
  const SYS_GET_MEMPOLICY                 SYS_GET_MEMPOLICY = 239:untyped int
  const SYS_GET_ROBUST_LIST               SYS_GET_ROBUST_LIST = 274:untyped int
  const SYS_GET_THREAD_AREA               SYS_GET_THREAD_AREA = 211:untyped int
  const SYS_INIT_MODULE                   SYS_INIT_MODULE = 175:untyped int
  const SYS_INOTIFY_ADD_WATCH             SYS_INOTIFY_ADD_WATCH = 254:untyped int
  const SYS_INOTIFY_INIT                  SYS_INOTIFY_INIT = 253:untyped int
  const SYS_INOTIFY_INIT1                 SYS_INOTIFY_INIT1 = 294:untyped int
  const SYS_INOTIFY_RM_WATCH              SYS_INOTIFY_RM_WATCH = 255:untyped int
  const SYS_IOCTL                         SYS_IOCTL = 16:untyped int
  const SYS_IOPERM                        SYS_IOPERM = 173:untyped int
  const SYS_IOPL                          SYS_IOPL = 172:untyped int
  const SYS_IOPRIO_GET                    SYS_IOPRIO_GET = 252:untyped int
  const SYS_IOPRIO_SET                    SYS_IOPRIO_SET = 251:untyped int
  const SYS_IO_CANCEL                     SYS_IO_CANCEL = 210:untyped int
  const SYS_IO_DESTROY                    SYS_IO_DESTROY = 207:untyped int
  const SYS_IO_GETEVENTS                  SYS_IO_GETEVENTS = 208:untyped int
  const SYS_IO_SETUP                      SYS_IO_SETUP = 206:untyped int
  const SYS_IO_SUBMIT                     SYS_IO_SUBMIT = 209:untyped int
  const SYS_KEXEC_LOAD                    SYS_KEXEC_LOAD = 246:untyped int
  const SYS_KEYCTL                        SYS_KEYCTL = 250:untyped int
  const SYS_KILL                          SYS_KILL = 62:untyped int
  const SYS_LCHOWN                        SYS_LCHOWN = 94:untyped int
  const SYS_LGETXATTR                     SYS_LGETXATTR = 192:untyped int
  const SYS_LINK                          SYS_LINK = 86:untyped int
  const SYS_LINKAT                        SYS_LINKAT = 265:untyped int
  const SYS_LISTEN                        SYS_LISTEN = 50:untyped int
  const SYS_LISTXATTR                     SYS_LISTXATTR = 194:untyped int
  const SYS_LLISTXATTR                    SYS_LLISTXATTR = 195:untyped int
  const SYS_LOOKUP_DCOOKIE                SYS_LOOKUP_DCOOKIE = 212:untyped int
  const SYS_LREMOVEXATTR                  SYS_LREMOVEXATTR = 198:untyped int
  const SYS_LSEEK                         SYS_LSEEK = 8:untyped int
  const SYS_LSETXATTR                     SYS_LSETXATTR = 189:untyped int
  const SYS_LSTAT                         SYS_LSTAT = 6:untyped int
  const SYS_MADVISE                       SYS_MADVISE = 28:untyped int
  const SYS_MBIND                         SYS_MBIND = 237:untyped int
  const SYS_MIGRATE_PAGES                 SYS_MIGRATE_PAGES = 256:untyped int
  const SYS_MINCORE                       SYS_MINCORE = 27:untyped int
  const SYS_MKDIR                         SYS_MKDIR = 83:untyped int
  const SYS_MKDIRAT                       SYS_MKDIRAT = 258:untyped int
  const SYS_MKNOD                         SYS_MKNOD = 133:untyped int
  const SYS_MKNODAT                       SYS_MKNODAT = 259:untyped int
  const SYS_MLOCK                         SYS_MLOCK = 149:untyped int
  const SYS_MLOCKALL                      SYS_MLOCKALL = 151:untyped int
  const SYS_MMAP                          SYS_MMAP = 9:untyped int
  const SYS_MODIFY_LDT                    SYS_MODIFY_LDT = 154:untyped int
  const SYS_MOUNT                         SYS_MOUNT = 165:untyped int
  const SYS_MOVE_PAGES                    SYS_MOVE_PAGES = 279:untyped int
  const SYS_MPROTECT                      SYS_MPROTECT = 10:untyped int
  const SYS_MQ_GETSETATTR                 SYS_MQ_GETSETATTR = 245:untyped int
  const SYS_MQ_NOTIFY                     SYS_MQ_NOTIFY = 244:untyped int
  const SYS_MQ_OPEN                       SYS_MQ_OPEN = 240:untyped int
  const SYS_MQ_TIMEDRECEIVE               SYS_MQ_TIMEDRECEIVE = 243:untyped int
  const SYS_MQ_TIMEDSEND                  SYS_MQ_TIMEDSEND = 242:untyped int
  const SYS_MQ_UNLINK                     SYS_MQ_UNLINK = 241:untyped int
  const SYS_MREMAP                        SYS_MREMAP = 25:untyped int
  const SYS_MSGCTL                        SYS_MSGCTL = 71:untyped int
  const SYS_MSGGET                        SYS_MSGGET = 68:untyped int
  const SYS_MSGRCV                        SYS_MSGRCV = 70:untyped int
  const SYS_MSGSND                        SYS_MSGSND = 69:untyped int
  const SYS_MSYNC                         SYS_MSYNC = 26:untyped int
  const SYS_MUNLOCK                       SYS_MUNLOCK = 150:untyped int
  const SYS_MUNLOCKALL                    SYS_MUNLOCKALL = 152:untyped int
  const SYS_MUNMAP                        SYS_MUNMAP = 11:untyped int
  const SYS_NANOSLEEP                     SYS_NANOSLEEP = 35:untyped int
  const SYS_NEWFSTATAT                    SYS_NEWFSTATAT = 262:untyped int
  const SYS_NFSSERVCTL                    SYS_NFSSERVCTL = 180:untyped int
  const SYS_OPEN                          SYS_OPEN = 2:untyped int
  const SYS_OPENAT                        SYS_OPENAT = 257:untyped int
  const SYS_PAUSE                         SYS_PAUSE = 34:untyped int
  const SYS_PERF_EVENT_OPEN               SYS_PERF_EVENT_OPEN = 298:untyped int
  const SYS_PERSONALITY                   SYS_PERSONALITY = 135:untyped int
  const SYS_PIPE                          SYS_PIPE = 22:untyped int
  const SYS_PIPE2                         SYS_PIPE2 = 293:untyped int
  const SYS_PIVOT_ROOT                    SYS_PIVOT_ROOT = 155:untyped int
  const SYS_POLL                          SYS_POLL = 7:untyped int
  const SYS_PPOLL                         SYS_PPOLL = 271:untyped int
  const SYS_PRCTL                         SYS_PRCTL = 157:untyped int
  const SYS_PREAD64                       SYS_PREAD64 = 17:untyped int
  const SYS_PREADV                        SYS_PREADV = 295:untyped int
  const SYS_PRLIMIT64                     SYS_PRLIMIT64 = 302:untyped int
  const SYS_PSELECT6                      SYS_PSELECT6 = 270:untyped int
  const SYS_PTRACE                        SYS_PTRACE = 101:untyped int
  const SYS_PUTPMSG                       SYS_PUTPMSG = 182:untyped int
  const SYS_PWRITE64                      SYS_PWRITE64 = 18:untyped int
  const SYS_PWRITEV                       SYS_PWRITEV = 296:untyped int
  const SYS_QUERY_MODULE                  SYS_QUERY_MODULE = 178:untyped int
  const SYS_QUOTACTL                      SYS_QUOTACTL = 179:untyped int
  const SYS_READ                          SYS_READ = 0:untyped int
  const SYS_READAHEAD                     SYS_READAHEAD = 187:untyped int
  const SYS_READLINK                      SYS_READLINK = 89:untyped int
  const SYS_READLINKAT                    SYS_READLINKAT = 267:untyped int
  const SYS_READV                         SYS_READV = 19:untyped int
  const SYS_REBOOT                        SYS_REBOOT = 169:untyped int
  const SYS_RECVFROM                      SYS_RECVFROM = 45:untyped int
  const SYS_RECVMMSG                      SYS_RECVMMSG = 299:untyped int
  const SYS_RECVMSG                       SYS_RECVMSG = 47:untyped int
  const SYS_REMAP_FILE_PAGES              SYS_REMAP_FILE_PAGES = 216:untyped int
  const SYS_REMOVEXATTR                   SYS_REMOVEXATTR = 197:untyped int
  const SYS_RENAME                        SYS_RENAME = 82:untyped int
  const SYS_RENAMEAT                      SYS_RENAMEAT = 264:untyped int
  const SYS_REQUEST_KEY                   SYS_REQUEST_KEY = 249:untyped int
  const SYS_RESTART_SYSCALL               SYS_RESTART_SYSCALL = 219:untyped int
  const SYS_RMDIR                         SYS_RMDIR = 84:untyped int
  const SYS_RT_SIGACTION                  SYS_RT_SIGACTION = 13:untyped int
  const SYS_RT_SIGPENDING                 SYS_RT_SIGPENDING = 127:untyped int
  const SYS_RT_SIGPROCMASK                SYS_RT_SIGPROCMASK = 14:untyped int
  const SYS_RT_SIGQUEUEINFO               SYS_RT_SIGQUEUEINFO = 129:untyped int
  const SYS_RT_SIGRETURN                  SYS_RT_SIGRETURN = 15:untyped int
  const SYS_RT_SIGSUSPEND                 SYS_RT_SIGSUSPEND = 130:untyped int
  const SYS_RT_SIGTIMEDWAIT               SYS_RT_SIGTIMEDWAIT = 128:untyped int
  const SYS_RT_TGSIGQUEUEINFO             SYS_RT_TGSIGQUEUEINFO = 297:untyped int
  const SYS_SCHED_GETAFFINITY             SYS_SCHED_GETAFFINITY = 204:untyped int
  const SYS_SCHED_GETPARAM                SYS_SCHED_GETPARAM = 143:untyped int
  const SYS_SCHED_GETSCHEDULER            SYS_SCHED_GETSCHEDULER = 145:untyped int
  const SYS_SCHED_GET_PRIORITY_MAX        SYS_SCHED_GET_PRIORITY_MAX = 146:untyped int
  const SYS_SCHED_GET_PRIORITY_MIN        SYS_SCHED_GET_PRIORITY_MIN = 147:untyped int
  const SYS_SCHED_RR_GET_INTERVAL         SYS_SCHED_RR_GET_INTERVAL = 148:untyped int
  const SYS_SCHED_SETAFFINITY             SYS_SCHED_SETAFFINITY = 203:untyped int
  const SYS_SCHED_SETPARAM                SYS_SCHED_SETPARAM = 142:untyped int
  const SYS_SCHED_SETSCHEDULER            SYS_SCHED_SETSCHEDULER = 144:untyped int
  const SYS_SCHED_YIELD                   SYS_SCHED_YIELD = 24:untyped int
  const SYS_SECURITY                      SYS_SECURITY = 185:untyped int
  const SYS_SELECT                        SYS_SELECT = 23:untyped int
  const SYS_SEMCTL                        SYS_SEMCTL = 66:untyped int
  const SYS_SEMGET                        SYS_SEMGET = 64:untyped int
  const SYS_SEMOP                         SYS_SEMOP = 65:untyped int
  const SYS_SEMTIMEDOP                    SYS_SEMTIMEDOP = 220:untyped int
  const SYS_SENDFILE                      SYS_SENDFILE = 40:untyped int
  const SYS_SENDMSG                       SYS_SENDMSG = 46:untyped int
  const SYS_SENDTO                        SYS_SENDTO = 44:untyped int
  const SYS_SETDOMAINNAME                 SYS_SETDOMAINNAME = 171:untyped int
  const SYS_SETFSGID                      SYS_SETFSGID = 123:untyped int
  const SYS_SETFSUID                      SYS_SETFSUID = 122:untyped int
  const SYS_SETGID                        SYS_SETGID = 106:untyped int
  const SYS_SETGROUPS                     SYS_SETGROUPS = 116:untyped int
  const SYS_SETHOSTNAME                   SYS_SETHOSTNAME = 170:untyped int
  const SYS_SETITIMER                     SYS_SETITIMER = 38:untyped int
  const SYS_SETPGID                       SYS_SETPGID = 109:untyped int
  const SYS_SETPRIORITY                   SYS_SETPRIORITY = 141:untyped int
  const SYS_SETREGID                      SYS_SETREGID = 114:untyped int
  const SYS_SETRESGID                     SYS_SETRESGID = 119:untyped int
  const SYS_SETRESUID                     SYS_SETRESUID = 117:untyped int
  const SYS_SETREUID                      SYS_SETREUID = 113:untyped int
  const SYS_SETRLIMIT                     SYS_SETRLIMIT = 160:untyped int
  const SYS_SETSID                        SYS_SETSID = 112:untyped int
  const SYS_SETSOCKOPT                    SYS_SETSOCKOPT = 54:untyped int
  const SYS_SETTIMEOFDAY                  SYS_SETTIMEOFDAY = 164:untyped int
  const SYS_SETUID                        SYS_SETUID = 105:untyped int
  const SYS_SETXATTR                      SYS_SETXATTR = 188:untyped int
  const SYS_SET_MEMPOLICY                 SYS_SET_MEMPOLICY = 238:untyped int
  const SYS_SET_ROBUST_LIST               SYS_SET_ROBUST_LIST = 273:untyped int
  const SYS_SET_THREAD_AREA               SYS_SET_THREAD_AREA = 205:untyped int
  const SYS_SET_TID_ADDRESS               SYS_SET_TID_ADDRESS = 218:untyped int
  const SYS_SHMAT                         SYS_SHMAT = 30:untyped int
  const SYS_SHMCTL                        SYS_SHMCTL = 31:untyped int
  const SYS_SHMDT                         SYS_SHMDT = 67:untyped int
  const SYS_SHMGET                        SYS_SHMGET = 29:untyped int
  const SYS_SHUTDOWN                      SYS_SHUTDOWN = 48:untyped int
  const SYS_SIGALTSTACK                   SYS_SIGALTSTACK = 131:untyped int
  const SYS_SIGNALFD                      SYS_SIGNALFD = 282:untyped int
  const SYS_SIGNALFD4                     SYS_SIGNALFD4 = 289:untyped int
  const SYS_SOCKET                        SYS_SOCKET = 41:untyped int
  const SYS_SOCKETPAIR                    SYS_SOCKETPAIR = 53:untyped int
  const SYS_SPLICE                        SYS_SPLICE = 275:untyped int
  const SYS_STAT                          SYS_STAT = 4:untyped int
  const SYS_STATFS                        SYS_STATFS = 137:untyped int
  const SYS_SWAPOFF                       SYS_SWAPOFF = 168:untyped int
  const SYS_SWAPON                        SYS_SWAPON = 167:untyped int
  const SYS_SYMLINK                       SYS_SYMLINK = 88:untyped int
  const SYS_SYMLINKAT                     SYS_SYMLINKAT = 266:untyped int
  const SYS_SYNC                          SYS_SYNC = 162:untyped int
  const SYS_SYNC_FILE_RANGE               SYS_SYNC_FILE_RANGE = 277:untyped int
  const SYS_SYSFS                         SYS_SYSFS = 139:untyped int
  const SYS_SYSINFO                       SYS_SYSINFO = 99:untyped int
  const SYS_SYSLOG                        SYS_SYSLOG = 103:untyped int
  const SYS_TEE                           SYS_TEE = 276:untyped int
  const SYS_TGKILL                        SYS_TGKILL = 234:untyped int
  const SYS_TIME                          SYS_TIME = 201:untyped int
  const SYS_TIMERFD_CREATE                SYS_TIMERFD_CREATE = 283:untyped int
  const SYS_TIMERFD_GETTIME               SYS_TIMERFD_GETTIME = 287:untyped int
  const SYS_TIMERFD_SETTIME               SYS_TIMERFD_SETTIME = 286:untyped int
  const SYS_TIMER_CREATE                  SYS_TIMER_CREATE = 222:untyped int
  const SYS_TIMER_DELETE                  SYS_TIMER_DELETE = 226:untyped int
  const SYS_TIMER_GETOVERRUN              SYS_TIMER_GETOVERRUN = 225:untyped int
  const SYS_TIMER_GETTIME                 SYS_TIMER_GETTIME = 224:untyped int
  const SYS_TIMER_SETTIME                 SYS_TIMER_SETTIME = 223:untyped int
  const SYS_TIMES                         SYS_TIMES = 100:untyped int
  const SYS_TKILL                         SYS_TKILL = 200:untyped int
  const SYS_TRUNCATE                      SYS_TRUNCATE = 76:untyped int
  const SYS_TUXCALL                       SYS_TUXCALL = 184:untyped int
  const SYS_UMASK                         SYS_UMASK = 95:untyped int
  const SYS_UMOUNT2                       SYS_UMOUNT2 = 166:untyped int
  const SYS_UNAME                         SYS_UNAME = 63:untyped int
  const SYS_UNLINK                        SYS_UNLINK = 87:untyped int
  const SYS_UNLINKAT                      SYS_UNLINKAT = 263:untyped int
  const SYS_UNSHARE                       SYS_UNSHARE = 272:untyped int
  const SYS_USELIB                        SYS_USELIB = 134:untyped int
  const SYS_USTAT                         SYS_USTAT = 136:untyped int
  const SYS_UTIME                         SYS_UTIME = 132:untyped int
  const SYS_UTIMENSAT                     SYS_UTIMENSAT = 280:untyped int
  const SYS_UTIMES                        SYS_UTIMES = 235:untyped int
  const SYS_VFORK                         SYS_VFORK = 58:untyped int
  const SYS_VHANGUP                       SYS_VHANGUP = 153:untyped int
  const SYS_VMSPLICE                      SYS_VMSPLICE = 278:untyped int
  const SYS_VSERVER                       SYS_VSERVER = 236:untyped int
  const SYS_WAIT4                         SYS_WAIT4 = 61:untyped int
  const SYS_WAITID                        SYS_WAITID = 247:untyped int
  const SYS_WRITE                         SYS_WRITE = 1:untyped int
  const SYS_WRITEV                        SYS_WRITEV = 20:untyped int
  const SYS__SYSCTL                       SYS__SYSCTL = 156:untyped int
  const S_BLKSIZE                         S_BLKSIZE = 512:untyped int
  const S_IEXEC                           S_IEXEC = 64:untyped int
  const S_IFBLK                           S_IFBLK = 24576:untyped int
  const S_IFCHR                           S_IFCHR = 8192:untyped int
  const S_IFDIR                           S_IFDIR = 16384:untyped int
  const S_IFIFO                           S_IFIFO = 4096:untyped int
  const S_IFLNK                           S_IFLNK = 40960:untyped int
  const S_IFMT                            S_IFMT = 61440:untyped int
  const S_IFREG                           S_IFREG = 32768:untyped int
  const S_IFSOCK                          S_IFSOCK = 49152:untyped int
  const S_IREAD                           S_IREAD = 256:untyped int
  const S_IRGRP                           S_IRGRP = 32:untyped int
  const S_IROTH                           S_IROTH = 4:untyped int
  const S_IRUSR                           S_IRUSR = 256:untyped int
  const S_IRWXG                           S_IRWXG = 56:untyped int
  const S_IRWXO                           S_IRWXO = 7:untyped int
  const S_IRWXU                           S_IRWXU = 448:untyped int
  const S_ISGID                           S_ISGID = 1024:untyped int
  const S_ISUID                           S_ISUID = 2048:untyped int
  const S_ISVTX                           S_ISVTX = 512:untyped int
  const S_IWGRP                           S_IWGRP = 16:untyped int
  const S_IWOTH                           S_IWOTH = 2:untyped int
  const S_IWRITE                          S_IWRITE = 128:untyped int
  const S_IWUSR                           S_IWUSR = 128:untyped int
  const S_IXGRP                           S_IXGRP = 8:untyped int
  const S_IXOTH                           S_IXOTH = 1:untyped int
  const S_IXUSR                           S_IXUSR = 64:untyped int
  func  Seek                              func(fd int, offset int64, whence int) (off int64, err error)
  func  Select                            func(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error)
  func  Sendfile                          func(outfd int, infd int, offset *int64, count int) (written int, err error)
  func  Sendmsg                           func(fd int, p []byte, oob []byte, to Sockaddr, flags int) (err error)
  func  SendmsgN                          func(fd int, p []byte, oob []byte, to Sockaddr, flags int) (n int, err error)
  func  Sendto                            func(fd int, p []byte, flags int, to Sockaddr) (err error)
  func  SetLsfPromisc                     func(name string, m bool) error
  func  SetNonblock                       func(fd int, nonblocking bool) (err error)
  func  Setdomainname                     func(p []byte) (err error)
  func  Setenv                            func(key string, value string) error
  func  Setfsgid                          func(gid int) (err error)
  func  Setfsuid                          func(uid int) (err error)
  func  Setgid                            func(gid int) (err error)
  func  Setgroups                         func(gids []int) (err error)
  func  Sethostname                       func(p []byte) (err error)
  func  Setpgid                           func(pid int, pgid int) (err error)
  func  Setpriority                       func(which int, who int, prio int) (err error)
  func  Setregid                          func(rgid int, egid int) (err error)
  func  Setresgid                         func(rgid int, egid int, sgid int) (err error)
  func  Setresuid                         func(ruid int, euid int, suid int) (err error)
  func  Setreuid                          func(ruid int, euid int) (err error)
  func  Setrlimit                         func(resource int, rlim *Rlimit) (err error)
  func  Setsid                            func() (pid int, err error)
  func  SetsockoptByte                    func(fd int, level int, opt int, value byte) (err error)
  func  SetsockoptICMPv6Filter            func(fd int, level int, opt int, filter *ICMPv6Filter) error
  func  SetsockoptIPMreq                  func(fd int, level int, opt int, mreq *IPMreq) (err error)
  func  SetsockoptIPMreqn                 func(fd int, level int, opt int, mreq *IPMreqn) (err error)
  func  SetsockoptIPv6Mreq                func(fd int, level int, opt int, mreq *IPv6Mreq) (err error)
  func  SetsockoptInet4Addr               func(fd int, level int, opt int, value [4]byte) (err error)
  func  SetsockoptInt                     func(fd int, level int, opt int, value int) (err error)
  func  SetsockoptLinger                  func(fd int, level int, opt int, l *Linger) (err error)
  func  SetsockoptString                  func(fd int, level int, opt int, s string) (err error)
  func  SetsockoptTimeval                 func(fd int, level int, opt int, tv *Timeval) (err error)
  func  Settimeofday                      func(tv *Timeval) (err error)
  func  Setuid                            func(uid int) (err error)
  func  Setxattr                          func(path string, attr string, data []byte, flags int) (err error)
  func  Shutdown                          func(fd int, how int) (err error)
  type  Signal                            int
    method (Signal) Signal()
    method (Signal) String() string
  const SizeofCmsghdr                     SizeofCmsghdr = 16:untyped int
  const SizeofICMPv6Filter                SizeofICMPv6Filter = 32:untyped int
  const SizeofIPMreq                      SizeofIPMreq = 8:untyped int
  const SizeofIPMreqn                     SizeofIPMreqn = 12:untyped int
  const SizeofIPv6MTUInfo                 SizeofIPv6MTUInfo = 32:untyped int
  const SizeofIPv6Mreq                    SizeofIPv6Mreq = 20:untyped int
  const SizeofIfAddrmsg                   SizeofIfAddrmsg = 8:untyped int
  const SizeofIfInfomsg                   SizeofIfInfomsg = 16:untyped int
  const SizeofInet4Pktinfo                SizeofInet4Pktinfo = 12:untyped int
  const SizeofInet6Pktinfo                SizeofInet6Pktinfo = 20:untyped int
  const SizeofInotifyEvent                SizeofInotifyEvent = 16:untyped int
  const SizeofLinger                      SizeofLinger = 8:untyped int
  const SizeofMsghdr                      SizeofMsghdr = 56:untyped int
  const SizeofNlAttr                      SizeofNlAttr = 4:untyped int
  const SizeofNlMsgerr                    SizeofNlMsgerr = 20:untyped int
  const SizeofNlMsghdr                    SizeofNlMsghdr = 16:untyped int
  const SizeofRtAttr                      SizeofRtAttr = 4:untyped int
  const SizeofRtGenmsg                    SizeofRtGenmsg = 1:untyped int
  const SizeofRtMsg                       SizeofRtMsg = 12:untyped int
  const SizeofRtNexthop                   SizeofRtNexthop = 8:untyped int
  const SizeofSockFilter                  SizeofSockFilter = 8:untyped int
  const SizeofSockFprog                   SizeofSockFprog = 16:untyped int
  const SizeofSockaddrAny                 SizeofSockaddrAny = 112:untyped int
  const SizeofSockaddrInet4               SizeofSockaddrInet4 = 16:untyped int
  const SizeofSockaddrInet6               SizeofSockaddrInet6 = 28:untyped int
  const SizeofSockaddrLinklayer           SizeofSockaddrLinklayer = 20:untyped int
  const SizeofSockaddrNetlink             SizeofSockaddrNetlink = 12:untyped int
  const SizeofSockaddrUnix                SizeofSockaddrUnix = 110:untyped int
  const SizeofTCPInfo                     SizeofTCPInfo = 104:untyped int
  const SizeofUcred                       SizeofUcred = 12:untyped int
  func  SlicePtrFromStrings               func(ss []string) ([]*byte, error)
  type  SockFilter                        struct{Code uint16; Jt uint8; Jf uint8; K uint32}
  type  SockFprog                         struct{Len uint16; Pad_cgo_0 [6]byte; Filter *SockFilter}
  type  Sockaddr                          interface{sockaddr() (ptr unsafe.Pointer, len _Socklen, err error)}
    method (Sockaddr) sockaddr() (ptr unsafe.Pointer, len _Socklen, err error)
  type  SockaddrInet4                     struct{Port int; Addr [4]byte; raw RawSockaddrInet4}
    method (*SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error)
  type  SockaddrInet6                     struct{Port int; ZoneId uint32; Addr [16]byte; raw RawSockaddrInet6}
    method (*SockaddrInet6) sockaddr() (unsafe.Pointer, _Socklen, error)
  type  SockaddrLinklayer                 struct{Protocol uint16; Ifindex int; Hatype uint16; Pkttype uint8; Halen uint8; Addr [8]byte; raw RawSockaddrLinklayer}
    method (*SockaddrLinklayer) sockaddr() (unsafe.Pointer, _Socklen, error)
  type  SockaddrNetlink                   struct{Family uint16; Pad uint16; Pid uint32; Groups uint32; raw RawSockaddrNetlink}
    method (*SockaddrNetlink) sockaddr() (unsafe.Pointer, _Socklen, error)
  type  SockaddrUnix                      struct{Name string; raw RawSockaddrUnix}
    method (*SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error)
  func  Socket                            func(domain int, typ int, proto int) (fd int, err error)
  type  SocketControlMessage              struct{Header Cmsghdr; Data []byte}
  var   SocketDisableIPv6                 bool
  func  Socketpair                        func(domain int, typ int, proto int) (fd [2]int, err error)
  func  Splice                            func(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error)
  func  StartProcess                      func(argv0 string, argv []string, attr *ProcAttr) (pid int, handle uintptr, err error)
  func  Stat                              func(path string, stat *Stat_t) (err error)
  type  Stat_t                            struct{Dev uint64; Ino uint64; Nlink uint64; Mode uint32; Uid uint32; Gid uint32; X__pad0 int32; Rdev uint64; Size int64; Blksize int64; Blocks int64; Atim Timespec; Mtim Timespec; Ctim Timespec; X__unused [3]int64}
  func  Statfs                            func(path string, buf *Statfs_t) (err error)
  type  Statfs_t                          struct{Type int64; Bsize int64; Blocks uint64; Bfree uint64; Bavail uint64; Files uint64; Ffree uint64; Fsid Fsid; Namelen int64; Frsize int64; Flags int64; Spare [4]int64}
  var   Stderr                            int
  var   Stdin                             int
  var   Stdout                            int
  func  StringBytePtr                     func(s string) *byte
  func  StringByteSlice                   func(s string) []byte
  func  StringSlicePtr                    func(ss []string) []*byte
  func  Symlink                           func(oldpath string, newpath string) (err error)
  func  Sync                              func()
  func  SyncFileRange                     func(fd int, off int64, n int64, flags int) (err error)
  type  SysProcAttr                       struct{Chroot string; Credential *Credential; Ptrace bool; Setsid bool; Setpgid bool; Setctty bool; Noctty bool; Ctty int; Foreground bool; Pgid int; Pdeathsig Signal; Cloneflags uintptr; Unshareflags uintptr; UidMappings []SysProcIDMap; GidMappings []SysProcIDMap; GidMappingsEnableSetgroups bool}
  type  SysProcIDMap                      struct{ContainerID int; HostID int; Size int}
  func  Syscall                           func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err Errno)
  func  Syscall6                          func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr) (r1 uintptr, r2 uintptr, err Errno)
  func  Sysinfo                           func(info *Sysinfo_t) (err error)
  type  Sysinfo_t                         struct{Uptime int64; Loads [3]uint64; Totalram uint64; Freeram uint64; Sharedram uint64; Bufferram uint64; Totalswap uint64; Freeswap uint64; Procs uint16; Pad uint16; Pad_cgo_0 [4]byte; Totalhigh uint64; Freehigh uint64; Unit uint32; X_f [0]byte; Pad_cgo_1 [4]byte}
  const TCGETS                            TCGETS = 21505:untyped int
  const TCIFLUSH                          TCIFLUSH = 0:untyped int
  const TCIOFLUSH                         TCIOFLUSH = 2:untyped int
  const TCOFLUSH                          TCOFLUSH = 1:untyped int
  type  TCPInfo                           struct{State uint8; Ca_state uint8; Retransmits uint8; Probes uint8; Backoff uint8; Options uint8; Pad_cgo_0 [2]byte; Rto uint32; Ato uint32; Snd_mss uint32; Rcv_mss uint32; Unacked uint32; Sacked uint32; Lost uint32; Retrans uint32; Fackets uint32; Last_data_sent uint32; Last_ack_sent uint32; Last_data_recv uint32; Last_ack_recv uint32; Pmtu uint32; Rcv_ssthresh uint32; Rtt uint32; Rttvar uint32; Snd_ssthresh uint32; Snd_cwnd uint32; Advmss uint32; Reordering uint32; Rcv_rtt uint32; Rcv_space uint32; Total_retrans uint32}
  const TCP_CONGESTION                    TCP_CONGESTION = 13:untyped int
  const TCP_CORK                          TCP_CORK = 3:untyped int
  const TCP_DEFER_ACCEPT                  TCP_DEFER_ACCEPT = 9:untyped int
  const TCP_INFO                          TCP_INFO = 11:untyped int
  const TCP_KEEPCNT                       TCP_KEEPCNT = 6:untyped int
  const TCP_KEEPIDLE                      TCP_KEEPIDLE = 4:untyped int
  const TCP_KEEPINTVL                     TCP_KEEPINTVL = 5:untyped int
  const TCP_LINGER2                       TCP_LINGER2 = 8:untyped int
  const TCP_MAXSEG                        TCP_MAXSEG = 2:untyped int
  const TCP_MAXWIN                        TCP_MAXWIN = 65535:untyped int
  const TCP_MAX_WINSHIFT                  TCP_MAX_WINSHIFT = 14:untyped int
  const TCP_MD5SIG                        TCP_MD5SIG = 14:untyped int
  const TCP_MD5SIG_MAXKEYLEN              TCP_MD5SIG_MAXKEYLEN = 80:untyped int
  const TCP_MSS                           TCP_MSS = 512:untyped int
  const TCP_NODELAY                       TCP_NODELAY = 1:untyped int
  const TCP_QUICKACK                      TCP_QUICKACK = 12:untyped int
  const TCP_SYNCNT                        TCP_SYNCNT = 7:untyped int
  const TCP_WINDOW_CLAMP                  TCP_WINDOW_CLAMP = 10:untyped int
  const TCSETS                            TCSETS = 21506:untyped int
  const TIOCCBRK                          TIOCCBRK = 21544:untyped int
  const TIOCCONS                          TIOCCONS = 21533:untyped int
  const TIOCEXCL                          TIOCEXCL = 21516:untyped int
  const TIOCGDEV                          TIOCGDEV = 2147767346:untyped int
  const TIOCGETD                          TIOCGETD = 21540:untyped int
  const TIOCGICOUNT                       TIOCGICOUNT = 21597:untyped int
  const TIOCGLCKTRMIOS                    TIOCGLCKTRMIOS = 21590:untyped int
  const TIOCGPGRP                         TIOCGPGRP = 21519:untyped int
  const TIOCGPTN                          TIOCGPTN = 2147767344:untyped int
  const TIOCGRS485                        TIOCGRS485 = 21550:untyped int
  const TIOCGSERIAL                       TIOCGSERIAL = 21534:untyped int
  const TIOCGSID                          TIOCGSID = 21545:untyped int
  const TIOCGSOFTCAR                      TIOCGSOFTCAR = 21529:untyped int
  const TIOCGWINSZ                        TIOCGWINSZ = 21523:untyped int
  const TIOCINQ                           TIOCINQ = 21531:untyped int
  const TIOCLINUX                         TIOCLINUX = 21532:untyped int
  const TIOCMBIC                          TIOCMBIC = 21527:untyped int
  const TIOCMBIS                          TIOCMBIS = 21526:untyped int
  const TIOCMGET                          TIOCMGET = 21525:untyped int
  const TIOCMIWAIT                        TIOCMIWAIT = 21596:untyped int
  const TIOCMSET                          TIOCMSET = 21528:untyped int
  const TIOCM_CAR                         TIOCM_CAR = 64:untyped int
  const TIOCM_CD                          TIOCM_CD = 64:untyped int
  const TIOCM_CTS                         TIOCM_CTS = 32:untyped int
  const TIOCM_DSR                         TIOCM_DSR = 256:untyped int
  const TIOCM_DTR                         TIOCM_DTR = 2:untyped int
  const TIOCM_LE                          TIOCM_LE = 1:untyped int
  const TIOCM_RI                          TIOCM_RI = 128:untyped int
  const TIOCM_RNG                         TIOCM_RNG = 128:untyped int
  const TIOCM_RTS                         TIOCM_RTS = 4:untyped int
  const TIOCM_SR                          TIOCM_SR = 16:untyped int
  const TIOCM_ST                          TIOCM_ST = 8:untyped int
  const TIOCNOTTY                         TIOCNOTTY = 21538:untyped int
  const TIOCNXCL                          TIOCNXCL = 21517:untyped int
  const TIOCOUTQ                          TIOCOUTQ = 21521:untyped int
  const TIOCPKT                           TIOCPKT = 21536:untyped int
  const TIOCPKT_DATA                      TIOCPKT_DATA = 0:untyped int
  const TIOCPKT_DOSTOP                    TIOCPKT_DOSTOP = 32:untyped int
  const TIOCPKT_FLUSHREAD                 TIOCPKT_FLUSHREAD = 1:untyped int
  const TIOCPKT_FLUSHWRITE                TIOCPKT_FLUSHWRITE = 2:untyped int
  const TIOCPKT_IOCTL                     TIOCPKT_IOCTL = 64:untyped int
  const TIOCPKT_NOSTOP                    TIOCPKT_NOSTOP = 16:untyped int
  const TIOCPKT_START                     TIOCPKT_START = 8:untyped int
  const TIOCPKT_STOP                      TIOCPKT_STOP = 4:untyped int
  const TIOCSBRK                          TIOCSBRK = 21543:untyped int
  const TIOCSCTTY                         TIOCSCTTY = 21518:untyped int
  const TIOCSERCONFIG                     TIOCSERCONFIG = 21587:untyped int
  const TIOCSERGETLSR                     TIOCSERGETLSR = 21593:untyped int
  const TIOCSERGETMULTI                   TIOCSERGETMULTI = 21594:untyped int
  const TIOCSERGSTRUCT                    TIOCSERGSTRUCT = 21592:untyped int
  const TIOCSERGWILD                      TIOCSERGWILD = 21588:untyped int
  const TIOCSERSETMULTI                   TIOCSERSETMULTI = 21595:untyped int
  const TIOCSERSWILD                      TIOCSERSWILD = 21589:untyped int
  const TIOCSER_TEMT                      TIOCSER_TEMT = 1:untyped int
  const TIOCSETD                          TIOCSETD = 21539:untyped int
  const TIOCSIG                           TIOCSIG = 1074025526:untyped int
  const TIOCSLCKTRMIOS                    TIOCSLCKTRMIOS = 21591:untyped int
  const TIOCSPGRP                         TIOCSPGRP = 21520:untyped int
  const TIOCSPTLCK                        TIOCSPTLCK = 1074025521:untyped int
  const TIOCSRS485                        TIOCSRS485 = 21551:untyped int
  const TIOCSSERIAL                       TIOCSSERIAL = 21535:untyped int
  const TIOCSSOFTCAR                      TIOCSSOFTCAR = 21530:untyped int
  const TIOCSTI                           TIOCSTI = 21522:untyped int
  const TIOCSWINSZ                        TIOCSWINSZ = 21524:untyped int
  const TOSTOP                            TOSTOP = 256:untyped int
  const TUNATTACHFILTER                   TUNATTACHFILTER = 1074812117:untyped int
  const TUNDETACHFILTER                   TUNDETACHFILTER = 1074812118:untyped int
  const TUNGETFEATURES                    TUNGETFEATURES = 2147767503:untyped int
  const TUNGETIFF                         TUNGETIFF = 2147767506:untyped int
  const TUNGETSNDBUF                      TUNGETSNDBUF = 2147767507:untyped int
  const TUNGETVNETHDRSZ                   TUNGETVNETHDRSZ = 2147767511:untyped int
  const TUNSETDEBUG                       TUNSETDEBUG = 1074025673:untyped int
  const TUNSETGROUP                       TUNSETGROUP = 1074025678:untyped int
  const TUNSETIFF                         TUNSETIFF = 1074025674:untyped int
  const TUNSETLINK                        TUNSETLINK = 1074025677:untyped int
  const TUNSETNOCSUM                      TUNSETNOCSUM = 1074025672:untyped int
  const TUNSETOFFLOAD                     TUNSETOFFLOAD = 1074025680:untyped int
  const TUNSETOWNER                       TUNSETOWNER = 1074025676:untyped int
  const TUNSETPERSIST                     TUNSETPERSIST = 1074025675:untyped int
  const TUNSETSNDBUF                      TUNSETSNDBUF = 1074025684:untyped int
  const TUNSETTXFILTER                    TUNSETTXFILTER = 1074025681:untyped int
  const TUNSETVNETHDRSZ                   TUNSETVNETHDRSZ = 1074025688:untyped int
  func  Tee                               func(rfd int, wfd int, len int, flags int) (n int64, err error)
  type  Termios                           struct{Iflag uint32; Oflag uint32; Cflag uint32; Lflag uint32; Line uint8; Cc [32]uint8; Pad_cgo_0 [3]byte; Ispeed uint32; Ospeed uint32}
  func  Tgkill                            func(tgid int, tid int, sig Signal) (err error)
  func  Time                              func(t *Time_t) (tt Time_t, err error)
  type  Time_t                            int64
  func  Times                             func(tms *Tms) (ticks uintptr, err error)
  type  Timespec                          struct{Sec int64; Nsec int64}
    method (*Timespec) Nano() int64
    method (*Timespec) Unix() (sec int64, nsec int64)
  func  TimespecToNsec                    func(ts Timespec) int64
  type  Timeval                           struct{Sec int64; Usec int64}
    method (*Timeval) Nano() int64
    method (*Timeval) Unix() (sec int64, nsec int64)
  func  TimevalToNsec                     func(tv Timeval) int64
  type  Timex                             struct{Modes uint32; Pad_cgo_0 [4]byte; Offset int64; Freq int64; Maxerror int64; Esterror int64; Status int32; Pad_cgo_1 [4]byte; Constant int64; Precision int64; Tolerance int64; Time Timeval; Tick int64; Ppsfreq int64; Jitter int64; Shift int32; Pad_cgo_2 [4]byte; Stabil int64; Jitcnt int64; Calcnt int64; Errcnt int64; Stbcnt int64; Tai int32; Pad_cgo_3 [44]byte}
  type  Tms                               struct{Utime int64; Stime int64; Cutime int64; Cstime int64}
  func  Truncate                          func(path string, length int64) (err error)
  type  Ucred                             struct{Pid int32; Uid uint32; Gid uint32}
  func  Umask                             func(mask int) (oldmask int)
  func  Uname                             func(buf *Utsname) (err error)
  func  UnixCredentials                   func(ucred *Ucred) []byte
  func  UnixRights                        func(fds ...int) []byte
  func  Unlink                            func(path string) error
  func  Unlinkat                          func(dirfd int, path string) error
  func  Unmount                           func(target string, flags int) (err error)
  func  Unsetenv                          func(key string) error
  func  Unshare                           func(flags int) (err error)
  func  Ustat                             func(dev int, ubuf *Ustat_t) (err error)
  type  Ustat_t                           struct{Tfree int32; Pad_cgo_0 [4]byte; Tinode uint64; Fname [6]int8; Fpack [6]int8; Pad_cgo_1 [4]byte}
  type  Utimbuf                           struct{Actime int64; Modtime int64}
  func  Utime                             func(path string, buf *Utimbuf) (err error)
  func  Utimes                            func(path string, tv []Timeval) (err error)
  func  UtimesNano                        func(path string, ts []Timespec) (err error)
  type  Utsname                           struct{Sysname [65]int8; Nodename [65]int8; Release [65]int8; Version [65]int8; Machine [65]int8; Domainname [65]int8}
  const VDISCARD                          VDISCARD = 13:untyped int
  const VEOF                              VEOF = 4:untyped int
  const VEOL                              VEOL = 11:untyped int
  const VEOL2                             VEOL2 = 16:untyped int
  const VERASE                            VERASE = 2:untyped int
  const VINTR                             VINTR = 0:untyped int
  const VKILL                             VKILL = 3:untyped int
  const VLNEXT                            VLNEXT = 15:untyped int
  const VMIN                              VMIN = 6:untyped int
  const VQUIT                             VQUIT = 1:untyped int
  const VREPRINT                          VREPRINT = 12:untyped int
  const VSTART                            VSTART = 8:untyped int
  const VSTOP                             VSTOP = 9:untyped int
  const VSUSP                             VSUSP = 10:untyped int
  const VSWTC                             VSWTC = 7:untyped int
  const VTIME                             VTIME = 5:untyped int
  const VWERASE                           VWERASE = 14:untyped int
  const WALL                              WALL = 1073741824:untyped int
  const WCLONE                            WCLONE = 2147483648:untyped int
  const WCONTINUED                        WCONTINUED = 8:untyped int
  const WEXITED                           WEXITED = 4:untyped int
  const WNOHANG                           WNOHANG = 1:untyped int
  const WNOTHREAD                         WNOTHREAD = 536870912:untyped int
  const WNOWAIT                           WNOWAIT = 16777216:untyped int
  const WORDSIZE                          WORDSIZE = 64:untyped int
  const WSTOPPED                          WSTOPPED = 2:untyped int
  const WUNTRACED                         WUNTRACED = 2:untyped int
  func  Wait4                             func(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, err error)
  type  WaitStatus                        uint32
    method (WaitStatus) Continued() bool
    method (WaitStatus) CoreDump() bool
    method (WaitStatus) ExitStatus() int
    method (WaitStatus) Exited() bool
    method (WaitStatus) Signal() Signal
    method (WaitStatus) Signaled() bool
    method (WaitStatus) StopSignal() Signal
    method (WaitStatus) Stopped() bool
    method (WaitStatus) TrapCause() int
  func  Write                             func(fd int, p []byte) (n int, err error)
  const XCASE                             XCASE = 4:untyped int
  const _AT_FDCWD                         _AT_FDCWD = -100:untyped int
  const _AT_REMOVEDIR                     _AT_REMOVEDIR = 512:untyped int
  const _AT_SYMLINK_NOFOLLOW              _AT_SYMLINK_NOFOLLOW = 256:untyped int
  type  _C_int                            int32
  type  _C_long                           int64
  type  _C_long_long                      int64
  type  _C_short                          int16
  type  _Gid_t                            uint32
  const _SYS_dup                          _SYS_dup = 33:untyped int
  const _SYS_getdents                     _SYS_getdents = 217:untyped int
  type  _Socklen                          uint32
  var   _zero                             uintptr
  func  accept                            func(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error)
  func  accept4                           func(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (fd int, err error)
  func  anyToSockaddr                     func(rsa *RawSockaddrAny) (Sockaddr, error)
  func  bind                              func(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)
  func  clen                              func(n []byte) int
  func  cmsgAlignOf                       func(salen int) int
  func  cmsgData                          func(h *Cmsghdr) unsafe.Pointer
  func  connect                           func(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)
  func  copyenv                           func()
  const core                              core = 128:untyped int
  const darwin64Bit                       darwin64Bit = false:untyped bool
  const dragonfly64Bit                    dragonfly64Bit = false:untyped bool
  var   env                               map[string]int
  var   envLock                           sync.RWMutex
  var   envOnce                           sync.Once
  var   envs                              []string
  var   errEAGAIN                         error
  var   errEINVAL                         error
  var   errENOENT                         error
  func  errnoErr                          func(e Errno) error
  var   errors                            [133]string
  func  exitThread                        func(code int) (err error)
  const exited                            exited = 0:untyped int
  func  fcntl                             func(fd int, cmd int, arg int) (val int, err error)
  var   fcntl64Syscall                    uintptr
  func  forkAndExecInChild                func(argv0 *byte, argv []*byte, envv []*byte, chroot *byte, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid int, err Errno)
  func  forkExec                          func(argv0 string, argv []string, attr *ProcAttr) (pid int, err error)
  func  forkExecPipe                      func(p []int) (err error)
  func  futimesat                         func(dirfd int, path *byte, times *[2]Timeval) (err error)
  func  getgroups                         func(n int, list *_Gid_t) (nn int, err error)
  func  getpeername                       func(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)
  func  getsockname                       func(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)
  func  getsockopt                        func(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)
  func  gettimeofday                      func(tv *Timeval) (err Errno)
  type  iflags                            struct{name [16]byte; flags uint16}
  func  init                              func()
  var   init$guard                        bool
  var   ioSync                            int64
  func  itoa                              func(val int) string
  func  linkat                            func(olddirfd int, oldpath string, newdirfd int, newpath string, flags int) (err error)
  var   mapper                            *mmapper
  const mask                              mask = 127:untyped int
  func  mmap                              func(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error)
  type  mmapper                           struct{sync.Mutex; active map[*byte][]byte; mmap func(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (uintptr, error); munmap func(addr uintptr, length uintptr) error}
    method (*mmapper) Lock()
    method (*mmapper) Mmap(fd int, offset int64, length int, prot int, flags int) (data []byte, err error)
    method (*mmapper) Munmap(data []byte) (err error)
    method (*mmapper) Unlock()
  func  mount                             func(source string, target string, fstype string, flags uintptr, data *byte) (err error)
  func  msanRead                          func(addr unsafe.Pointer, len int)
  func  msanWrite                         func(addr unsafe.Pointer, len int)
  const msanenabled                       msanenabled = false:untyped bool
  func  munmap                            func(addr uintptr, length uintptr) (err error)
  const netbsd32Bit                       netbsd32Bit = false:untyped bool
  func  netlinkMessageHeaderAndData       func(b []byte) (*NlMsghdr, []byte, int, error)
  func  netlinkRouteAttrAndValue          func(b []byte) (*RtAttr, []byte, int, error)
  func  newNetlinkRouteRequest            func(proto int, seq int, family int) []byte
  func  nlmAlignOf                        func(msglen int) int
  func  openat                            func(dirfd int, path string, flags int, mode uint32) (fd int, err error)
  func  pipe                              func(p *[2]_C_int) (err error)
  func  pipe2                             func(p *[2]_C_int, flags int) (err error)
  func  prlimit                           func(pid int, resource int, old *Rlimit, newlimit *Rlimit) (err error)
  func  ptrace                            func(request int, pid int, addr uintptr, data uintptr) (err error)
  func  ptracePeek                        func(req int, pid int, addr uintptr, out []byte) (count int, err error)
  func  ptracePoke                        func(pokeReq int, peekReq int, pid int, addr uintptr, data []byte) (count int, err error)
  func  read                              func(fd int, p []byte) (n int, err error)
  func  readlen                           func(fd int, p *byte, np int) (n int, err error)
  func  readlinkat                        func(dirfd int, path string, buf []byte) (n int, err error)
  func  reboot                            func(magic1 uint, magic2 uint, cmd int, arg string) (err error)
  func  recvfrom                          func(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error)
  func  recvmsg                           func(s int, msg *Msghdr, flags int) (n int, err error)
  func  rtaAlignOf                        func(attrlen int) int
  func  runtime_AfterFork                 func()
  func  runtime_BeforeFork                func()
  func  runtime_envs                      func() []string
  func  sendfile                          func(outfd int, infd int, offset *int64, count int) (written int, err error)
  func  sendmsg                           func(s int, msg *Msghdr, flags int) (n int, err error)
  func  sendto                            func(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error)
  func  setenv_c                          func(k string, v string)
  func  setgroups                         func(n int, list *_Gid_t) (err error)
  func  setsockopt                        func(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)
  const shift                             shift = 8:untyped int
  var   signals                           [32]string
  const sizeofInt                         sizeofInt = 4:untyped int
  const sizeofLong                        sizeofLong = 8:untyped int
  const sizeofLongLong                    sizeofLongLong = 8:untyped int
  const sizeofPtr                         sizeofPtr = 8:untyped int
  const sizeofShort                       sizeofShort = 2:untyped int
  func  socket                            func(domain int, typ int, proto int) (fd int, err error)
  func  socketControlMessageHeaderAndData func(b []byte) (*Cmsghdr, []byte, error)
  func  socketpair                        func(domain int, typ int, proto int, fd *[2]int32) (err error)
  const stopped                           stopped = 127:untyped int
  func  symlinkat                         func(oldpath string, newdirfd int, newpath string) (err error)
  func  uitoa                             func(val uint) string
  func  unlinkat                          func(dirfd int, path string, flags int) (err error)
  func  unsetenv_c                        func(k string)
  func  use                               func(p unsafe.Pointer)
  func  utimensat                         func(dirfd int, path string, times *[2]Timespec) (err error)
  func  utimes                            func(path string, times *[2]Timeval) (err error)
  func  wait4                             func(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err error)
  func  write                             func(fd int, p []byte) (n int, err error)
  func  writeIDMappings                   func(path string, idMap []SysProcIDMap) error
  func  writeSetgroups                    func(pid int, enable bool) error
  func  writeUidGidMappings               func(pid int, sys *SysProcAttr) error
  func  writelen                          func(fd int, p *byte, np int) (n int, err error)
  var   zeroProcAttr                      ProcAttr
  var   zeroSysProcAttr                   SysProcAttr

package regexp:
  func  Compile            func(expr string) (*Regexp, error)
  func  CompilePOSIX       func(expr string) (*Regexp, error)
  func  Match              func(pattern string, b []byte) (matched bool, err error)
  func  MatchReader        func(pattern string, r io.RuneReader) (matched bool, err error)
  func  MatchString        func(pattern string, s string) (matched bool, err error)
  func  MustCompile        func(str string) *Regexp
  func  MustCompilePOSIX   func(str string) *Regexp
  func  QuoteMeta          func(s string) string
  type  Regexp             struct{regexpRO; mu sync.Mutex; machine []*machine}
    method (*Regexp) Copy() *Regexp
    method (*Regexp) Expand(dst []byte, template []byte, src []byte, match []int) []byte
    method (*Regexp) ExpandString(dst []byte, template string, src string, match []int) []byte
    method (*Regexp) Find(b []byte) []byte
    method (*Regexp) FindAll(b []byte, n int) [][]byte
    method (*Regexp) FindAllIndex(b []byte, n int) [][]int
    method (*Regexp) FindAllString(s string, n int) []string
    method (*Regexp) FindAllStringIndex(s string, n int) [][]int
    method (*Regexp) FindAllStringSubmatch(s string, n int) [][]string
    method (*Regexp) FindAllStringSubmatchIndex(s string, n int) [][]int
    method (*Regexp) FindAllSubmatch(b []byte, n int) [][][]byte
    method (*Regexp) FindAllSubmatchIndex(b []byte, n int) [][]int
    method (*Regexp) FindIndex(b []byte) (loc []int)
    method (*Regexp) FindReaderIndex(r io.RuneReader) (loc []int)
    method (*Regexp) FindReaderSubmatchIndex(r io.RuneReader) []int
    method (*Regexp) FindString(s string) string
    method (*Regexp) FindStringIndex(s string) (loc []int)
    method (*Regexp) FindStringSubmatch(s string) []string
    method (*Regexp) FindStringSubmatchIndex(s string) []int
    method (*Regexp) FindSubmatch(b []byte) [][]byte
    method (*Regexp) FindSubmatchIndex(b []byte) []int
    method (*Regexp) LiteralPrefix() (prefix string, complete bool)
    method (*Regexp) Longest()
    method (*Regexp) Match(b []byte) bool
    method (*Regexp) MatchReader(r io.RuneReader) bool
    method (*Regexp) MatchString(s string) bool
    method (*Regexp) NumSubexp() int
    method (*Regexp) ReplaceAll(src []byte, repl []byte) []byte
    method (*Regexp) ReplaceAllFunc(src []byte, repl func([]byte) []byte) []byte
    method (*Regexp) ReplaceAllLiteral(src []byte, repl []byte) []byte
    method (*Regexp) ReplaceAllLiteralString(src string, repl string) string
    method (*Regexp) ReplaceAllString(src string, repl string) string
    method (*Regexp) ReplaceAllStringFunc(src string, repl func(string) string) string
    method (*Regexp) Split(s string, n int) []string
    method (*Regexp) String() string
    method (*Regexp) SubexpNames() []string
    method (*Regexp) allMatches(s string, b []byte, n int, deliver func([]int))
    method (*Regexp) doExecute(r io.RuneReader, b []byte, s string, pos int, ncap int) []int
    method (*Regexp) expand(dst []byte, template string, bsrc []byte, src string, match []int) []byte
    method (*Regexp) get() *machine
    method (*Regexp) pad(a []int) []int
    method (*Regexp) put(z *machine)
    method (*Regexp) replaceAll(bsrc []byte, src string, nmatch int, repl func(dst []byte, m []int) []byte) []byte
  var   anyRune            []rune
  var   anyRuneNotNL       []rune
  type  bitState           struct{prog *regexp/syntax.Prog; end int; cap []int; jobs []job; visited []uint32}
    method (*bitState) push(pc uint32, pos int, arg int)
    method (*bitState) reset(end int, ncap int)
    method (*bitState) shouldVisit(pc uint32, pos int) bool
  func  cleanupOnePass     func(prog *onePassProg, original *regexp/syntax.Prog)
  func  compile            func(expr string, mode regexp/syntax.Flags, longest bool) (*Regexp, error)
  func  compileOnePass     func(prog *regexp/syntax.Prog) (p *onePassProg)
  var   empty              []int
  const endOfText          endOfText = -1:rune
  type  entry              struct{pc uint32; t *thread}
  func  extract            func(str string) (name string, num int, rest string, ok bool)
  func  init               func()
  var   init$guard         bool
  type  input              interface{canCheckPrefix() bool; context(pos int) regexp/syntax.EmptyOp; hasPrefix(re *Regexp) bool; index(re *Regexp, pos int) int; step(pos int) (r rune, width int)}
    method (input) canCheckPrefix() bool
    method (input) context(pos int) regexp/syntax.EmptyOp
    method (input) hasPrefix(re *Regexp) bool
    method (input) index(re *Regexp, pos int) int
    method (input) step(pos int) (r rune, width int)
  type  inputBytes         struct{str []byte}
    method (*inputBytes) canCheckPrefix() bool
    method (*inputBytes) context(pos int) regexp/syntax.EmptyOp
    method (*inputBytes) hasPrefix(re *Regexp) bool
    method (*inputBytes) index(re *Regexp, pos int) int
    method (*inputBytes) step(pos int) (rune, int)
  type  inputReader        struct{r io.RuneReader; atEOT bool; pos int}
    method (*inputReader) canCheckPrefix() bool
    method (*inputReader) context(pos int) regexp/syntax.EmptyOp
    method (*inputReader) hasPrefix(re *Regexp) bool
    method (*inputReader) index(re *Regexp, pos int) int
    method (*inputReader) step(pos int) (rune, int)
  type  inputString        struct{str string}
    method (*inputString) canCheckPrefix() bool
    method (*inputString) context(pos int) regexp/syntax.EmptyOp
    method (*inputString) hasPrefix(re *Regexp) bool
    method (*inputString) index(re *Regexp, pos int) int
    method (*inputString) step(pos int) (rune, int)
  func  iop                func(i *regexp/syntax.Inst) regexp/syntax.InstOp
  type  job                struct{pc uint32; arg int; pos int}
  type  machine            struct{re *Regexp; p *regexp/syntax.Prog; op *onePassProg; maxBitStateLen int; b *bitState; q0 queue; q1 queue; pool []*thread; matched bool; matchcap []int; inputBytes inputBytes; inputString inputString; inputReader inputReader}
    method (*machine) add(q *queue, pc uint32, pos int, cap []int, cond regexp/syntax.EmptyOp, t *thread) *thread
    method (*machine) alloc(i *regexp/syntax.Inst) *thread
    method (*machine) backtrack(i input, pos int, end int, ncap int) bool
    method (*machine) clear(q *queue)
    method (*machine) init(ncap int)
    method (*machine) match(i input, pos int) bool
    method (*machine) newInputBytes(b []byte) input
    method (*machine) newInputReader(r io.RuneReader) input
    method (*machine) newInputString(s string) input
    method (*machine) onepass(i input, pos int) bool
    method (*machine) step(runq *queue, nextq *queue, pos int, nextPos int, c rune, nextCond regexp/syntax.EmptyOp)
    method (*machine) tryBacktrack(b *bitState, i input, pc uint32, pos int) bool
  func  makeOnePass        func(p *onePassProg) *onePassProg
  const maxBacktrackProg   maxBacktrackProg = 500:untyped int
  const maxBacktrackVector maxBacktrackVector = 262144:untyped int
  func  maxBitStateLen     func(prog *regexp/syntax.Prog) int
  const mergeFailed        mergeFailed = 4294967295:uint32
  func  mergeRuneSets      func(leftRunes *[]rune, rightRunes *[]rune, leftPC uint32, rightPC uint32) ([]rune, []uint32)
  func  newBitState        func(prog *regexp/syntax.Prog) *bitState
  func  newQueue           func(size int) (q *queueOnePass)
  var   noNext             []uint32
  var   noRune             []rune
  var   notBacktrack       *bitState
  var   notOnePass         *onePassProg
  func  onePassCopy        func(prog *regexp/syntax.Prog) *onePassProg
  type  onePassInst        struct{regexp/syntax.Inst; Next []uint32}
    method (*onePassInst) MatchEmptyWidth(before rune, after rune) bool
    method (*onePassInst) MatchRune(r rune) bool
    method (*onePassInst) MatchRunePos(r rune) int
    method (*onePassInst) String() string
    method (*onePassInst) op() regexp/syntax.InstOp
  func  onePassNext        func(i *onePassInst, r rune) uint32
  func  onePassPrefix      func(p *regexp/syntax.Prog) (prefix string, complete bool, pc uint32)
  type  onePassProg        struct{Inst []onePassInst; Start int; NumCap int}
  func  progMachine        func(p *regexp/syntax.Prog, op *onePassProg) *machine
  type  queue              struct{sparse []uint32; dense []entry}
  type  queueOnePass       struct{sparse []uint32; dense []uint32; size uint32; nextIndex uint32}
    method (*queueOnePass) clear()
    method (*queueOnePass) contains(u uint32) bool
    method (*queueOnePass) empty() bool
    method (*queueOnePass) insert(u uint32)
    method (*queueOnePass) insertNew(u uint32)
    method (*queueOnePass) next() (n uint32)
  func  quote              func(s string) string
  type  regexpRO           struct{expr string; prog *regexp/syntax.Prog; onepass *onePassProg; prefix string; prefixBytes []byte; prefixComplete bool; prefixRune rune; prefixEnd uint32; cond regexp/syntax.EmptyOp; numSubexp int; subexpNames []string; longest bool}
  type  runeSlice          []rune
    method (runeSlice) Len() int
    method (runeSlice) Less(i int, j int) bool
    method (runeSlice) Sort()
    method (runeSlice) Swap(i int, j int)
  func  shouldBacktrack    func(prog *regexp/syntax.Prog) bool
  func  special            func(b byte) bool
  var   specialBytes       []byte
  const startSize          startSize = 10:untyped int
  type  thread             struct{inst *regexp/syntax.Inst; cap []int}
  const visitedBits        visitedBits = 32:untyped int

package reflect:
  func  Append                      func(s Value, x ...Value) Value
  func  AppendSlice                 func(s Value, t Value) Value
  const Array                       Array = 17:Kind
  func  ArrayOf                     func(count int, elem Type) Type
  const Bool                        Bool = 1:Kind
  const BothDir                     BothDir = 3:ChanDir
  const Chan                        Chan = 18:Kind
  type  ChanDir                     int
    method (ChanDir) String() string
  func  ChanOf                      func(dir ChanDir, t Type) Type
  const Complex128                  Complex128 = 16:Kind
  const Complex64                   Complex64 = 15:Kind
  func  Copy                        func(dst Value, src Value) int
  func  DeepEqual                   func(x interface{}, y interface{}) bool
  const Float32                     Float32 = 13:Kind
  const Float64                     Float64 = 14:Kind
  const Func                        Func = 19:Kind
  func  FuncOf                      func(in []Type, out []Type, variadic bool) Type
  func  Indirect                    func(v Value) Value
  const Int                         Int = 2:Kind
  const Int16                       Int16 = 4:Kind
  const Int32                       Int32 = 5:Kind
  const Int64                       Int64 = 6:Kind
  const Int8                        Int8 = 3:Kind
  const Interface                   Interface = 20:Kind
  const Invalid                     Invalid = 0:Kind
  type  Kind                        uint
    method (Kind) String() string
  func  MakeChan                    func(typ Type, buffer int) Value
  func  MakeFunc                    func(typ Type, fn func(args []Value) (results []Value)) Value
  func  MakeMap                     func(typ Type) Value
  func  MakeSlice                   func(typ Type, len int, cap int) Value
  const Map                         Map = 21:Kind
  func  MapOf                       func(key Type, elem Type) Type
  type  Method                      struct{Name string; PkgPath string; Type Type; Func Value; Index int}
  func  New                         func(typ Type) Value
  func  NewAt                       func(typ Type, p unsafe.Pointer) Value
  const Ptr                         Ptr = 22:Kind
  func  PtrTo                       func(t Type) Type
  const RecvDir                     RecvDir = 1:ChanDir
  func  Select                      func(cases []SelectCase) (chosen int, recv Value, recvOK bool)
  type  SelectCase                  struct{Dir SelectDir; Chan Value; Send Value}
  const SelectDefault               SelectDefault = 3:SelectDir
  type  SelectDir                   int
  const SelectRecv                  SelectRecv = 2:SelectDir
  const SelectSend                  SelectSend = 1:SelectDir
  const SendDir                     SendDir = 2:ChanDir
  const Slice                       Slice = 23:Kind
  type  SliceHeader                 struct{Data uintptr; Len int; Cap int}
  func  SliceOf                     func(t Type) Type
  const String                      String = 24:Kind
  type  StringHeader                struct{Data uintptr; Len int}
  const Struct                      Struct = 25:Kind
  type  StructField                 struct{Name string; PkgPath string; Type Type; Tag StructTag; Offset uintptr; Index []int; Anonymous bool}
  func  StructOf                    func(fields []StructField) Type
  type  StructTag                   string
    method (StructTag) Get(key string) string
    method (StructTag) Lookup(key string) (value string, ok bool)
  type  Type                        interface{Align() int; AssignableTo(u Type) bool; Bits() int; ChanDir() ChanDir; Comparable() bool; ConvertibleTo(u Type) bool; Elem() Type; Field(i int) StructField; FieldAlign() int; FieldByIndex(index []int) StructField; FieldByName(name string) (StructField, bool); FieldByNameFunc(match func(string) bool) (StructField, bool); Implements(u Type) bool; In(i int) Type; IsVariadic() bool; Key() Type; Kind() Kind; Len() int; Method(int) Method; MethodByName(string) (Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) Type; PkgPath() string; Size() uintptr; String() string; common() *rtype; uncommon() *uncommonType}
    method (Type) Align() int
    method (Type) AssignableTo(u Type) bool
    method (Type) Bits() int
    method (Type) ChanDir() ChanDir
    method (Type) Comparable() bool
    method (Type) ConvertibleTo(u Type) bool
    method (Type) Elem() Type
    method (Type) Field(i int) StructField
    method (Type) FieldAlign() int
    method (Type) FieldByIndex(index []int) StructField
    method (Type) FieldByName(name string) (StructField, bool)
    method (Type) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (Type) Implements(u Type) bool
    method (Type) In(i int) Type
    method (Type) IsVariadic() bool
    method (Type) Key() Type
    method (Type) Kind() Kind
    method (Type) Len() int
    method (Type) Method(int) Method
    method (Type) MethodByName(string) (Method, bool)
    method (Type) Name() string
    method (Type) NumField() int
    method (Type) NumIn() int
    method (Type) NumMethod() int
    method (Type) NumOut() int
    method (Type) Out(i int) Type
    method (Type) PkgPath() string
    method (Type) Size() uintptr
    method (Type) String() string
    method (Type) common() *rtype
    method (Type) uncommon() *uncommonType
  func  TypeOf                      func(i interface{}) Type
  const Uint                        Uint = 7:Kind
  const Uint16                      Uint16 = 9:Kind
  const Uint32                      Uint32 = 10:Kind
  const Uint64                      Uint64 = 11:Kind
  const Uint8                       Uint8 = 8:Kind
  const Uintptr                     Uintptr = 12:Kind
  const UnsafePointer               UnsafePointer = 26:Kind
  type  Value                       struct{typ *rtype; ptr unsafe.Pointer; flag}
    method (Value) Addr() Value
    method (Value) Bool() bool
    method (Value) Bytes() []byte
    method (Value) Call(in []Value) []Value
    method (Value) CallSlice(in []Value) []Value
    method (Value) CanAddr() bool
    method (Value) CanInterface() bool
    method (Value) CanSet() bool
    method (Value) Cap() int
    method (Value) Close()
    method (Value) Complex() complex128
    method (Value) Convert(t Type) Value
    method (Value) Elem() Value
    method (Value) Field(i int) Value
    method (Value) FieldByIndex(index []int) Value
    method (Value) FieldByName(name string) Value
    method (Value) FieldByNameFunc(match func(string) bool) Value
    method (Value) Float() float64
    method (Value) Index(i int) Value
    method (Value) Int() int64
    method (Value) Interface() (i interface{})
    method (Value) InterfaceData() [2]uintptr
    method (Value) IsNil() bool
    method (Value) IsValid() bool
    method (Value) Kind() Kind
    method (Value) Len() int
    method (Value) MapIndex(key Value) Value
    method (Value) MapKeys() []Value
    method (Value) Method(i int) Value
    method (Value) MethodByName(name string) Value
    method (Value) NumField() int
    method (Value) NumMethod() int
    method (Value) OverflowComplex(x complex128) bool
    method (Value) OverflowFloat(x float64) bool
    method (Value) OverflowInt(x int64) bool
    method (Value) OverflowUint(x uint64) bool
    method (Value) Pointer() uintptr
    method (Value) Recv() (x Value, ok bool)
    method (Value) Send(x Value)
    method (Value) Set(x Value)
    method (Value) SetBool(x bool)
    method (Value) SetBytes(x []byte)
    method (Value) SetCap(n int)
    method (Value) SetComplex(x complex128)
    method (Value) SetFloat(x float64)
    method (Value) SetInt(x int64)
    method (Value) SetLen(n int)
    method (Value) SetMapIndex(key Value, val Value)
    method (Value) SetPointer(x unsafe.Pointer)
    method (Value) SetString(x string)
    method (Value) SetUint(x uint64)
    method (Value) Slice(i int, j int) Value
    method (Value) Slice3(i int, j int, k int) Value
    method (Value) String() string
    method (Value) TryRecv() (x Value, ok bool)
    method (Value) TrySend(x Value) bool
    method (Value) Type() Type
    method (Value) Uint() uint64
    method (Value) UnsafeAddr() uintptr
    method (Value) assignTo(context string, dst *rtype, target unsafe.Pointer) Value
    method (Value) call(op string, in []Value) []Value
    method (Value) kind() Kind
    method (Value) mustBe(expected Kind)
    method (Value) mustBeAssignable()
    method (Value) mustBeExported()
    method (Value) pointer() unsafe.Pointer
    method (Value) recv(nb bool) (val Value, ok bool)
    method (Value) runes() []rune
    method (Value) send(x Value, nb bool) (selected bool)
    method (Value) setRunes(x []rune)
  type  ValueError                  struct{Method string; Kind Kind}
    method (*ValueError) Error() string
  func  ValueOf                     func(i interface{}) Value
  func  Zero                        func(typ Type) Value
  func  add                         func(p unsafe.Pointer, x uintptr) unsafe.Pointer
  func  addReflectOff               func(ptr unsafe.Pointer) int32
  func  addTypeBits                 func(bv *bitVector, offset uintptr, t *rtype)
  func  align                       func(x uintptr, n uintptr) uintptr
  func  appendVarint                func(x []byte, v uintptr) []byte
  func  arrayAt                     func(p unsafe.Pointer, i int, eltSize uintptr) unsafe.Pointer
  type  arrayType                   struct{rtype "reflect:\"array\""; elem *rtype; slice *rtype; len uintptr}
    method (*arrayType) Align() int
    method (*arrayType) AssignableTo(u Type) bool
    method (*arrayType) Bits() int
    method (*arrayType) ChanDir() ChanDir
    method (*arrayType) Comparable() bool
    method (*arrayType) ConvertibleTo(u Type) bool
    method (*arrayType) Elem() Type
    method (*arrayType) Field(i int) StructField
    method (*arrayType) FieldAlign() int
    method (*arrayType) FieldByIndex(index []int) StructField
    method (*arrayType) FieldByName(name string) (StructField, bool)
    method (*arrayType) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*arrayType) Implements(u Type) bool
    method (*arrayType) In(i int) Type
    method (*arrayType) IsVariadic() bool
    method (*arrayType) Key() Type
    method (*arrayType) Kind() Kind
    method (*arrayType) Len() int
    method (*arrayType) Method(i int) (m Method)
    method (*arrayType) MethodByName(name string) (m Method, ok bool)
    method (*arrayType) Name() string
    method (*arrayType) NumField() int
    method (*arrayType) NumIn() int
    method (*arrayType) NumMethod() int
    method (*arrayType) NumOut() int
    method (*arrayType) Out(i int) Type
    method (*arrayType) PkgPath() string
    method (*arrayType) Size() uintptr
    method (*arrayType) String() string
    method (*arrayType) common() *rtype
    method (*arrayType) exportedMethods() []method
    method (*arrayType) nameOff(off nameOff) name
    method (*arrayType) pointers() bool
    method (*arrayType) ptrTo() *rtype
    method (*arrayType) textOff(off textOff) unsafe.Pointer
    method (*arrayType) typeOff(off typeOff) *rtype
    method (*arrayType) uncommon() *uncommonType
  type  bitVector                   struct{n uint32; data []byte}
    method (*bitVector) append(bit uint8)
  func  bucketOf                    func(ktyp *rtype, etyp *rtype) *rtype
  const bucketSize                  bucketSize = 8:uintptr
  func  cacheGet                    func(k cacheKey) Type
  type  cacheKey                    struct{kind Kind; t1 *rtype; t2 *rtype; extra uintptr}
  func  cachePut                    func(k cacheKey, t *rtype) Type
  func  call                        func(argtype *rtype, fn unsafe.Pointer, arg unsafe.Pointer, n uint32, retoffset uint32)
  var   callGC                      bool
  func  callMethod                  func(ctxt *methodValue, frame unsafe.Pointer)
  func  callReflect                 func(ctxt *makeFuncImpl, frame unsafe.Pointer)
  type  chanType                    struct{rtype "reflect:\"chan\""; elem *rtype; dir uintptr}
    method (*chanType) Align() int
    method (*chanType) AssignableTo(u Type) bool
    method (*chanType) Bits() int
    method (*chanType) ChanDir() ChanDir
    method (*chanType) Comparable() bool
    method (*chanType) ConvertibleTo(u Type) bool
    method (*chanType) Elem() Type
    method (*chanType) Field(i int) StructField
    method (*chanType) FieldAlign() int
    method (*chanType) FieldByIndex(index []int) StructField
    method (*chanType) FieldByName(name string) (StructField, bool)
    method (*chanType) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*chanType) Implements(u Type) bool
    method (*chanType) In(i int) Type
    method (*chanType) IsVariadic() bool
    method (*chanType) Key() Type
    method (*chanType) Kind() Kind
    method (*chanType) Len() int
    method (*chanType) Method(i int) (m Method)
    method (*chanType) MethodByName(name string) (m Method, ok bool)
    method (*chanType) Name() string
    method (*chanType) NumField() int
    method (*chanType) NumIn() int
    method (*chanType) NumMethod() int
    method (*chanType) NumOut() int
    method (*chanType) Out(i int) Type
    method (*chanType) PkgPath() string
    method (*chanType) Size() uintptr
    method (*chanType) String() string
    method (*chanType) common() *rtype
    method (*chanType) exportedMethods() []method
    method (*chanType) nameOff(off nameOff) name
    method (*chanType) pointers() bool
    method (*chanType) ptrTo() *rtype
    method (*chanType) textOff(off textOff) unsafe.Pointer
    method (*chanType) typeOff(off typeOff) *rtype
    method (*chanType) uncommon() *uncommonType
  func  chancap                     func(ch unsafe.Pointer) int
  func  chanclose                   func(ch unsafe.Pointer)
  func  chanlen                     func(ch unsafe.Pointer) int
  func  chanrecv                    func(t *rtype, ch unsafe.Pointer, nb bool, val unsafe.Pointer) (selected bool, received bool)
  func  chansend                    func(t *rtype, ch unsafe.Pointer, val unsafe.Pointer, nb bool) bool
  func  convertOp                   func(dst *rtype, src *rtype) func(Value, Type) Value
  func  cvtBytesString              func(v Value, t Type) Value
  func  cvtComplex                  func(v Value, t Type) Value
  func  cvtDirect                   func(v Value, typ Type) Value
  func  cvtFloat                    func(v Value, t Type) Value
  func  cvtFloatInt                 func(v Value, t Type) Value
  func  cvtFloatUint                func(v Value, t Type) Value
  func  cvtI2I                      func(v Value, typ Type) Value
  func  cvtInt                      func(v Value, t Type) Value
  func  cvtIntFloat                 func(v Value, t Type) Value
  func  cvtIntString                func(v Value, t Type) Value
  func  cvtRunesString              func(v Value, t Type) Value
  func  cvtStringBytes              func(v Value, t Type) Value
  func  cvtStringRunes              func(v Value, t Type) Value
  func  cvtT2I                      func(v Value, typ Type) Value
  func  cvtUint                     func(v Value, t Type) Value
  func  cvtUintFloat                func(v Value, t Type) Value
  func  cvtUintString               func(v Value, t Type) Value
  func  deepValueEqual              func(v1 Value, v2 Value, visited map[visit]bool, depth int) bool
  func  directlyAssignable          func(T *rtype, V *rtype) bool
  var   dummy                       struct{b bool; x interface{}}
  type  emptyInterface              struct{typ *rtype; word unsafe.Pointer}
  func  escapes                     func(x interface{})
  type  fieldScan                   struct{typ *structType; index []int}
  type  flag                        uintptr
    method (flag) kind() Kind
    method (flag) mustBe(expected Kind)
    method (flag) mustBeAssignable()
    method (flag) mustBeExported()
  const flagAddr                    flagAddr = 256:flag
  const flagEmbedRO                 flagEmbedRO = 64:flag
  const flagIndir                   flagIndir = 128:flag
  const flagKindMask                flagKindMask = 31:flag
  const flagKindWidth               flagKindWidth = 5:untyped int
  const flagMethod                  flagMethod = 512:flag
  const flagMethodShift             flagMethodShift = 10:untyped int
  const flagRO                      flagRO = 96:flag
  const flagStickyRO                flagStickyRO = 32:flag
  func  fnv1                        func(x uint32, list ...byte) uint32
  func  funcLayout                  func(t *rtype, rcvr *rtype) (frametype *rtype, argSize uintptr, retOffset uintptr, stk *bitVector, framePool *sync.Pool)
  var   funcLookupCache             struct{sync.RWMutex; m map[uint32][]*rtype}
  func  funcName                    func(f func([]Value) []Value) string
  func  funcStr                     func(ft *funcType) string
  type  funcType                    struct{rtype "reflect:\"func\""; inCount uint16; outCount uint16}
    method (*funcType) Align() int
    method (*funcType) AssignableTo(u Type) bool
    method (*funcType) Bits() int
    method (*funcType) ChanDir() ChanDir
    method (*funcType) Comparable() bool
    method (*funcType) ConvertibleTo(u Type) bool
    method (*funcType) Elem() Type
    method (*funcType) Field(i int) StructField
    method (*funcType) FieldAlign() int
    method (*funcType) FieldByIndex(index []int) StructField
    method (*funcType) FieldByName(name string) (StructField, bool)
    method (*funcType) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*funcType) Implements(u Type) bool
    method (*funcType) In(i int) Type
    method (*funcType) IsVariadic() bool
    method (*funcType) Key() Type
    method (*funcType) Kind() Kind
    method (*funcType) Len() int
    method (*funcType) Method(i int) (m Method)
    method (*funcType) MethodByName(name string) (m Method, ok bool)
    method (*funcType) Name() string
    method (*funcType) NumField() int
    method (*funcType) NumIn() int
    method (*funcType) NumMethod() int
    method (*funcType) NumOut() int
    method (*funcType) Out(i int) Type
    method (*funcType) PkgPath() string
    method (*funcType) Size() uintptr
    method (*funcType) String() string
    method (*funcType) common() *rtype
    method (*funcType) exportedMethods() []method
    method (*funcType) in() []*rtype
    method (*funcType) nameOff(off nameOff) name
    method (*funcType) out() []*rtype
    method (*funcType) pointers() bool
    method (*funcType) ptrTo() *rtype
    method (*funcType) textOff(off textOff) unsafe.Pointer
    method (*funcType) typeOff(off typeOff) *rtype
    method (*funcType) uncommon() *uncommonType
  type  funcTypeFixed128            struct{funcType; args [128]*rtype}
    method (*funcTypeFixed128) Align() int
    method (*funcTypeFixed128) AssignableTo(u Type) bool
    method (*funcTypeFixed128) Bits() int
    method (*funcTypeFixed128) ChanDir() ChanDir
    method (*funcTypeFixed128) Comparable() bool
    method (*funcTypeFixed128) ConvertibleTo(u Type) bool
    method (*funcTypeFixed128) Elem() Type
    method (*funcTypeFixed128) Field(i int) StructField
    method (*funcTypeFixed128) FieldAlign() int
    method (*funcTypeFixed128) FieldByIndex(index []int) StructField
    method (*funcTypeFixed128) FieldByName(name string) (StructField, bool)
    method (*funcTypeFixed128) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*funcTypeFixed128) Implements(u Type) bool
    method (*funcTypeFixed128) In(i int) Type
    method (*funcTypeFixed128) IsVariadic() bool
    method (*funcTypeFixed128) Key() Type
    method (*funcTypeFixed128) Kind() Kind
    method (*funcTypeFixed128) Len() int
    method (*funcTypeFixed128) Method(i int) (m Method)
    method (*funcTypeFixed128) MethodByName(name string) (m Method, ok bool)
    method (*funcTypeFixed128) Name() string
    method (*funcTypeFixed128) NumField() int
    method (*funcTypeFixed128) NumIn() int
    method (*funcTypeFixed128) NumMethod() int
    method (*funcTypeFixed128) NumOut() int
    method (*funcTypeFixed128) Out(i int) Type
    method (*funcTypeFixed128) PkgPath() string
    method (*funcTypeFixed128) Size() uintptr
    method (*funcTypeFixed128) String() string
    method (*funcTypeFixed128) common() *rtype
    method (*funcTypeFixed128) exportedMethods() []method
    method (*funcTypeFixed128) in() []*rtype
    method (*funcTypeFixed128) nameOff(off nameOff) name
    method (*funcTypeFixed128) out() []*rtype
    method (*funcTypeFixed128) pointers() bool
    method (*funcTypeFixed128) ptrTo() *rtype
    method (*funcTypeFixed128) textOff(off textOff) unsafe.Pointer
    method (*funcTypeFixed128) typeOff(off typeOff) *rtype
    method (*funcTypeFixed128) uncommon() *uncommonType
  type  funcTypeFixed16             struct{funcType; args [16]*rtype}
    method (*funcTypeFixed16) Align() int
    method (*funcTypeFixed16) AssignableTo(u Type) bool
    method (*funcTypeFixed16) Bits() int
    method (*funcTypeFixed16) ChanDir() ChanDir
    method (*funcTypeFixed16) Comparable() bool
    method (*funcTypeFixed16) ConvertibleTo(u Type) bool
    method (*funcTypeFixed16) Elem() Type
    method (*funcTypeFixed16) Field(i int) StructField
    method (*funcTypeFixed16) FieldAlign() int
    method (*funcTypeFixed16) FieldByIndex(index []int) StructField
    method (*funcTypeFixed16) FieldByName(name string) (StructField, bool)
    method (*funcTypeFixed16) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*funcTypeFixed16) Implements(u Type) bool
    method (*funcTypeFixed16) In(i int) Type
    method (*funcTypeFixed16) IsVariadic() bool
    method (*funcTypeFixed16) Key() Type
    method (*funcTypeFixed16) Kind() Kind
    method (*funcTypeFixed16) Len() int
    method (*funcTypeFixed16) Method(i int) (m Method)
    method (*funcTypeFixed16) MethodByName(name string) (m Method, ok bool)
    method (*funcTypeFixed16) Name() string
    method (*funcTypeFixed16) NumField() int
    method (*funcTypeFixed16) NumIn() int
    method (*funcTypeFixed16) NumMethod() int
    method (*funcTypeFixed16) NumOut() int
    method (*funcTypeFixed16) Out(i int) Type
    method (*funcTypeFixed16) PkgPath() string
    method (*funcTypeFixed16) Size() uintptr
    method (*funcTypeFixed16) String() string
    method (*funcTypeFixed16) common() *rtype
    method (*funcTypeFixed16) exportedMethods() []method
    method (*funcTypeFixed16) in() []*rtype
    method (*funcTypeFixed16) nameOff(off nameOff) name
    method (*funcTypeFixed16) out() []*rtype
    method (*funcTypeFixed16) pointers() bool
    method (*funcTypeFixed16) ptrTo() *rtype
    method (*funcTypeFixed16) textOff(off textOff) unsafe.Pointer
    method (*funcTypeFixed16) typeOff(off typeOff) *rtype
    method (*funcTypeFixed16) uncommon() *uncommonType
  type  funcTypeFixed32             struct{funcType; args [32]*rtype}
    method (*funcTypeFixed32) Align() int
    method (*funcTypeFixed32) AssignableTo(u Type) bool
    method (*funcTypeFixed32) Bits() int
    method (*funcTypeFixed32) ChanDir() ChanDir
    method (*funcTypeFixed32) Comparable() bool
    method (*funcTypeFixed32) ConvertibleTo(u Type) bool
    method (*funcTypeFixed32) Elem() Type
    method (*funcTypeFixed32) Field(i int) StructField
    method (*funcTypeFixed32) FieldAlign() int
    method (*funcTypeFixed32) FieldByIndex(index []int) StructField
    method (*funcTypeFixed32) FieldByName(name string) (StructField, bool)
    method (*funcTypeFixed32) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*funcTypeFixed32) Implements(u Type) bool
    method (*funcTypeFixed32) In(i int) Type
    method (*funcTypeFixed32) IsVariadic() bool
    method (*funcTypeFixed32) Key() Type
    method (*funcTypeFixed32) Kind() Kind
    method (*funcTypeFixed32) Len() int
    method (*funcTypeFixed32) Method(i int) (m Method)
    method (*funcTypeFixed32) MethodByName(name string) (m Method, ok bool)
    method (*funcTypeFixed32) Name() string
    method (*funcTypeFixed32) NumField() int
    method (*funcTypeFixed32) NumIn() int
    method (*funcTypeFixed32) NumMethod() int
    method (*funcTypeFixed32) NumOut() int
    method (*funcTypeFixed32) Out(i int) Type
    method (*funcTypeFixed32) PkgPath() string
    method (*funcTypeFixed32) Size() uintptr
    method (*funcTypeFixed32) String() string
    method (*funcTypeFixed32) common() *rtype
    method (*funcTypeFixed32) exportedMethods() []method
    method (*funcTypeFixed32) in() []*rtype
    method (*funcTypeFixed32) nameOff(off nameOff) name
    method (*funcTypeFixed32) out() []*rtype
    method (*funcTypeFixed32) pointers() bool
    method (*funcTypeFixed32) ptrTo() *rtype
    method (*funcTypeFixed32) textOff(off textOff) unsafe.Pointer
    method (*funcTypeFixed32) typeOff(off typeOff) *rtype
    method (*funcTypeFixed32) uncommon() *uncommonType
  type  funcTypeFixed4              struct{funcType; args [4]*rtype}
    method (*funcTypeFixed4) Align() int
    method (*funcTypeFixed4) AssignableTo(u Type) bool
    method (*funcTypeFixed4) Bits() int
    method (*funcTypeFixed4) ChanDir() ChanDir
    method (*funcTypeFixed4) Comparable() bool
    method (*funcTypeFixed4) ConvertibleTo(u Type) bool
    method (*funcTypeFixed4) Elem() Type
    method (*funcTypeFixed4) Field(i int) StructField
    method (*funcTypeFixed4) FieldAlign() int
    method (*funcTypeFixed4) FieldByIndex(index []int) StructField
    method (*funcTypeFixed4) FieldByName(name string) (StructField, bool)
    method (*funcTypeFixed4) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*funcTypeFixed4) Implements(u Type) bool
    method (*funcTypeFixed4) In(i int) Type
    method (*funcTypeFixed4) IsVariadic() bool
    method (*funcTypeFixed4) Key() Type
    method (*funcTypeFixed4) Kind() Kind
    method (*funcTypeFixed4) Len() int
    method (*funcTypeFixed4) Method(i int) (m Method)
    method (*funcTypeFixed4) MethodByName(name string) (m Method, ok bool)
    method (*funcTypeFixed4) Name() string
    method (*funcTypeFixed4) NumField() int
    method (*funcTypeFixed4) NumIn() int
    method (*funcTypeFixed4) NumMethod() int
    method (*funcTypeFixed4) NumOut() int
    method (*funcTypeFixed4) Out(i int) Type
    method (*funcTypeFixed4) PkgPath() string
    method (*funcTypeFixed4) Size() uintptr
    method (*funcTypeFixed4) String() string
    method (*funcTypeFixed4) common() *rtype
    method (*funcTypeFixed4) exportedMethods() []method
    method (*funcTypeFixed4) in() []*rtype
    method (*funcTypeFixed4) nameOff(off nameOff) name
    method (*funcTypeFixed4) out() []*rtype
    method (*funcTypeFixed4) pointers() bool
    method (*funcTypeFixed4) ptrTo() *rtype
    method (*funcTypeFixed4) textOff(off textOff) unsafe.Pointer
    method (*funcTypeFixed4) typeOff(off typeOff) *rtype
    method (*funcTypeFixed4) uncommon() *uncommonType
  type  funcTypeFixed64             struct{funcType; args [64]*rtype}
    method (*funcTypeFixed64) Align() int
    method (*funcTypeFixed64) AssignableTo(u Type) bool
    method (*funcTypeFixed64) Bits() int
    method (*funcTypeFixed64) ChanDir() ChanDir
    method (*funcTypeFixed64) Comparable() bool
    method (*funcTypeFixed64) ConvertibleTo(u Type) bool
    method (*funcTypeFixed64) Elem() Type
    method (*funcTypeFixed64) Field(i int) StructField
    method (*funcTypeFixed64) FieldAlign() int
    method (*funcTypeFixed64) FieldByIndex(index []int) StructField
    method (*funcTypeFixed64) FieldByName(name string) (StructField, bool)
    method (*funcTypeFixed64) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*funcTypeFixed64) Implements(u Type) bool
    method (*funcTypeFixed64) In(i int) Type
    method (*funcTypeFixed64) IsVariadic() bool
    method (*funcTypeFixed64) Key() Type
    method (*funcTypeFixed64) Kind() Kind
    method (*funcTypeFixed64) Len() int
    method (*funcTypeFixed64) Method(i int) (m Method)
    method (*funcTypeFixed64) MethodByName(name string) (m Method, ok bool)
    method (*funcTypeFixed64) Name() string
    method (*funcTypeFixed64) NumField() int
    method (*funcTypeFixed64) NumIn() int
    method (*funcTypeFixed64) NumMethod() int
    method (*funcTypeFixed64) NumOut() int
    method (*funcTypeFixed64) Out(i int) Type
    method (*funcTypeFixed64) PkgPath() string
    method (*funcTypeFixed64) Size() uintptr
    method (*funcTypeFixed64) String() string
    method (*funcTypeFixed64) common() *rtype
    method (*funcTypeFixed64) exportedMethods() []method
    method (*funcTypeFixed64) in() []*rtype
    method (*funcTypeFixed64) nameOff(off nameOff) name
    method (*funcTypeFixed64) out() []*rtype
    method (*funcTypeFixed64) pointers() bool
    method (*funcTypeFixed64) ptrTo() *rtype
    method (*funcTypeFixed64) textOff(off textOff) unsafe.Pointer
    method (*funcTypeFixed64) typeOff(off typeOff) *rtype
    method (*funcTypeFixed64) uncommon() *uncommonType
  type  funcTypeFixed8              struct{funcType; args [8]*rtype}
    method (*funcTypeFixed8) Align() int
    method (*funcTypeFixed8) AssignableTo(u Type) bool
    method (*funcTypeFixed8) Bits() int
    method (*funcTypeFixed8) ChanDir() ChanDir
    method (*funcTypeFixed8) Comparable() bool
    method (*funcTypeFixed8) ConvertibleTo(u Type) bool
    method (*funcTypeFixed8) Elem() Type
    method (*funcTypeFixed8) Field(i int) StructField
    method (*funcTypeFixed8) FieldAlign() int
    method (*funcTypeFixed8) FieldByIndex(index []int) StructField
    method (*funcTypeFixed8) FieldByName(name string) (StructField, bool)
    method (*funcTypeFixed8) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*funcTypeFixed8) Implements(u Type) bool
    method (*funcTypeFixed8) In(i int) Type
    method (*funcTypeFixed8) IsVariadic() bool
    method (*funcTypeFixed8) Key() Type
    method (*funcTypeFixed8) Kind() Kind
    method (*funcTypeFixed8) Len() int
    method (*funcTypeFixed8) Method(i int) (m Method)
    method (*funcTypeFixed8) MethodByName(name string) (m Method, ok bool)
    method (*funcTypeFixed8) Name() string
    method (*funcTypeFixed8) NumField() int
    method (*funcTypeFixed8) NumIn() int
    method (*funcTypeFixed8) NumMethod() int
    method (*funcTypeFixed8) NumOut() int
    method (*funcTypeFixed8) Out(i int) Type
    method (*funcTypeFixed8) PkgPath() string
    method (*funcTypeFixed8) Size() uintptr
    method (*funcTypeFixed8) String() string
    method (*funcTypeFixed8) common() *rtype
    method (*funcTypeFixed8) exportedMethods() []method
    method (*funcTypeFixed8) in() []*rtype
    method (*funcTypeFixed8) nameOff(off nameOff) name
    method (*funcTypeFixed8) out() []*rtype
    method (*funcTypeFixed8) pointers() bool
    method (*funcTypeFixed8) ptrTo() *rtype
    method (*funcTypeFixed8) textOff(off textOff) unsafe.Pointer
    method (*funcTypeFixed8) typeOff(off typeOff) *rtype
    method (*funcTypeFixed8) uncommon() *uncommonType
  func  grow                        func(s Value, extra int) (Value, int, int)
  func  hasPrefix                   func(s string, prefix string) bool
  func  haveIdenticalUnderlyingType func(T *rtype, V *rtype) bool
  func  ifaceE2I                    func(t *rtype, src interface{}, dst unsafe.Pointer)
  func  ifaceIndir                  func(t *rtype) bool
  type  imethod                     struct{name nameOff; typ typeOff}
  func  implements                  func(T *rtype, V *rtype) bool
  func  init                        func()
  var   init$guard                  bool
  type  interfaceType               struct{rtype "reflect:\"interface\""; pkgPath name; methods []imethod}
    method (*interfaceType) Align() int
    method (*interfaceType) AssignableTo(u Type) bool
    method (*interfaceType) Bits() int
    method (*interfaceType) ChanDir() ChanDir
    method (*interfaceType) Comparable() bool
    method (*interfaceType) ConvertibleTo(u Type) bool
    method (*interfaceType) Elem() Type
    method (*interfaceType) Field(i int) StructField
    method (*interfaceType) FieldAlign() int
    method (*interfaceType) FieldByIndex(index []int) StructField
    method (*interfaceType) FieldByName(name string) (StructField, bool)
    method (*interfaceType) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*interfaceType) Implements(u Type) bool
    method (*interfaceType) In(i int) Type
    method (*interfaceType) IsVariadic() bool
    method (*interfaceType) Key() Type
    method (*interfaceType) Kind() Kind
    method (*interfaceType) Len() int
    method (*interfaceType) Method(i int) (m Method)
    method (*interfaceType) MethodByName(name string) (m Method, ok bool)
    method (*interfaceType) Name() string
    method (*interfaceType) NumField() int
    method (*interfaceType) NumIn() int
    method (*interfaceType) NumMethod() int
    method (*interfaceType) NumOut() int
    method (*interfaceType) Out(i int) Type
    method (*interfaceType) PkgPath() string
    method (*interfaceType) Size() uintptr
    method (*interfaceType) String() string
    method (*interfaceType) common() *rtype
    method (*interfaceType) exportedMethods() []method
    method (*interfaceType) nameOff(off nameOff) name
    method (*interfaceType) pointers() bool
    method (*interfaceType) ptrTo() *rtype
    method (*interfaceType) textOff(off textOff) unsafe.Pointer
    method (*interfaceType) typeOff(off typeOff) *rtype
    method (*interfaceType) uncommon() *uncommonType
  func  isReflexive                 func(t *rtype) bool
  func  ismapkey                    func(*rtype) bool
  const kindDirectIface             kindDirectIface = 32:untyped int
  const kindGCProg                  kindGCProg = 64:untyped int
  const kindMask                    kindMask = 31:untyped int
  var   kindNames                   []string
  const kindNoPointers              kindNoPointers = 128:untyped int
  var   layoutCache                 struct{sync.RWMutex; m map[layoutKey]layoutType}
  type  layoutKey                   struct{t *rtype; rcvr *rtype}
  type  layoutType                  struct{t *rtype; argSize uintptr; retOffset uintptr; stack *bitVector; framePool *sync.Pool}
  var   lookupCache                 struct{sync.RWMutex; m map[cacheKey]*rtype}
  func  makeBytes                   func(f flag, v []byte, t Type) Value
  func  makeComplex                 func(f flag, v complex128, t Type) Value
  func  makeFloat                   func(f flag, v float64, t Type) Value
  type  makeFuncImpl                struct{code uintptr; stack *bitVector; typ *funcType; fn func([]Value) []Value}
  func  makeFuncStub                func()
  func  makeInt                     func(f flag, bits uint64, t Type) Value
  func  makeMethodValue             func(op string, v Value) Value
  func  makeRunes                   func(f flag, v []rune, t Type) Value
  func  makeString                  func(f flag, v string, t Type) Value
  func  makechan                    func(typ *rtype, size uint64) (ch unsafe.Pointer)
  func  makemap                     func(t *rtype) (m unsafe.Pointer)
  type  mapType                     struct{rtype "reflect:\"map\""; key *rtype; elem *rtype; bucket *rtype; hmap *rtype; keysize uint8; indirectkey uint8; valuesize uint8; indirectvalue uint8; bucketsize uint16; reflexivekey bool; needkeyupdate bool}
    method (*mapType) Align() int
    method (*mapType) AssignableTo(u Type) bool
    method (*mapType) Bits() int
    method (*mapType) ChanDir() ChanDir
    method (*mapType) Comparable() bool
    method (*mapType) ConvertibleTo(u Type) bool
    method (*mapType) Elem() Type
    method (*mapType) Field(i int) StructField
    method (*mapType) FieldAlign() int
    method (*mapType) FieldByIndex(index []int) StructField
    method (*mapType) FieldByName(name string) (StructField, bool)
    method (*mapType) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*mapType) Implements(u Type) bool
    method (*mapType) In(i int) Type
    method (*mapType) IsVariadic() bool
    method (*mapType) Key() Type
    method (*mapType) Kind() Kind
    method (*mapType) Len() int
    method (*mapType) Method(i int) (m Method)
    method (*mapType) MethodByName(name string) (m Method, ok bool)
    method (*mapType) Name() string
    method (*mapType) NumField() int
    method (*mapType) NumIn() int
    method (*mapType) NumMethod() int
    method (*mapType) NumOut() int
    method (*mapType) Out(i int) Type
    method (*mapType) PkgPath() string
    method (*mapType) Size() uintptr
    method (*mapType) String() string
    method (*mapType) common() *rtype
    method (*mapType) exportedMethods() []method
    method (*mapType) nameOff(off nameOff) name
    method (*mapType) pointers() bool
    method (*mapType) ptrTo() *rtype
    method (*mapType) textOff(off textOff) unsafe.Pointer
    method (*mapType) typeOff(off typeOff) *rtype
    method (*mapType) uncommon() *uncommonType
  func  mapaccess                   func(t *rtype, m unsafe.Pointer, key unsafe.Pointer) (val unsafe.Pointer)
  func  mapassign                   func(t *rtype, m unsafe.Pointer, key unsafe.Pointer, val unsafe.Pointer)
  func  mapdelete                   func(t *rtype, m unsafe.Pointer, key unsafe.Pointer)
  func  mapiterinit                 func(t *rtype, m unsafe.Pointer) unsafe.Pointer
  func  mapiterkey                  func(it unsafe.Pointer) (key unsafe.Pointer)
  func  mapiternext                 func(it unsafe.Pointer)
  func  maplen                      func(m unsafe.Pointer) int
  const maxKeySize                  maxKeySize = 128:uintptr
  const maxPtrmaskBytes             maxPtrmaskBytes = 2048:untyped int
  const maxValSize                  maxValSize = 128:uintptr
  func  memclr                      func(ptr unsafe.Pointer, n uintptr)
  type  method                      struct{name nameOff; mtyp typeOff; ifn textOff; tfn textOff}
  var   methodCache                 struct{sync.RWMutex; m map[*rtype][]method}
  func  methodName                  func() string
  func  methodReceiver              func(op string, v Value, methodIndex int) (rcvrtype *rtype, t *rtype, fn unsafe.Pointer)
  type  methodValue                 struct{fn uintptr; stack *bitVector; method int; rcvr Value}
  func  methodValueCall             func()
  type  name                        struct{bytes *byte}
    method (name) data(off int) *byte
    method (name) isExported() bool
    method (name) name() (s string)
    method (name) nameLen() int
    method (name) pkgPath() string
    method (name) tag() (s string)
    method (name) tagLen() int
  type  nameOff                     int32
  func  needKeyUpdate               func(t *rtype) bool
  func  newName                     func(n string, tag string, pkgPath string, exported bool) name
  type  nonEmptyInterface           struct{itab *struct{ityp *rtype; typ *rtype; link unsafe.Pointer; bad int32; unused int32; fun [100000]unsafe.Pointer}; word unsafe.Pointer}
  func  overflowFloat32             func(x float64) bool
  func  packEface                   func(v Value) interface{}
  var   ptrMap                      struct{sync.RWMutex; m map[*rtype]*ptrType}
  const ptrSize                     ptrSize = 8:untyped int
  type  ptrType                     struct{rtype "reflect:\"ptr\""; elem *rtype}
    method (*ptrType) Align() int
    method (*ptrType) AssignableTo(u Type) bool
    method (*ptrType) Bits() int
    method (*ptrType) ChanDir() ChanDir
    method (*ptrType) Comparable() bool
    method (*ptrType) ConvertibleTo(u Type) bool
    method (*ptrType) Elem() Type
    method (*ptrType) Field(i int) StructField
    method (*ptrType) FieldAlign() int
    method (*ptrType) FieldByIndex(index []int) StructField
    method (*ptrType) FieldByName(name string) (StructField, bool)
    method (*ptrType) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*ptrType) Implements(u Type) bool
    method (*ptrType) In(i int) Type
    method (*ptrType) IsVariadic() bool
    method (*ptrType) Key() Type
    method (*ptrType) Kind() Kind
    method (*ptrType) Len() int
    method (*ptrType) Method(i int) (m Method)
    method (*ptrType) MethodByName(name string) (m Method, ok bool)
    method (*ptrType) Name() string
    method (*ptrType) NumField() int
    method (*ptrType) NumIn() int
    method (*ptrType) NumMethod() int
    method (*ptrType) NumOut() int
    method (*ptrType) Out(i int) Type
    method (*ptrType) PkgPath() string
    method (*ptrType) Size() uintptr
    method (*ptrType) String() string
    method (*ptrType) common() *rtype
    method (*ptrType) exportedMethods() []method
    method (*ptrType) nameOff(off nameOff) name
    method (*ptrType) pointers() bool
    method (*ptrType) ptrTo() *rtype
    method (*ptrType) textOff(off textOff) unsafe.Pointer
    method (*ptrType) typeOff(off typeOff) *rtype
    method (*ptrType) uncommon() *uncommonType
  func  resolveNameOff              func(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer
  func  resolveReflectName          func(n name) nameOff
  func  resolveReflectText          func(ptr unsafe.Pointer) textOff
  func  resolveReflectType          func(t *rtype) typeOff
  func  resolveTextOff              func(rtype unsafe.Pointer, off int32) unsafe.Pointer
  func  resolveTypeOff              func(rtype unsafe.Pointer, off int32) unsafe.Pointer
  func  round                       func(n uintptr, a uintptr) uintptr
  func  rselect                     func([]runtimeSelect) (chosen int, recvOK bool)
  type  rtype                       struct{size uintptr; ptrdata uintptr; hash uint32; tflag tflag; align uint8; fieldAlign uint8; kind uint8; alg *typeAlg; gcdata *byte; str nameOff; ptrToThis typeOff}
    method (*rtype) Align() int
    method (*rtype) AssignableTo(u Type) bool
    method (*rtype) Bits() int
    method (*rtype) ChanDir() ChanDir
    method (*rtype) Comparable() bool
    method (*rtype) ConvertibleTo(u Type) bool
    method (*rtype) Elem() Type
    method (*rtype) Field(i int) StructField
    method (*rtype) FieldAlign() int
    method (*rtype) FieldByIndex(index []int) StructField
    method (*rtype) FieldByName(name string) (StructField, bool)
    method (*rtype) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*rtype) Implements(u Type) bool
    method (*rtype) In(i int) Type
    method (*rtype) IsVariadic() bool
    method (*rtype) Key() Type
    method (*rtype) Kind() Kind
    method (*rtype) Len() int
    method (*rtype) Method(i int) (m Method)
    method (*rtype) MethodByName(name string) (m Method, ok bool)
    method (*rtype) Name() string
    method (*rtype) NumField() int
    method (*rtype) NumIn() int
    method (*rtype) NumMethod() int
    method (*rtype) NumOut() int
    method (*rtype) Out(i int) Type
    method (*rtype) PkgPath() string
    method (*rtype) Size() uintptr
    method (*rtype) String() string
    method (*rtype) common() *rtype
    method (*rtype) exportedMethods() []method
    method (*rtype) nameOff(off nameOff) name
    method (*rtype) pointers() bool
    method (*rtype) ptrTo() *rtype
    method (*rtype) textOff(off textOff) unsafe.Pointer
    method (*rtype) typeOff(off typeOff) *rtype
    method (*rtype) uncommon() *uncommonType
  func  rtypeOff                    func(section unsafe.Pointer, off int32) *rtype
  type  runtimeSelect               struct{dir SelectDir; typ *rtype; ch unsafe.Pointer; val unsafe.Pointer}
  func  runtimeStructField          func(field StructField) structField
  type  sliceHeader                 struct{Data unsafe.Pointer; Len int; Cap int}
  type  sliceType                   struct{rtype "reflect:\"slice\""; elem *rtype}
    method (*sliceType) Align() int
    method (*sliceType) AssignableTo(u Type) bool
    method (*sliceType) Bits() int
    method (*sliceType) ChanDir() ChanDir
    method (*sliceType) Comparable() bool
    method (*sliceType) ConvertibleTo(u Type) bool
    method (*sliceType) Elem() Type
    method (*sliceType) Field(i int) StructField
    method (*sliceType) FieldAlign() int
    method (*sliceType) FieldByIndex(index []int) StructField
    method (*sliceType) FieldByName(name string) (StructField, bool)
    method (*sliceType) FieldByNameFunc(match func(string) bool) (StructField, bool)
    method (*sliceType) Implements(u Type) bool
    method (*sliceType) In(i int) Type
    method (*sliceType) IsVariadic() bool
    method (*sliceType) Key() Type
    method (*sliceType) Kind() Kind
    method (*sliceType) Len() int
    method (*sliceType) Method(i int) (m Method)
    method (*sliceType) MethodByName(name string) (m Method, ok bool)
    method (*sliceType) Name() string
    method (*sliceType) NumField() int
    method (*sliceType) NumIn() int
    method (*sliceType) NumMethod() int
    method (*sliceType) NumOut() int
    method (*sliceType) Out(i int) Type
    method (*sliceType) PkgPath() string
    method (*sliceType) Size() uintptr
    method (*sliceType) String() string
    method (*sliceType) common() *rtype
    method (*sliceType) exportedMethods() []method
    method (*sliceType) nameOff(off nameOff) name
    method (*sliceType) pointers() bool
    method (*sliceType) ptrTo() *rtype
    method (*sliceType) textOff(off textOff) unsafe.Pointer
    method (*sliceType) typeOff(off typeOff) *rtype
    method (*sliceType) uncommon() *uncommonType
  func  storeRcvr                   func(v Value, p unsafe.Pointer)
  type  stringHeader                struct{Data unsafe.Pointer; Len int}
  type  structField                 struct{name name; typ *rtype; offset uintptr}
  var   structLookupCache           struct{sync.RWMutex; m map[uint32][]interface{common() *rtype}}
  type  structType                  struct{rtype "reflect:\"struct\""; pkgPath name; fields []structField}
    method (*structType) Align() int
    method (*structType) AssignableTo(u Type) bool
    method (*structType) Bits() int
    method (*structType) ChanDir() ChanDir
    method (*structType) Comparable() bool
    method (*structType) ConvertibleTo(u Type) bool
    method (*structType) Elem() Type
    method (*structType) Field(i int) (f StructField)
    method (*structType) FieldAlign() int
    method (*structType) FieldByIndex(index []int) (f StructField)
    method (*structType) FieldByName(name string) (f StructField, present bool)
    method (*structType) FieldByNameFunc(match func(string) bool) (result StructField, ok bool)
    method (*structType) Implements(u Type) bool
    method (*structType) In(i int) Type
    method (*structType) IsVariadic() bool
    method (*structType) Key() Type
    method (*structType) Kind() Kind
    method (*structType) Len() int
    method (*structType) Method(i int) (m Method)
    method (*structType) MethodByName(name string) (m Method, ok bool)
    method (*structType) Name() string
    method (*structType) NumField() int
    method (*structType) NumIn() int
    method (*structType) NumMethod() int
    method (*structType) NumOut() int
    method (*structType) Out(i int) Type
    method (*structType) PkgPath() string
    method (*structType) Size() uintptr
    method (*structType) String() string
    method (*structType) common() *rtype
    method (*structType) exportedMethods() []method
    method (*structType) nameOff(off nameOff) name
    method (*structType) pointers() bool
    method (*structType) ptrTo() *rtype
    method (*structType) textOff(off textOff) unsafe.Pointer
    method (*structType) typeOff(off typeOff) *rtype
    method (*structType) uncommon() *uncommonType
  type  structTypeFixed16           struct{structType; u uncommonType; m [16]method}
    method (*structTypeFixed16) Align() int
    method (*structTypeFixed16) AssignableTo(u Type) bool
    method (*structTypeFixed16) Bits() int
    method (*structTypeFixed16) ChanDir() ChanDir
    method (*structTypeFixed16) Comparable() bool
    method (*structTypeFixed16) ConvertibleTo(u Type) bool
    method (*structTypeFixed16) Elem() Type
    method (*structTypeFixed16) Field(i int) (f StructField)
    method (*structTypeFixed16) FieldAlign() int
    method (*structTypeFixed16) FieldByIndex(index []int) (f StructField)
    method (*structTypeFixed16) FieldByName(name string) (f StructField, present bool)
    method (*structTypeFixed16) FieldByNameFunc(match func(string) bool) (result StructField, ok bool)
    method (*structTypeFixed16) Implements(u Type) bool
    method (*structTypeFixed16) In(i int) Type
    method (*structTypeFixed16) IsVariadic() bool
    method (*structTypeFixed16) Key() Type
    method (*structTypeFixed16) Kind() Kind
    method (*structTypeFixed16) Len() int
    method (*structTypeFixed16) Method(i int) (m Method)
    method (*structTypeFixed16) MethodByName(name string) (m Method, ok bool)
    method (*structTypeFixed16) Name() string
    method (*structTypeFixed16) NumField() int
    method (*structTypeFixed16) NumIn() int
    method (*structTypeFixed16) NumMethod() int
    method (*structTypeFixed16) NumOut() int
    method (*structTypeFixed16) Out(i int) Type
    method (*structTypeFixed16) PkgPath() string
    method (*structTypeFixed16) Size() uintptr
    method (*structTypeFixed16) String() string
    method (*structTypeFixed16) common() *rtype
    method (*structTypeFixed16) exportedMethods() []method
    method (*structTypeFixed16) nameOff(off nameOff) name
    method (*structTypeFixed16) pointers() bool
    method (*structTypeFixed16) ptrTo() *rtype
    method (*structTypeFixed16) textOff(off textOff) unsafe.Pointer
    method (*structTypeFixed16) typeOff(off typeOff) *rtype
    method (*structTypeFixed16) uncommon() *uncommonType
  type  structTypeFixed32           struct{structType; u uncommonType; m [32]method}
    method (*structTypeFixed32) Align() int
    method (*structTypeFixed32) AssignableTo(u Type) bool
    method (*structTypeFixed32) Bits() int
    method (*structTypeFixed32) ChanDir() ChanDir
    method (*structTypeFixed32) Comparable() bool
    method (*structTypeFixed32) ConvertibleTo(u Type) bool
    method (*structTypeFixed32) Elem() Type
    method (*structTypeFixed32) Field(i int) (f StructField)
    method (*structTypeFixed32) FieldAlign() int
    method (*structTypeFixed32) FieldByIndex(index []int) (f StructField)
    method (*structTypeFixed32) FieldByName(name string) (f StructField, present bool)
    method (*structTypeFixed32) FieldByNameFunc(match func(string) bool) (result StructField, ok bool)
    method (*structTypeFixed32) Implements(u Type) bool
    method (*structTypeFixed32) In(i int) Type
    method (*structTypeFixed32) IsVariadic() bool
    method (*structTypeFixed32) Key() Type
    method (*structTypeFixed32) Kind() Kind
    method (*structTypeFixed32) Len() int
    method (*structTypeFixed32) Method(i int) (m Method)
    method (*structTypeFixed32) MethodByName(name string) (m Method, ok bool)
    method (*structTypeFixed32) Name() string
    method (*structTypeFixed32) NumField() int
    method (*structTypeFixed32) NumIn() int
    method (*structTypeFixed32) NumMethod() int
    method (*structTypeFixed32) NumOut() int
    method (*structTypeFixed32) Out(i int) Type
    method (*structTypeFixed32) PkgPath() string
    method (*structTypeFixed32) Size() uintptr
    method (*structTypeFixed32) String() string
    method (*structTypeFixed32) common() *rtype
    method (*structTypeFixed32) exportedMethods() []method
    method (*structTypeFixed32) nameOff(off nameOff) name
    method (*structTypeFixed32) pointers() bool
    method (*structTypeFixed32) ptrTo() *rtype
    method (*structTypeFixed32) textOff(off textOff) unsafe.Pointer
    method (*structTypeFixed32) typeOff(off typeOff) *rtype
    method (*structTypeFixed32) uncommon() *uncommonType
  type  structTypeFixed4            struct{structType; u uncommonType; m [4]method}
    method (*structTypeFixed4) Align() int
    method (*structTypeFixed4) AssignableTo(u Type) bool
    method (*structTypeFixed4) Bits() int
    method (*structTypeFixed4) ChanDir() ChanDir
    method (*structTypeFixed4) Comparable() bool
    method (*structTypeFixed4) ConvertibleTo(u Type) bool
    method (*structTypeFixed4) Elem() Type
    method (*structTypeFixed4) Field(i int) (f StructField)
    method (*structTypeFixed4) FieldAlign() int
    method (*structTypeFixed4) FieldByIndex(index []int) (f StructField)
    method (*structTypeFixed4) FieldByName(name string) (f StructField, present bool)
    method (*structTypeFixed4) FieldByNameFunc(match func(string) bool) (result StructField, ok bool)
    method (*structTypeFixed4) Implements(u Type) bool
    method (*structTypeFixed4) In(i int) Type
    method (*structTypeFixed4) IsVariadic() bool
    method (*structTypeFixed4) Key() Type
    method (*structTypeFixed4) Kind() Kind
    method (*structTypeFixed4) Len() int
    method (*structTypeFixed4) Method(i int) (m Method)
    method (*structTypeFixed4) MethodByName(name string) (m Method, ok bool)
    method (*structTypeFixed4) Name() string
    method (*structTypeFixed4) NumField() int
    method (*structTypeFixed4) NumIn() int
    method (*structTypeFixed4) NumMethod() int
    method (*structTypeFixed4) NumOut() int
    method (*structTypeFixed4) Out(i int) Type
    method (*structTypeFixed4) PkgPath() string
    method (*structTypeFixed4) Size() uintptr
    method (*structTypeFixed4) String() string
    method (*structTypeFixed4) common() *rtype
    method (*structTypeFixed4) exportedMethods() []method
    method (*structTypeFixed4) nameOff(off nameOff) name
    method (*structTypeFixed4) pointers() bool
    method (*structTypeFixed4) ptrTo() *rtype
    method (*structTypeFixed4) textOff(off textOff) unsafe.Pointer
    method (*structTypeFixed4) typeOff(off typeOff) *rtype
    method (*structTypeFixed4) uncommon() *uncommonType
  type  structTypeFixed8            struct{structType; u uncommonType; m [8]method}
    method (*structTypeFixed8) Align() int
    method (*structTypeFixed8) AssignableTo(u Type) bool
    method (*structTypeFixed8) Bits() int
    method (*structTypeFixed8) ChanDir() ChanDir
    method (*structTypeFixed8) Comparable() bool
    method (*structTypeFixed8) ConvertibleTo(u Type) bool
    method (*structTypeFixed8) Elem() Type
    method (*structTypeFixed8) Field(i int) (f StructField)
    method (*structTypeFixed8) FieldAlign() int
    method (*structTypeFixed8) FieldByIndex(index []int) (f StructField)
    method (*structTypeFixed8) FieldByName(name string) (f StructField, present bool)
    method (*structTypeFixed8) FieldByNameFunc(match func(string) bool) (result StructField, ok bool)
    method (*structTypeFixed8) Implements(u Type) bool
    method (*structTypeFixed8) In(i int) Type
    method (*structTypeFixed8) IsVariadic() bool
    method (*structTypeFixed8) Key() Type
    method (*structTypeFixed8) Kind() Kind
    method (*structTypeFixed8) Len() int
    method (*structTypeFixed8) Method(i int) (m Method)
    method (*structTypeFixed8) MethodByName(name string) (m Method, ok bool)
    method (*structTypeFixed8) Name() string
    method (*structTypeFixed8) NumField() int
    method (*structTypeFixed8) NumIn() int
    method (*structTypeFixed8) NumMethod() int
    method (*structTypeFixed8) NumOut() int
    method (*structTypeFixed8) Out(i int) Type
    method (*structTypeFixed8) PkgPath() string
    method (*structTypeFixed8) Size() uintptr
    method (*structTypeFixed8) String() string
    method (*structTypeFixed8) common() *rtype
    method (*structTypeFixed8) exportedMethods() []method
    method (*structTypeFixed8) nameOff(off nameOff) name
    method (*structTypeFixed8) pointers() bool
    method (*structTypeFixed8) ptrTo() *rtype
    method (*structTypeFixed8) textOff(off textOff) unsafe.Pointer
    method (*structTypeFixed8) typeOff(off typeOff) *rtype
    method (*structTypeFixed8) uncommon() *uncommonType
  type  structTypeUncommon          struct{structType; u uncommonType}
    method (*structTypeUncommon) Align() int
    method (*structTypeUncommon) AssignableTo(u Type) bool
    method (*structTypeUncommon) Bits() int
    method (*structTypeUncommon) ChanDir() ChanDir
    method (*structTypeUncommon) Comparable() bool
    method (*structTypeUncommon) ConvertibleTo(u Type) bool
    method (*structTypeUncommon) Elem() Type
    method (*structTypeUncommon) Field(i int) (f StructField)
    method (*structTypeUncommon) FieldAlign() int
    method (*structTypeUncommon) FieldByIndex(index []int) (f StructField)
    method (*structTypeUncommon) FieldByName(name string) (f StructField, present bool)
    method (*structTypeUncommon) FieldByNameFunc(match func(string) bool) (result StructField, ok bool)
    method (*structTypeUncommon) Implements(u Type) bool
    method (*structTypeUncommon) In(i int) Type
    method (*structTypeUncommon) IsVariadic() bool
    method (*structTypeUncommon) Key() Type
    method (*structTypeUncommon) Kind() Kind
    method (*structTypeUncommon) Len() int
    method (*structTypeUncommon) Method(i int) (m Method)
    method (*structTypeUncommon) MethodByName(name string) (m Method, ok bool)
    method (*structTypeUncommon) Name() string
    method (*structTypeUncommon) NumField() int
    method (*structTypeUncommon) NumIn() int
    method (*structTypeUncommon) NumMethod() int
    method (*structTypeUncommon) NumOut() int
    method (*structTypeUncommon) Out(i int) Type
    method (*structTypeUncommon) PkgPath() string
    method (*structTypeUncommon) Size() uintptr
    method (*structTypeUncommon) String() string
    method (*structTypeUncommon) common() *rtype
    method (*structTypeUncommon) exportedMethods() []method
    method (*structTypeUncommon) nameOff(off nameOff) name
    method (*structTypeUncommon) pointers() bool
    method (*structTypeUncommon) ptrTo() *rtype
    method (*structTypeUncommon) textOff(off textOff) unsafe.Pointer
    method (*structTypeUncommon) typeOff(off typeOff) *rtype
    method (*structTypeUncommon) uncommon() *uncommonType
  type  textOff                     int32
  type  tflag                       uint8
  const tflagExtraStar              tflagExtraStar = 2:tflag
  const tflagNamed                  tflagNamed = 4:tflag
  const tflagUncommon               tflagUncommon = 1:tflag
  func  toType                      func(t *rtype) Type
  type  typeAlg                     struct{hash func(unsafe.Pointer, uintptr) uintptr; equal func(unsafe.Pointer, unsafe.Pointer) bool}
  type  typeOff                     int32
  func  typedmemmove                func(t *rtype, dst unsafe.Pointer, src unsafe.Pointer)
  func  typedmemmovepartial         func(t *rtype, dst unsafe.Pointer, src unsafe.Pointer, off uintptr, size uintptr)
  func  typedslicecopy              func(elemType *rtype, dst sliceHeader, src sliceHeader) int
  func  typelinks                   func() (sections []unsafe.Pointer, offset [][]int32)
  func  typeptrdata                 func(t *rtype) uintptr
  func  typesByString               func(s string) []*rtype
  func  typesMustMatch              func(what string, t1 Type, t2 Type)
  var   uint8Type                   *rtype
  type  uncommonType                struct{pkgPath nameOff; mcount uint16; _ uint16; moff uint32; _ uint32}
    method (*uncommonType) methods() []method
  func  unpackEface                 func(i interface{}) Value
  func  unsafe_New                  func(*rtype) unsafe.Pointer
  func  unsafe_NewArray             func(*rtype, int) unsafe.Pointer
  func  valueInterface              func(v Value, safe bool) interface{}
  type  visit                       struct{a1 unsafe.Pointer; a2 unsafe.Pointer; typ Type}

package sort:
  type  Float64Slice      []float64
    method (Float64Slice) Len() int
    method (Float64Slice) Less(i int, j int) bool
    method (Float64Slice) Search(x float64) int
    method (Float64Slice) Sort()
    method (Float64Slice) Swap(i int, j int)
  func  Float64s          func(a []float64)
  func  Float64sAreSorted func(a []float64) bool
  type  IntSlice          []int
    method (IntSlice) Len() int
    method (IntSlice) Less(i int, j int) bool
    method (IntSlice) Search(x int) int
    method (IntSlice) Sort()
    method (IntSlice) Swap(i int, j int)
  type  Interface         interface{Len() int; Less(i int, j int) bool; Swap(i int, j int)}
    method (Interface) Len() int
    method (Interface) Less(i int, j int) bool
    method (Interface) Swap(i int, j int)
  func  Ints              func(a []int)
  func  IntsAreSorted     func(a []int) bool
  func  IsSorted          func(data Interface) bool
  func  Reverse           func(data Interface) Interface
  func  Search            func(n int, f func(int) bool) int
  func  SearchFloat64s    func(a []float64, x float64) int
  func  SearchInts        func(a []int, x int) int
  func  SearchStrings     func(a []string, x string) int
  func  Sort              func(data Interface)
  func  Stable            func(data Interface)
  type  StringSlice       []string
    method (StringSlice) Len() int
    method (StringSlice) Less(i int, j int) bool
    method (StringSlice) Search(x string) int
    method (StringSlice) Sort()
    method (StringSlice) Swap(i int, j int)
  func  Strings           func(a []string)
  func  StringsAreSorted  func(a []string) bool
  func  doPivot           func(data Interface, lo int, hi int) (midlo int, midhi int)
  func  heapSort          func(data Interface, a int, b int)
  func  init              func()
  var   init$guard        bool
  func  insertionSort     func(data Interface, a int, b int)
  func  isNaN             func(f float64) bool
  func  medianOfThree     func(data Interface, m1 int, m0 int, m2 int)
  func  quickSort         func(data Interface, a int, b int, maxDepth int)
  type  reverse           struct{Interface}
    method (reverse) Len() int
    method (reverse) Less(i int, j int) bool
    method (reverse) Swap(i int, j int)
  func  rotate            func(data Interface, a int, m int, b int)
  func  siftDown          func(data Interface, lo int, hi int, first int)
  func  swapRange         func(data Interface, a int, b int, n int)
  func  symMerge          func(data Interface, a int, m int, b int)

package regexp/syntax:
  const ClassNL                  ClassNL = 4:Flags
  func  Compile                  func(re *Regexp) (*Prog, error)
  const DotNL                    DotNL = 8:Flags
  const EmptyBeginLine           EmptyBeginLine = 1:EmptyOp
  const EmptyBeginText           EmptyBeginText = 4:EmptyOp
  const EmptyEndLine             EmptyEndLine = 2:EmptyOp
  const EmptyEndText             EmptyEndText = 8:EmptyOp
  const EmptyNoWordBoundary      EmptyNoWordBoundary = 32:EmptyOp
  type  EmptyOp                  uint8
  func  EmptyOpContext           func(r1 rune, r2 rune) EmptyOp
  const EmptyWordBoundary        EmptyWordBoundary = 16:EmptyOp
  const ErrInternalError         ErrInternalError = "regexp/syntax: in...":ErrorCode
  const ErrInvalidCharClass      ErrInvalidCharClass = "invalid character...":ErrorCode
  const ErrInvalidCharRange      ErrInvalidCharRange = "invalid character...":ErrorCode
  const ErrInvalidEscape         ErrInvalidEscape = "invalid escape se...":ErrorCode
  const ErrInvalidNamedCapture   ErrInvalidNamedCapture = "invalid named cap...":ErrorCode
  const ErrInvalidPerlOp         ErrInvalidPerlOp = "invalid or unsupp...":ErrorCode
  const ErrInvalidRepeatOp       ErrInvalidRepeatOp = "invalid nested re...":ErrorCode
  const ErrInvalidRepeatSize     ErrInvalidRepeatSize = "invalid repeat count":ErrorCode
  const ErrInvalidUTF8           ErrInvalidUTF8 = "invalid UTF-8":ErrorCode
  const ErrMissingBracket        ErrMissingBracket = "missing closing ]":ErrorCode
  const ErrMissingParen          ErrMissingParen = "missing closing )":ErrorCode
  const ErrMissingRepeatArgument ErrMissingRepeatArgument = "missing argument ...":ErrorCode
  const ErrTrailingBackslash     ErrTrailingBackslash = "trailing backslas...":ErrorCode
  const ErrUnexpectedParen       ErrUnexpectedParen = "unexpected )":ErrorCode
  type  Error                    struct{Code ErrorCode; Expr string}
    method (*Error) Error() string
  type  ErrorCode                string
    method (ErrorCode) String() string
  type  Flags                    uint16
  const FoldCase                 FoldCase = 1:Flags
  type  Inst                     struct{Op InstOp; Out uint32; Arg uint32; Rune []rune}
    method (*Inst) MatchEmptyWidth(before rune, after rune) bool
    method (*Inst) MatchRune(r rune) bool
    method (*Inst) MatchRunePos(r rune) int
    method (*Inst) String() string
    method (*Inst) op() InstOp
  const InstAlt                  InstAlt = 0:InstOp
  const InstAltMatch             InstAltMatch = 1:InstOp
  const InstCapture              InstCapture = 2:InstOp
  const InstEmptyWidth           InstEmptyWidth = 3:InstOp
  const InstFail                 InstFail = 5:InstOp
  const InstMatch                InstMatch = 4:InstOp
  const InstNop                  InstNop = 6:InstOp
  type  InstOp                   uint8
    method (InstOp) String() string
  const InstRune                 InstRune = 7:InstOp
  const InstRune1                InstRune1 = 8:InstOp
  const InstRuneAny              InstRuneAny = 9:InstOp
  const InstRuneAnyNotNL         InstRuneAnyNotNL = 10:InstOp
  func  IsWordChar               func(r rune) bool
  const Literal                  Literal = 2:Flags
  const MatchNL                  MatchNL = 12:Flags
  const NonGreedy                NonGreedy = 32:Flags
  const OneLine                  OneLine = 16:Flags
  type  Op                       uint8
  const OpAlternate              OpAlternate = 19:Op
  const OpAnyChar                OpAnyChar = 6:Op
  const OpAnyCharNotNL           OpAnyCharNotNL = 5:Op
  const OpBeginLine              OpBeginLine = 7:Op
  const OpBeginText              OpBeginText = 9:Op
  const OpCapture                OpCapture = 13:Op
  const OpCharClass              OpCharClass = 4:Op
  const OpConcat                 OpConcat = 18:Op
  const OpEmptyMatch             OpEmptyMatch = 2:Op
  const OpEndLine                OpEndLine = 8:Op
  const OpEndText                OpEndText = 10:Op
  const OpLiteral                OpLiteral = 3:Op
  const OpNoMatch                OpNoMatch = 1:Op
  const OpNoWordBoundary         OpNoWordBoundary = 12:Op
  const OpPlus                   OpPlus = 15:Op
  const OpQuest                  OpQuest = 16:Op
  const OpRepeat                 OpRepeat = 17:Op
  const OpStar                   OpStar = 14:Op
  const OpWordBoundary           OpWordBoundary = 11:Op
  const POSIX                    POSIX = 0:Flags
  func  Parse                    func(s string, flags Flags) (*Regexp, error)
  const Perl                     Perl = 212:Flags
  const PerlX                    PerlX = 64:Flags
  type  Prog                     struct{Inst []Inst; Start int; NumCap int}
    method (*Prog) Prefix() (prefix string, complete bool)
    method (*Prog) StartCond() EmptyOp
    method (*Prog) String() string
    method (*Prog) skipNop(pc uint32) (*Inst, uint32)
  type  Regexp                   struct{Op Op; Flags Flags; Sub []*Regexp; Sub0 [1]*Regexp; Rune []rune; Rune0 [2]rune; Min int; Max int; Cap int; Name string}
    method (*Regexp) CapNames() []string
    method (*Regexp) Equal(y *Regexp) bool
    method (*Regexp) MaxCap() int
    method (*Regexp) Simplify() *Regexp
    method (*Regexp) String() string
    method (*Regexp) capNames(names []string)
  const Simple                   Simple = 512:Flags
  const UnicodeGroups            UnicodeGroups = 128:Flags
  const WasDollar                WasDollar = 256:Flags
  var   anyRune                  []rune
  var   anyRuneNotNL             []rune
  var   anyTable                 *unicode.RangeTable
  func  appendClass              func(r []rune, x []rune) []rune
  func  appendFoldedClass        func(r []rune, x []rune) []rune
  func  appendFoldedRange        func(r []rune, lo rune, hi rune) []rune
  func  appendLiteral            func(r []rune, x rune, flags Flags) []rune
  func  appendNegatedClass       func(r []rune, x []rune) []rune
  func  appendNegatedTable       func(r []rune, x *unicode.RangeTable) []rune
  func  appendRange              func(r []rune, lo rune, hi rune) []rune
  func  appendTable              func(r []rune, x *unicode.RangeTable) []rune
  func  bw                       func(b *bytes.Buffer, args ...string)
  type  charGroup                struct{sign int; class []rune}
  func  checkUTF8                func(s string) error
  func  cleanAlt                 func(re *Regexp)
  func  cleanClass               func(rp *[]rune) []rune
  var   code1                    []rune
  var   code10                   []rune
  var   code11                   []rune
  var   code12                   []rune
  var   code13                   []rune
  var   code14                   []rune
  var   code15                   []rune
  var   code16                   []rune
  var   code17                   []rune
  var   code2                    []rune
  var   code3                    []rune
  var   code4                    []rune
  var   code5                    []rune
  var   code6                    []rune
  var   code7                    []rune
  var   code8                    []rune
  var   code9                    []rune
  type  compiler                 struct{p *Prog}
    method (*compiler) alt(f1 frag, f2 frag) frag
    method (*compiler) cap(arg uint32) frag
    method (*compiler) cat(f1 frag, f2 frag) frag
    method (*compiler) compile(re *Regexp) frag
    method (*compiler) empty(op EmptyOp) frag
    method (*compiler) fail() frag
    method (*compiler) init()
    method (*compiler) inst(op InstOp) frag
    method (*compiler) nop() frag
    method (*compiler) plus(f1 frag, nongreedy bool) frag
    method (*compiler) quest(f1 frag, nongreedy bool) frag
    method (*compiler) rune(r []rune, flags Flags) frag
    method (*compiler) star(f1 frag, nongreedy bool) frag
  func  dumpInst                 func(b *bytes.Buffer, i *Inst)
  func  dumpProg                 func(b *bytes.Buffer, p *Prog)
  func  escape                   func(b *bytes.Buffer, r rune, force bool)
  type  frag                     struct{i uint32; out patchList}
  func  init                     func()
  var   init$guard               bool
  var   instOpNames              []string
  func  isCharClass              func(re *Regexp) bool
  func  isValidCaptureName       func(name string) bool
  func  isalnum                  func(c rune) bool
  func  literalRegexp            func(s string, flags Flags) *Regexp
  func  matchRune                func(re *Regexp, r rune) bool
  const maxFold                  maxFold = 125251:untyped int
  func  mergeCharClass           func(dst *Regexp, src *Regexp)
  const meta                     meta = "\\.+*?()|[]{}^$":untyped string
  const minFold                  minFold = 65:untyped int
  func  minFoldRune              func(r rune) rune
  func  negateClass              func(r []rune) []rune
  func  nextRune                 func(s string) (c rune, t string, err error)
  const noMatch                  noMatch = -1:untyped int
  const opLeftParen              opLeftParen = 128:Op
  const opPseudo                 opPseudo = 128:Op
  const opVerticalBar            opVerticalBar = 129:Op
  type  parser                   struct{flags Flags; stack []*Regexp; free *Regexp; numCap int; wholeRegexp string; tmpClass []rune}
    method (*parser) alternate() *Regexp
    method (*parser) appendGroup(r []rune, g charGroup) []rune
    method (*parser) collapse(subs []*Regexp, op Op) *Regexp
    method (*parser) concat() *Regexp
    method (*parser) factor(sub []*Regexp, flags Flags) []*Regexp
    method (*parser) leadingRegexp(re *Regexp) *Regexp
    method (*parser) leadingString(re *Regexp) ([]rune, Flags)
    method (*parser) literal(r rune)
    method (*parser) maybeConcat(r rune, flags Flags) bool
    method (*parser) newLiteral(r rune, flags Flags) *Regexp
    method (*parser) newRegexp(op Op) *Regexp
    method (*parser) op(op Op) *Regexp
    method (*parser) parseClass(s string) (rest string, err error)
    method (*parser) parseClassChar(s string, wholeClass string) (r rune, rest string, err error)
    method (*parser) parseEscape(s string) (r rune, rest string, err error)
    method (*parser) parseInt(s string) (n int, rest string, ok bool)
    method (*parser) parseNamedClass(s string, r []rune) (out []rune, rest string, err error)
    method (*parser) parsePerlClassEscape(s string, r []rune) (out []rune, rest string)
    method (*parser) parsePerlFlags(s string) (rest string, err error)
    method (*parser) parseRepeat(s string) (min int, max int, rest string, ok bool)
    method (*parser) parseRightParen() error
    method (*parser) parseUnicodeClass(s string, r []rune) (out []rune, rest string, err error)
    method (*parser) parseVerticalBar() error
    method (*parser) push(re *Regexp) *Regexp
    method (*parser) removeLeadingRegexp(re *Regexp, reuse bool) *Regexp
    method (*parser) removeLeadingString(re *Regexp, n int) *Regexp
    method (*parser) repeat(op Op, min int, max int, before string, after string, lastRepeat string) (string, error)
    method (*parser) reuse(re *Regexp)
    method (*parser) swapVerticalBar() bool
  type  patchList                uint32
    method (patchList) append(p *Prog, l2 patchList) patchList
    method (patchList) next(p *Prog) patchList
    method (patchList) patch(p *Prog, val uint32)
  var   perlGroup                map[string]charGroup
  var   posixGroup               map[string]charGroup
  type  ranges                   struct{p *[]rune}
    method (ranges) Len() int
    method (ranges) Less(i int, j int) bool
    method (ranges) Swap(i int, j int)
  func  repeatIsValid            func(re *Regexp, n int) bool
  func  simplify1                func(op Op, flags Flags, sub *Regexp, re *Regexp) *Regexp
  func  u32                      func(i uint32) string
  func  unhex                    func(c rune) rune
  func  unicodeTable             func(name string) (*unicode.RangeTable, *unicode.RangeTable)
  func  wordRune                 func(r rune) bool
  func  writeRegexp              func(b *bytes.Buffer, re *Regexp)

package runtime/internal/atomic:
  func  And8         func(ptr *uint8, val uint8)
  func  Cas          func(ptr *uint32, old uint32, new uint32) bool
  func  Cas64        func(ptr *uint64, old uint64, new uint64) bool
  func  Casp1        func(ptr *unsafe.Pointer, old unsafe.Pointer, new unsafe.Pointer) bool
  func  Casuintptr   func(ptr *uintptr, old uintptr, new uintptr) bool
  func  Load         func(ptr *uint32) uint32
  func  Load64       func(ptr *uint64) uint64
  func  Loadint64    func(ptr *int64) int64
  func  Loadp        func(ptr unsafe.Pointer) unsafe.Pointer
  func  Loaduint     func(ptr *uint) uint
  func  Loaduintptr  func(ptr *uintptr) uintptr
  func  Or8          func(ptr *uint8, val uint8)
  func  Store        func(ptr *uint32, val uint32)
  func  Store64      func(ptr *uint64, val uint64)
  func  StorepNoWB   func(ptr unsafe.Pointer, val unsafe.Pointer)
  func  Storeuintptr func(ptr *uintptr, new uintptr)
  func  Xadd         func(ptr *uint32, delta int32) uint32
  func  Xadd64       func(ptr *uint64, delta int64) uint64
  func  Xaddint64    func(ptr *int64, delta int64) int64
  func  Xadduintptr  func(ptr *uintptr, delta uintptr) uintptr
  func  Xchg         func(ptr *uint32, new uint32) uint32
  func  Xchg64       func(ptr *uint64, new uint64) uint64
  func  Xchguintptr  func(ptr *uintptr, new uintptr) uintptr
  func  init         func()
  var   init$guard   bool

package encoding/binary:
  var   BigEndian      bigEndian
  type  ByteOrder      interface{PutUint16([]byte, uint16); PutUint32([]byte, uint32); PutUint64([]byte, uint64); String() string; Uint16([]byte) uint16; Uint32([]byte) uint32; Uint64([]byte) uint64}
    method (ByteOrder) PutUint16([]byte, uint16)
    method (ByteOrder) PutUint32([]byte, uint32)
    method (ByteOrder) PutUint64([]byte, uint64)
    method (ByteOrder) String() string
    method (ByteOrder) Uint16([]byte) uint16
    method (ByteOrder) Uint32([]byte) uint32
    method (ByteOrder) Uint64([]byte) uint64
  var   LittleEndian   littleEndian
  const MaxVarintLen16 MaxVarintLen16 = 3:untyped int
  const MaxVarintLen32 MaxVarintLen32 = 5:untyped int
  const MaxVarintLen64 MaxVarintLen64 = 10:untyped int
  func  PutUvarint     func(buf []byte, x uint64) int
  func  PutVarint      func(buf []byte, x int64) int
  func  Read           func(r io.Reader, order ByteOrder, data interface{}) error
  func  ReadUvarint    func(r io.ByteReader) (uint64, error)
  func  ReadVarint     func(r io.ByteReader) (int64, error)
  func  Size           func(v interface{}) int
  func  Uvarint        func(buf []byte) (uint64, int)
  func  Varint         func(buf []byte) (int64, int)
  func  Write          func(w io.Writer, order ByteOrder, data interface{}) error
  type  bigEndian      struct{}
    method (bigEndian) GoString() string
    method (bigEndian) PutUint16(b []byte, v uint16)
    method (bigEndian) PutUint32(b []byte, v uint32)
    method (bigEndian) PutUint64(b []byte, v uint64)
    method (bigEndian) String() string
    method (bigEndian) Uint16(b []byte) uint16
    method (bigEndian) Uint32(b []byte) uint32
    method (bigEndian) Uint64(b []byte) uint64
  type  coder          struct{order ByteOrder; buf []byte}
  func  dataSize       func(v reflect.Value) int
  type  decoder        struct{order ByteOrder; buf []byte}
    method (*decoder) int16() int16
    method (*decoder) int32() int32
    method (*decoder) int64() int64
    method (*decoder) int8() int8
    method (*decoder) skip(v reflect.Value)
    method (*decoder) uint16() uint16
    method (*decoder) uint32() uint32
    method (*decoder) uint64() uint64
    method (*decoder) uint8() uint8
    method (*decoder) value(v reflect.Value)
  type  encoder        struct{order ByteOrder; buf []byte}
    method (*encoder) int16(x int16)
    method (*encoder) int32(x int32)
    method (*encoder) int64(x int64)
    method (*encoder) int8(x int8)
    method (*encoder) skip(v reflect.Value)
    method (*encoder) uint16(x uint16)
    method (*encoder) uint32(x uint32)
    method (*encoder) uint64(x uint64)
    method (*encoder) uint8(x uint8)
    method (*encoder) value(v reflect.Value)
  func  init           func()
  var   init$guard     bool
  func  intDataSize    func(data interface{}) int
  type  littleEndian   struct{}
    method (littleEndian) GoString() string
    method (littleEndian) PutUint16(b []byte, v uint16)
    method (littleEndian) PutUint32(b []byte, v uint32)
    method (littleEndian) PutUint64(b []byte, v uint64)
    method (littleEndian) String() string
    method (littleEndian) Uint16(b []byte) uint16
    method (littleEndian) Uint32(b []byte) uint32
    method (littleEndian) Uint64(b []byte) uint64
  var   overflow       error
  func  sizeof         func(t reflect.Type) int

package github.com/mattn/go-runewidth:
  type  Condition        struct{EastAsianWidth bool}
    method (*Condition) FillLeft(s string, w int) string
    method (*Condition) FillRight(s string, w int) string
    method (*Condition) RuneWidth(r rune) int
    method (*Condition) StringWidth(s string) (width int)
    method (*Condition) Truncate(s string, w int, tail string) string
    method (*Condition) Wrap(s string, w int) string
  var   DefaultCondition *Condition
  var   EastAsianWidth   bool
  func  FillLeft         func(s string, w int) string
  func  FillRight        func(s string, w int) string
  func  IsAmbiguousWidth func(r rune) bool
  func  IsEastAsian      func() bool
  func  IsNeutralWidth   func(r rune) bool
  func  NewCondition     func() *Condition
  func  RuneWidth        func(r rune) int
  func  StringWidth      func(s string) (width int)
  func  Truncate         func(s string, w int, tail string) string
  func  Wrap             func(s string, w int) string
  const ambiguous        ambiguous = 1:ctype
  var   combining        []interval
  func  ct               func(r rune) ctype
  type  ctype            int
  var   ctypes           []intervalType
  const fullwidth        fullwidth = 4:ctype
  const halfwidth        halfwidth = 3:ctype
  func  init             func()
  var   init$guard       bool
  type  interval         struct{first rune; last rune}
  type  intervalType     struct{first rune; last rune; ctype ctype}
  func  isEastAsian      func(locale string) bool
  var   mblenTable       map[string]int
  const narrow           narrow = 0:ctype
  const neutral          neutral = 5:ctype
  var   reLoc            *regexp.Regexp
  const wide             wide = 2:ctype

package internal/race:
  func  Acquire      func(addr unsafe.Pointer)
  func  Disable      func()
  func  Enable       func()
  const Enabled      Enabled = false:untyped bool
  func  Read         func(addr unsafe.Pointer)
  func  ReadRange    func(addr unsafe.Pointer, len int)
  func  Release      func(addr unsafe.Pointer)
  func  ReleaseMerge func(addr unsafe.Pointer)
  func  Write        func(addr unsafe.Pointer)
  func  WriteRange   func(addr unsafe.Pointer, len int)
  func  init         func()
  var   init$guard   bool

package unicode/utf8:
  func  DecodeLastRune         func(p []byte) (r rune, size int)
  func  DecodeLastRuneInString func(s string) (r rune, size int)
  func  DecodeRune             func(p []byte) (r rune, size int)
  func  DecodeRuneInString     func(s string) (r rune, size int)
  func  EncodeRune             func(p []byte, r rune) int
  func  FullRune               func(p []byte) bool
  func  FullRuneInString       func(s string) bool
  const MaxRune                MaxRune = 1114111:untyped rune
  func  RuneCount              func(p []byte) int
  func  RuneCountInString      func(s string) (n int)
  const RuneError              RuneError = 65533:untyped rune
  func  RuneLen                func(r rune) int
  const RuneSelf               RuneSelf = 128:untyped int
  func  RuneStart              func(b byte) bool
  const UTFMax                 UTFMax = 4:untyped int
  func  Valid                  func(p []byte) bool
  func  ValidRune              func(r rune) bool
  func  ValidString            func(s string) bool
  type  acceptRange            struct{lo uint8; hi uint8}
  var   acceptRanges           [5]acceptRange
  const as                     as = 240:untyped int
  var   first                  [256]uint8
  const hicb                   hicb = 191:untyped int
  func  init                   func()
  var   init$guard             bool
  const locb                   locb = 128:untyped int
  const mask2                  mask2 = 31:untyped int
  const mask3                  mask3 = 15:untyped int
  const mask4                  mask4 = 7:untyped int
  const maskx                  maskx = 63:untyped int
  const rune1Max               rune1Max = 127:untyped int
  const rune2Max               rune2Max = 2047:untyped int
  const rune3Max               rune3Max = 65535:untyped int
  const s1                     s1 = 2:untyped int
  const s2                     s2 = 19:untyped int
  const s3                     s3 = 3:untyped int
  const s4                     s4 = 35:untyped int
  const s5                     s5 = 52:untyped int
  const s6                     s6 = 4:untyped int
  const s7                     s7 = 68:untyped int
  const surrogateMax           surrogateMax = 57343:untyped int
  const surrogateMin           surrogateMin = 55296:untyped int
  const t1                     t1 = 0:untyped int
  const t2                     t2 = 192:untyped int
  const t3                     t3 = 224:untyped int
  const t4                     t4 = 240:untyped int
  const t5                     t5 = 248:untyped int
  const tx                     tx = 128:untyped int
  const xx                     xx = 241:untyped int

package errors:
  func  New         func(text string) error
  type  errorString struct{s string}
    method (*errorString) Error() string
  func  init        func()
  var   init$guard  bool

package sync:
  type  Cond                        struct{noCopy noCopy; L Locker; notify notifyList; checker copyChecker}
    method (*Cond) Broadcast()
    method (*Cond) Signal()
    method (*Cond) Wait()
  type  Locker                      interface{Lock(); Unlock()}
    method (Locker) Lock()
    method (Locker) Unlock()
  type  Mutex                       struct{state int32; sema uint32}
    method (*Mutex) Lock()
    method (*Mutex) Unlock()
  func  NewCond                     func(l Locker) *Cond
  type  Once                        struct{m Mutex; done uint32}
    method (*Once) Do(f func())
  type  Pool                        struct{noCopy noCopy; local unsafe.Pointer; localSize uintptr; New func() interface{}}
    method (*Pool) Get() interface{}
    method (*Pool) Put(x interface{})
    method (*Pool) getSlow() (x interface{})
    method (*Pool) pin() *poolLocal
    method (*Pool) pinSlow() *poolLocal
  type  RWMutex                     struct{w Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}
    method (*RWMutex) Lock()
    method (*RWMutex) RLock()
    method (*RWMutex) RLocker() Locker
    method (*RWMutex) RUnlock()
    method (*RWMutex) Unlock()
  type  WaitGroup                   struct{noCopy noCopy; state1 [12]byte; sema uint32}
    method (*WaitGroup) Add(delta int)
    method (*WaitGroup) Done()
    method (*WaitGroup) Wait()
    method (*WaitGroup) state() *uint64
  var   allPools                    []*Pool
  var   allPoolsMu                  Mutex
  type  copyChecker                 uintptr
    method (*copyChecker) check()
  func  indexLocal                  func(l unsafe.Pointer, i int) *poolLocal
  func  init                        func()
  func  init#1                      func()
  func  init#2                      func()
  var   init$guard                  bool
  const mutexLocked                 mutexLocked = 1:untyped int
  const mutexWaiterShift            mutexWaiterShift = 2:untyped int
  const mutexWoken                  mutexWoken = 2:untyped int
  type  noCopy                      struct{}
    method (*noCopy) Lock()
  type  notifyList                  struct{wait uint32; notify uint32; lock uintptr; head unsafe.Pointer; tail unsafe.Pointer}
  func  poolCleanup                 func()
  type  poolLocal                   struct{private interface{}; shared []interface{}; Mutex; pad [128]byte}
    method (*poolLocal) Lock()
    method (*poolLocal) Unlock()
  type  rlocker                     struct{w Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}
    method (*rlocker) Lock()
    method (*rlocker) Unlock()
  func  runtime_Semacquire          func(s *uint32)
  func  runtime_Semrelease          func(s *uint32)
  func  runtime_canSpin             func(i int) bool
  func  runtime_doSpin              func()
  func  runtime_notifyListAdd       func(l *notifyList) uint32
  func  runtime_notifyListCheck     func(size uintptr)
  func  runtime_notifyListNotifyAll func(l *notifyList)
  func  runtime_notifyListNotifyOne func(l *notifyList)
  func  runtime_notifyListWait      func(l *notifyList, t uint32)
  func  runtime_procPin             func() int
  func  runtime_procUnpin           func()
  func  runtime_registerPoolCleanup func(cleanup func())
  const rwmutexMaxReaders           rwmutexMaxReaders = 1073741824:untyped int

package io/ioutil:
  var   Discard       io.Writer
  func  NopCloser     func(r io.Reader) io.ReadCloser
  func  ReadAll       func(r io.Reader) ([]byte, error)
  func  ReadDir       func(dirname string) ([]os.FileInfo, error)
  func  ReadFile      func(filename string) ([]byte, error)
  func  TempDir       func(dir string, prefix string) (name string, err error)
  func  TempFile      func(dir string, prefix string) (f *os.File, err error)
  func  WriteFile     func(filename string, data []byte, perm os.FileMode) error
  var   blackHolePool sync.Pool
  type  byName        []os.FileInfo
    method (byName) Len() int
    method (byName) Less(i int, j int) bool
    method (byName) Swap(i int, j int)
  type  devNull       int
    method (devNull) ReadFrom(r io.Reader) (n int64, err error)
    method (devNull) Write(p []byte) (int, error)
    method (devNull) WriteString(s string) (int, error)
  func  init          func()
  var   init$guard    bool
  func  nextSuffix    func() string
  type  nopCloser     struct{io.Reader}
    method (nopCloser) Close() error
    method (nopCloser) Read(p []byte) (n int, err error)
  var   rand          uint32
  var   randmu        sync.Mutex
  func  readAll       func(r io.Reader, capacity int64) (b []byte, err error)
  func  reseed        func() uint32

package runtime/internal/sys:
  const AMD64                AMD64 = 0:ArchFamilyType
  const ARM                  ARM = 1:ArchFamilyType
  const ARM64                ARM64 = 2:ArchFamilyType
  const ArchFamily           ArchFamily = 0:ArchFamilyType
  type  ArchFamilyType       int
  const BigEndian            BigEndian = 0:untyped int
  func  Bswap32              func(x uint32) uint32
  func  Bswap64              func(x uint64) uint64
  const CacheLineSize        CacheLineSize = 64:untyped int
  func  Ctz16                func(x uint16) uint16
  func  Ctz32                func(x uint32) uint32
  func  Ctz64                func(x uint64) uint64
  func  Ctz8                 func(x uint8) uint8
  const DefaultGoroot        DefaultGoroot = "/usr/lib/go":untyped string
  const GOARCH               GOARCH = "amd64":untyped string
  const GOOS                 GOOS = "linux":untyped string
  const Goarch386            Goarch386 = 0:untyped int
  const GoarchAmd64          GoarchAmd64 = 1:untyped int
  const GoarchAmd64p32       GoarchAmd64p32 = 0:untyped int
  const GoarchArm            GoarchArm = 0:untyped int
  const GoarchArm64          GoarchArm64 = 0:untyped int
  const GoarchArm64be        GoarchArm64be = 0:untyped int
  const GoarchArmbe          GoarchArmbe = 0:untyped int
  const GoarchMips           GoarchMips = 0:untyped int
  const GoarchMips64         GoarchMips64 = 0:untyped int
  const GoarchMips64le       GoarchMips64le = 0:untyped int
  const GoarchMips64p32      GoarchMips64p32 = 0:untyped int
  const GoarchMips64p32le    GoarchMips64p32le = 0:untyped int
  const GoarchMipsle         GoarchMipsle = 0:untyped int
  const GoarchPpc            GoarchPpc = 0:untyped int
  const GoarchPpc64          GoarchPpc64 = 0:untyped int
  const GoarchPpc64le        GoarchPpc64le = 0:untyped int
  const GoarchS390           GoarchS390 = 0:untyped int
  const GoarchS390x          GoarchS390x = 0:untyped int
  const GoarchSparc          GoarchSparc = 0:untyped int
  const GoarchSparc64        GoarchSparc64 = 0:untyped int
  const Goexperiment         Goexperiment = "":untyped string
  const GoosAndroid          GoosAndroid = 0:untyped int
  const GoosDarwin           GoosDarwin = 0:untyped int
  const GoosDragonfly        GoosDragonfly = 0:untyped int
  const GoosFreebsd          GoosFreebsd = 0:untyped int
  const GoosLinux            GoosLinux = 1:untyped int
  const GoosNacl             GoosNacl = 0:untyped int
  const GoosNetbsd           GoosNetbsd = 0:untyped int
  const GoosOpenbsd          GoosOpenbsd = 0:untyped int
  const GoosPlan9            GoosPlan9 = 0:untyped int
  const GoosSolaris          GoosSolaris = 0:untyped int
  const GoosWindows          GoosWindows = 0:untyped int
  const HugePageSize         HugePageSize = 2097152:untyped int
  const I386                 I386 = 3:ArchFamilyType
  const Int64Align           Int64Align = 8:untyped int
  const MIPS64               MIPS64 = 4:ArchFamilyType
  const MinFrameSize         MinFrameSize = 0:untyped int
  const PCQuantum            PCQuantum = 1:untyped int
  const PPC64                PPC64 = 5:ArchFamilyType
  const PhysPageSize         PhysPageSize = 4096:untyped int
  const PtrSize              PtrSize = 8:untyped int
  const RegSize              RegSize = 8:untyped int
  const S390X                S390X = 6:ArchFamilyType
  const SpAlign              SpAlign = 1:untyped int
  const StackGuardMultiplier StackGuardMultiplier = 1:untyped int
  const TheVersion           TheVersion = "go1.7.1":untyped string
  type  Uintreg              uint64
  const deBruijn16           deBruijn16 = 2479:untyped int
  const deBruijn32           deBruijn32 = 73743071:untyped int
  const deBruijn64           deBruijn64 = 151050438420815295:untyped int
  const deBruijn8            deBruijn8 = 23:untyped int
  var   deBruijnIdx16        [16]byte
  var   deBruijnIdx32        [32]byte
  var   deBruijnIdx64        [64]byte
  var   deBruijnIdx8         [8]byte
  func  init                 func()
  var   init$guard           bool

# Name: (*github.com/JoergReinhardt/worm.gameStat).String
# Synthetic: wrapper for func (github.com/JoergReinhardt/worm.gameStat).String() string
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/gamestat_string.go:21:19
# Locals:
#   0:	t0 *github.com/JoergReinhardt/worm.gameStat
func (i *github.com/JoergReinhardt/worm.gameStat) String() string:
0:                                                                entry P:0 S:0
	t0 = local *github.com/JoergReinhardt/worm.gameStat (i) **github.com/JoergReinhardt/worm.gameStat
	*t0 = i
	t1 = *t0                       *github.com/JoergReinhardt/worm.gameStat
	t2 = ssa:wrapnilchk(t1, "github.com/JoergR...":string, "String":string) *github.com/JoergReinhardt/worm.gameStat
	t3 = *t2                        github.com/JoergReinhardt/worm.gameStat
	t4 = (github.com/JoergReinhardt/worm.gameStat).String(t3)        string
	return t4

# Name: github.com/JoergReinhardt/worm.gameController
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/controller.go:35:6
# Locals:
#   0:	t0 *game
func gameController(g *game):
0:                                                                entry P:0 S:1
	t0 = local *game (g)                                             **game
	*t0 = g
	jump 1
1:                                                             for.body P:2 S:2
	t1 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 40:6 is t1
	t2 = &t1.state [#0]                                             **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 40:8 is t2
	t3 = *t2                                                         *state
	; *ast.SelectorExpr @ 40:6 is t3
	t4 = &t3.eventState [#1]                                      *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 40:14 is t4
	t5 = *t4                                                       gameStat
	; *ast.SelectorExpr @ 40:6 is t5
	t6 = t5 == 0:gameStat                                              bool
	; *ast.BinaryExpr @ 40:6 is t6
	if t6 goto 3 else 2
2:                                                              if.done P:2 S:2
	t7 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 52:6 is t7
	t8 = &t7.state [#0]                                             **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 52:8 is t8
	t9 = *t8                                                         *state
	; *ast.SelectorExpr @ 52:6 is t9
	t10 = &t9.eventState [#1]                                     *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 52:14 is t10
	t11 = *t10                                                     gameStat
	; *ast.SelectorExpr @ 52:6 is t11
	t12 = t11 == 4:gameStat                                            bool
	; *ast.BinaryExpr @ 52:6 is t12
	if t12 goto 5 else 4
3:                                                             for.body P:2 S:2
	; func github.com/JoergReinhardt/worm.initScreen() @ 42:5 is initScreen
	t13 = initScreen()                                                   ()
	; *ast.CallExpr @ 42:5 is t13
	; func time.Sleep(d time.Duration) @ 44:10 is Sleep
	; *ast.SelectorExpr @ 44:5 is Sleep
	t14 = time.Sleep(10000000:time.Duration)                             ()
	; *ast.CallExpr @ 44:5 is t14
	t15 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 45:8 is t15
	t16 = &t15.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 45:10 is t16
	t17 = *t16                                                       *state
	; *ast.SelectorExpr @ 45:8 is t17
	t18 = &t17.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 45:16 is t18
	t19 = *t18                                                     gameStat
	; *ast.SelectorExpr @ 45:8 is t19
	t20 = t19 != 0:gameStat                                            bool
	; *ast.BinaryExpr @ 45:8 is t20
	if t20 goto 2 else 3
4:                                                              if.done P:2 S:1
	t21 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 69:3 is t21
	t22 = (*game).play(t21)                                              ()
	; *ast.CallExpr @ 69:3 is t22
	; func github.com/JoergReinhardt/worm.render(g *github.com/JoergReinhardt/worm.game) @ 73:3 is render
	t23 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 73:10 is t23
	t24 = render(t23)                                                    ()
	; *ast.CallExpr @ 73:3 is t24
	; func time.Sleep(d time.Duration) @ 76:8 is Sleep
	; *ast.SelectorExpr @ 76:3 is Sleep
	t25 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 76:14 is t25
	t26 = &t25.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 76:16 is t26
	t27 = *t26                                                       *state
	; *ast.SelectorExpr @ 76:14 is t27
	t28 = &t27.speed [#0]                                    *time.Duration
	; address of field speed time.Duration @ 76:22 is t28
	t29 = *t28                                                time.Duration
	; *ast.SelectorExpr @ 76:14 is t29
	t30 = time.Sleep(t29)                                                ()
	; *ast.CallExpr @ 76:3 is t30
	jump 1
5:                                                             for.body P:2 S:2
	; func github.com/JoergReinhardt/worm.initScreen() @ 54:5 is initScreen
	t31 = initScreen()                                                   ()
	; *ast.CallExpr @ 54:5 is t31
	; func time.Sleep(d time.Duration) @ 56:10 is Sleep
	; *ast.SelectorExpr @ 56:5 is Sleep
	t32 = time.Sleep(10000000:time.Duration)                             ()
	; *ast.CallExpr @ 56:5 is t32
	t33 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 57:8 is t33
	t34 = &t33.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 57:10 is t34
	t35 = *t34                                                       *state
	; *ast.SelectorExpr @ 57:8 is t35
	t36 = &t35.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 57:16 is t36
	t37 = *t36                                                     gameStat
	; *ast.SelectorExpr @ 57:8 is t37
	t38 = t37 != 4:gameStat                                            bool
	; *ast.BinaryExpr @ 57:8 is t38
	if t38 goto 4 else 5

# Name: github.com/JoergReinhardt/worm.run$1
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/controller.go:94:5
# Parent: run
# Free variables:
#   0:	eventQueue *chan github.com/nsf/termbox-go.Event
func run$1():
0:                                                                entry P:0 S:1
	jump 1
1:                                                             for.body P:2 S:1
	t0 = *eventQueue                   chan github.com/nsf/termbox-go.Event
	; var eventQueue chan github.com/nsf/termbox-go.Event @ 96:4 is t0
	; func github.com/nsf/termbox-go.PollEvent() github.com/nsf/termbox-go.Event @ 96:26 is PollEvent
	; *ast.SelectorExpr @ 96:18 is PollEvent
	t1 = github.com/nsf/termbox-go.PollEvent() github.com/nsf/termbox-go.Event
	; *ast.CallExpr @ 96:18 is t1
	send t0 <- t1
	jump 1

# Name: github.com/JoergReinhardt/worm.run
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/controller.go:80:6
# Locals:
#   0:	t0 *game
#   1:	t6 github.com/nsf/termbox-go.Event
func run():
0:                                                                entry P:0 S:1
	t0 = local *game (g)                                             **game
	; func github.com/JoergReinhardt/worm.newGame(sizeFn func() (x int, y int)) *github.com/JoergReinhardt/worm.game @ 85:7 is newGame
	; func github.com/nsf/termbox-go.Size() (width int, height int) @ 85:23 is Size
	; *ast.SelectorExpr @ 85:15 is Size
	t1 = newGame(github.com/nsf/termbox-go.Size)                      *game
	; *ast.CallExpr @ 85:7 is t1
	*t0 = t1
	; var g *github.com/JoergReinhardt/worm.game @ 85:2 is t1
	; func github.com/JoergReinhardt/worm.gameController(g *github.com/JoergReinhardt/worm.game) @ 87:5 is gameController
	t2 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 87:20 is t2
	go gameController(t2)
	t3 = new chan github.com/nsf/termbox-go.Event (eventQueue) *chan github.com/nsf/termbox-go.Event
	t4 = make chan github.com/nsf/termbox-go.Event 0:int chan github.com/nsf/termbox-go.Event
	; *ast.CallExpr @ 92:16 is t4
	*t3 = t4
	; var eventQueue chan github.com/nsf/termbox-go.Event @ 92:2 is t4
	t5 = make closure run$1 [t3]                                     func()
	; *ast.FuncLit @ 94:5 is t5
	go t5()
	jump 1
1:                                                             for.body P:2 S:2
	t6 = local github.com/nsf/termbox-go.Event (ev) *github.com/nsf/termbox-go.Event
	t7 = *t3                           chan github.com/nsf/termbox-go.Event
	; var eventQueue chan github.com/nsf/termbox-go.Event @ 104:11 is t7
	t8 = <-t7                               github.com/nsf/termbox-go.Event
	; *ast.UnaryExpr @ 104:9 is t8
	*t6 = t8
	; var ev github.com/nsf/termbox-go.Event @ 104:3 is t8
	; address of var ev github.com/nsf/termbox-go.Event @ 105:6 is t6
	t9 = &t6.Type [#0]                 *github.com/nsf/termbox-go.EventType
	; address of field Type github.com/nsf/termbox-go.EventType @ 105:9 is t9
	t10 = *t9                           github.com/nsf/termbox-go.EventType
	; *ast.SelectorExpr @ 105:6 is t10
	t11 = t10 == 0:github.com/nsf/termbox-go.EventType                 bool
	; *ast.BinaryExpr @ 105:6 is t11
	if t11 goto 2 else 3
2:                                                              if.then P:1 S:2
	; address of var ev github.com/nsf/termbox-go.Event @ 108:9 is t6
	t12 = &t6.Key [#2]                       *github.com/nsf/termbox-go.Key
	; address of field Key github.com/nsf/termbox-go.Key @ 108:12 is t12
	t13 = *t12                                github.com/nsf/termbox-go.Key
	; *ast.SelectorExpr @ 108:9 is t13
	t14 = t13 == 65517:github.com/nsf/termbox-go.Key                   bool
	; *ast.BinaryExpr @ 108:9 is t14
	if t14 goto 8 else 7
3:                                                             if.done P:10 S:2
	t15 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 134:6 is t15
	t16 = &t15.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 134:8 is t16
	t17 = *t16                                                       *state
	; *ast.SelectorExpr @ 134:6 is t17
	t18 = &t17.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 134:14 is t18
	t19 = *t18                                                     gameStat
	; *ast.SelectorExpr @ 134:6 is t19
	t20 = t19 == 8:gameStat                                            bool
	; *ast.BinaryExpr @ 134:6 is t20
	if t20 goto 30 else 31
4:                                                          switch.body P:1 S:1
	t21 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 109:5 is t21
	t22 = &t21.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 109:7 is t22
	t23 = *t22                                                       *state
	; *ast.SelectorExpr @ 109:5 is t23
	t24 = &t23.direction [#2]                                          *dir
	; address of field direction github.com/JoergReinhardt/worm.dir @ 109:13 is t24
	*t24 = 0:dir
	; field direction github.com/JoergReinhardt/worm.dir @ 109:13 is 0:github.com/JoergReinhardt/worm.dir
	jump 3
5:                                                          switch.body P:1 S:1
	t25 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 111:5 is t25
	t26 = &t25.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 111:7 is t26
	t27 = *t26                                                       *state
	; *ast.SelectorExpr @ 111:5 is t27
	t28 = &t27.direction [#2]                                          *dir
	; address of field direction github.com/JoergReinhardt/worm.dir @ 111:13 is t28
	*t28 = 2:dir
	; field direction github.com/JoergReinhardt/worm.dir @ 111:13 is 2:github.com/JoergReinhardt/worm.dir
	jump 3
6:                                                          switch.next P:1 S:2
	; address of var ev github.com/nsf/termbox-go.Event @ 110:9 is t6
	t29 = &t6.Key [#2]                       *github.com/nsf/termbox-go.Key
	; address of field Key github.com/nsf/termbox-go.Key @ 110:12 is t29
	t30 = *t29                                github.com/nsf/termbox-go.Key
	; *ast.SelectorExpr @ 110:9 is t30
	t31 = t30 == 65516:github.com/nsf/termbox-go.Key                   bool
	; *ast.BinaryExpr @ 110:9 is t31
	if t31 goto 12 else 11
7:                                                            binop.rhs P:1 S:1
	; address of var ev github.com/nsf/termbox-go.Event @ 108:41 is t6
	t32 = &t6.Ch [#3]                                                 *rune
	; address of field Ch rune @ 108:44 is t32
	t33 = *t32                                                         rune
	; *ast.SelectorExpr @ 108:41 is t33
	t34 = t33 == 107:rune                                              bool
	; *ast.BinaryExpr @ 108:41 is t34
	jump 8
8:                                                           binop.done P:2 S:2
	t35 = phi [2: true:bool, 7: t34] #||                               bool
	; *ast.BinaryExpr @ 108:9 is t35
	if t35 goto 4 else 6
9:                                                          switch.body P:1 S:1
	t36 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 113:5 is t36
	t37 = &t36.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 113:7 is t37
	t38 = *t37                                                       *state
	; *ast.SelectorExpr @ 113:5 is t38
	t39 = &t38.direction [#2]                                          *dir
	; address of field direction github.com/JoergReinhardt/worm.dir @ 113:13 is t39
	*t39 = 4:dir
	; field direction github.com/JoergReinhardt/worm.dir @ 113:13 is 4:github.com/JoergReinhardt/worm.dir
	jump 3
10:                                                         switch.next P:1 S:2
	; address of var ev github.com/nsf/termbox-go.Event @ 112:9 is t6
	t40 = &t6.Key [#2]                       *github.com/nsf/termbox-go.Key
	; address of field Key github.com/nsf/termbox-go.Key @ 112:12 is t40
	t41 = *t40                                github.com/nsf/termbox-go.Key
	; *ast.SelectorExpr @ 112:9 is t41
	t42 = t41 == 65515:github.com/nsf/termbox-go.Key                   bool
	; *ast.BinaryExpr @ 112:9 is t42
	if t42 goto 16 else 15
11:                                                           binop.rhs P:1 S:1
	; address of var ev github.com/nsf/termbox-go.Event @ 110:43 is t6
	t43 = &t6.Ch [#3]                                                 *rune
	; address of field Ch rune @ 110:46 is t43
	t44 = *t43                                                         rune
	; *ast.SelectorExpr @ 110:43 is t44
	t45 = t44 == 106:rune                                              bool
	; *ast.BinaryExpr @ 110:43 is t45
	jump 12
12:                                                          binop.done P:2 S:2
	t46 = phi [6: true:bool, 11: t45] #||                              bool
	; *ast.BinaryExpr @ 110:9 is t46
	if t46 goto 5 else 10
13:                                                         switch.body P:1 S:1
	t47 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 115:5 is t47
	t48 = &t47.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 115:7 is t48
	t49 = *t48                                                       *state
	; *ast.SelectorExpr @ 115:5 is t49
	t50 = &t49.direction [#2]                                          *dir
	; address of field direction github.com/JoergReinhardt/worm.dir @ 115:13 is t50
	*t50 = 8:dir
	; field direction github.com/JoergReinhardt/worm.dir @ 115:13 is 8:github.com/JoergReinhardt/worm.dir
	jump 3
14:                                                         switch.next P:1 S:2
	; address of var ev github.com/nsf/termbox-go.Event @ 114:9 is t6
	t51 = &t6.Key [#2]                       *github.com/nsf/termbox-go.Key
	; address of field Key github.com/nsf/termbox-go.Key @ 114:12 is t51
	t52 = *t51                                github.com/nsf/termbox-go.Key
	; *ast.SelectorExpr @ 114:9 is t52
	t53 = t52 == 65514:github.com/nsf/termbox-go.Key                   bool
	; *ast.BinaryExpr @ 114:9 is t53
	if t53 goto 20 else 19
15:                                                           binop.rhs P:1 S:1
	; address of var ev github.com/nsf/termbox-go.Event @ 112:43 is t6
	t54 = &t6.Ch [#3]                                                 *rune
	; address of field Ch rune @ 112:46 is t54
	t55 = *t54                                                         rune
	; *ast.SelectorExpr @ 112:43 is t55
	t56 = t55 == 104:rune                                              bool
	; *ast.BinaryExpr @ 112:43 is t56
	jump 16
16:                                                          binop.done P:2 S:2
	t57 = phi [10: true:bool, 15: t56] #||                             bool
	; *ast.BinaryExpr @ 112:9 is t57
	if t57 goto 9 else 14
17:                                                         switch.body P:1 S:2
	t58 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 119:8 is t58
	t59 = &t58.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 119:10 is t59
	t60 = *t59                                                       *state
	; *ast.SelectorExpr @ 119:8 is t60
	t61 = &t60.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 119:16 is t61
	t62 = *t61                                                     gameStat
	; *ast.SelectorExpr @ 119:8 is t62
	t63 = t62 == 0:gameStat                                            bool
	; *ast.BinaryExpr @ 119:8 is t63
	if t63 goto 23 else 3
18:                                                         switch.next P:1 S:2
	; address of var ev github.com/nsf/termbox-go.Event @ 116:9 is t6
	t64 = &t6.Ch [#3]                                                 *rune
	; address of field Ch rune @ 116:12 is t64
	t65 = *t64                                                         rune
	; *ast.SelectorExpr @ 116:9 is t65
	t66 = t65 == 115:rune                                              bool
	; *ast.BinaryExpr @ 116:9 is t66
	if t66 goto 17 else 22
19:                                                           binop.rhs P:1 S:1
	; address of var ev github.com/nsf/termbox-go.Event @ 114:44 is t6
	t67 = &t6.Ch [#3]                                                 *rune
	; address of field Ch rune @ 114:47 is t67
	t68 = *t67                                                         rune
	; *ast.SelectorExpr @ 114:44 is t68
	t69 = t68 == 108:rune                                              bool
	; *ast.BinaryExpr @ 114:44 is t69
	jump 20
20:                                                          binop.done P:2 S:2
	t70 = phi [14: true:bool, 19: t69] #||                             bool
	; *ast.BinaryExpr @ 114:9 is t70
	if t70 goto 13 else 18
21:                                                         switch.body P:1 S:2
	t71 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 124:8 is t71
	t72 = &t71.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 124:10 is t72
	t73 = *t72                                                       *state
	; *ast.SelectorExpr @ 124:8 is t73
	t74 = &t73.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 124:16 is t74
	t75 = *t74                                                     gameStat
	; *ast.SelectorExpr @ 124:8 is t75
	t76 = t75 == 4:gameStat                                            bool
	; *ast.BinaryExpr @ 124:8 is t76
	if t76 goto 26 else 27
22:                                                         switch.next P:1 S:2
	; address of var ev github.com/nsf/termbox-go.Event @ 122:9 is t6
	t77 = &t6.Ch [#3]                                                 *rune
	; address of field Ch rune @ 122:12 is t77
	t78 = *t77                                                         rune
	; *ast.SelectorExpr @ 122:9 is t78
	t79 = t78 == 112:rune                                              bool
	; *ast.BinaryExpr @ 122:9 is t79
	if t79 goto 21 else 25
23:                                                             if.then P:1 S:1
	t80 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 120:8 is t80
	t81 = &t80.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 120:10 is t81
	t82 = *t81                                                       *state
	; *ast.SelectorExpr @ 120:8 is t82
	; address of *ast.StarExpr @ 120:7 is t82
	t83 = &t82.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 120:17 is t83
	*t83 = 2:gameStat
	; field eventState github.com/JoergReinhardt/worm.gameStat @ 120:17 is 2:github.com/JoergReinhardt/worm.gameStat
	jump 3
24:                                                         switch.body P:1 S:0
	rundefers
	return
25:                                                         switch.next P:1 S:2
	; address of var ev github.com/nsf/termbox-go.Event @ 129:9 is t6
	t84 = &t6.Key [#2]                       *github.com/nsf/termbox-go.Key
	; address of field Key github.com/nsf/termbox-go.Key @ 129:12 is t84
	t85 = *t84                                github.com/nsf/termbox-go.Key
	; *ast.SelectorExpr @ 129:9 is t85
	t86 = t85 == 27:github.com/nsf/termbox-go.Key                      bool
	; *ast.BinaryExpr @ 129:9 is t86
	if t86 goto 29 else 28
26:                                                             if.then P:1 S:1
	t87 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 125:8 is t87
	t88 = &t87.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 125:10 is t88
	t89 = *t88                                                       *state
	; *ast.SelectorExpr @ 125:8 is t89
	; address of *ast.StarExpr @ 125:7 is t89
	t90 = &t89.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 125:17 is t90
	*t90 = 2:gameStat
	; field eventState github.com/JoergReinhardt/worm.gameStat @ 125:17 is 2:github.com/JoergReinhardt/worm.gameStat
	jump 3
27:                                                             if.else P:1 S:1
	t91 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 127:8 is t91
	t92 = &t91.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 127:10 is t92
	t93 = *t92                                                       *state
	; *ast.SelectorExpr @ 127:8 is t93
	; address of *ast.StarExpr @ 127:7 is t93
	t94 = &t93.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 127:17 is t94
	*t94 = 4:gameStat
	; field eventState github.com/JoergReinhardt/worm.gameStat @ 127:17 is 4:github.com/JoergReinhardt/worm.gameStat
	jump 3
28:                                                           binop.rhs P:1 S:1
	; address of var ev github.com/nsf/termbox-go.Event @ 129:37 is t6
	t95 = &t6.Ch [#3]                                                 *rune
	; address of field Ch rune @ 129:40 is t95
	t96 = *t95                                                         rune
	; *ast.SelectorExpr @ 129:37 is t96
	t97 = t96 == 113:rune                                              bool
	; *ast.BinaryExpr @ 129:37 is t97
	jump 29
29:                                                          binop.done P:2 S:2
	t98 = phi [25: true:bool, 28: t97] #||                             bool
	; *ast.BinaryExpr @ 129:9 is t98
	if t98 goto 24 else 3
30:                                                             if.then P:1 S:1
	t99 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 135:6 is t99
	; address of *ast.StarExpr @ 135:5 is t99
	t100 = (*game).reset(t99)                                            ()
	; *ast.CallExpr @ 135:4 is t100
	t101 = *t0                                                        *game
	; var g *github.com/JoergReinhardt/worm.game @ 136:6 is t101
	t102 = &t101.state [#0]                                         **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 136:8 is t102
	t103 = *t102                                                     *state
	; *ast.SelectorExpr @ 136:6 is t103
	; address of *ast.StarExpr @ 136:5 is t103
	t104 = &t103.eventState [#1]                                  *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 136:15 is t104
	*t104 = 0:gameStat
	; field eventState github.com/JoergReinhardt/worm.gameStat @ 136:15 is 0:github.com/JoergReinhardt/worm.gameStat
	jump 31
31:                                                             if.done P:2 S:1
	; func github.com/JoergReinhardt/worm.render(g *github.com/JoergReinhardt/worm.game) @ 140:3 is render
	t105 = *t0                                                        *game
	; var g *github.com/JoergReinhardt/worm.game @ 140:10 is t105
	t106 = render(t105)                                                  ()
	; *ast.CallExpr @ 140:3 is t106
	; func time.Sleep(d time.Duration) @ 143:8 is Sleep
	; *ast.SelectorExpr @ 143:3 is Sleep
	t107 = time.Sleep(10000000:time.Duration)                            ()
	; *ast.CallExpr @ 143:3 is t107
	jump 1

# Name: github.com/JoergReinhardt/worm.newDigits
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:10:6
# Locals:
#   0:	t0 []string
func newDigits() digits:
0:                                                                entry P:0 S:0
	t0 = local []string (dig)                                     *[]string
	; address of var dig []string @ 11:6 is t0
	t1 = *t0                                                       []string
	; var dig []string @ 13:15 is t1
	t2 = new [1]string (varargs)                                 *[1]string
	t3 = &t2[0:int]                                                 *string
	*t3 = "┏━┓":string
	t4 = slice t2[:]                                               []string
	t5 = append(t1, t4...)                                         []string
	; *ast.CallExpr @ 13:8 is t5
	*t0 = t5
	; var dig []string @ 13:2 is t5
	t6 = *t0                                                       []string
	; var dig []string @ 14:15 is t6
	t7 = new [1]string (varargs)                                 *[1]string
	t8 = &t7[0:int]                                                 *string
	*t8 = "┃┃┃":string
	t9 = slice t7[:]                                               []string
	t10 = append(t6, t9...)                                        []string
	; *ast.CallExpr @ 14:8 is t10
	*t0 = t10
	; var dig []string @ 14:2 is t10
	t11 = *t0                                                      []string
	; var dig []string @ 15:15 is t11
	t12 = new [1]string (varargs)                                *[1]string
	t13 = &t12[0:int]                                               *string
	*t13 = "┗━┛":string
	t14 = slice t12[:]                                             []string
	t15 = append(t11, t14...)                                      []string
	; *ast.CallExpr @ 15:8 is t15
	*t0 = t15
	; var dig []string @ 15:2 is t15
	t16 = *t0                                                      []string
	; var dig []string @ 16:15 is t16
	t17 = new [1]string (varargs)                                *[1]string
	t18 = &t17[0:int]                                               *string
	*t18 = "╺┓ ":string
	t19 = slice t17[:]                                             []string
	t20 = append(t16, t19...)                                      []string
	; *ast.CallExpr @ 16:8 is t20
	*t0 = t20
	; var dig []string @ 16:2 is t20
	t21 = *t0                                                      []string
	; var dig []string @ 17:15 is t21
	t22 = new [1]string (varargs)                                *[1]string
	t23 = &t22[0:int]                                               *string
	*t23 = " ┃ ":string
	t24 = slice t22[:]                                             []string
	t25 = append(t21, t24...)                                      []string
	; *ast.CallExpr @ 17:8 is t25
	*t0 = t25
	; var dig []string @ 17:2 is t25
	t26 = *t0                                                      []string
	; var dig []string @ 18:15 is t26
	t27 = new [1]string (varargs)                                *[1]string
	t28 = &t27[0:int]                                               *string
	*t28 = "╺┻╸":string
	t29 = slice t27[:]                                             []string
	t30 = append(t26, t29...)                                      []string
	; *ast.CallExpr @ 18:8 is t30
	*t0 = t30
	; var dig []string @ 18:2 is t30
	t31 = *t0                                                      []string
	; var dig []string @ 19:15 is t31
	t32 = new [1]string (varargs)                                *[1]string
	t33 = &t32[0:int]                                               *string
	*t33 = "┏━┓":string
	t34 = slice t32[:]                                             []string
	t35 = append(t31, t34...)                                      []string
	; *ast.CallExpr @ 19:8 is t35
	*t0 = t35
	; var dig []string @ 19:2 is t35
	t36 = *t0                                                      []string
	; var dig []string @ 20:15 is t36
	t37 = new [1]string (varargs)                                *[1]string
	t38 = &t37[0:int]                                               *string
	*t38 = "┏━┛":string
	t39 = slice t37[:]                                             []string
	t40 = append(t36, t39...)                                      []string
	; *ast.CallExpr @ 20:8 is t40
	*t0 = t40
	; var dig []string @ 20:2 is t40
	t41 = *t0                                                      []string
	; var dig []string @ 21:15 is t41
	t42 = new [1]string (varargs)                                *[1]string
	t43 = &t42[0:int]                                               *string
	*t43 = "┗━╸":string
	t44 = slice t42[:]                                             []string
	t45 = append(t41, t44...)                                      []string
	; *ast.CallExpr @ 21:8 is t45
	*t0 = t45
	; var dig []string @ 21:2 is t45
	t46 = *t0                                                      []string
	; var dig []string @ 22:15 is t46
	t47 = new [1]string (varargs)                                *[1]string
	t48 = &t47[0:int]                                               *string
	*t48 = "┏━┓":string
	t49 = slice t47[:]                                             []string
	t50 = append(t46, t49...)                                      []string
	; *ast.CallExpr @ 22:8 is t50
	*t0 = t50
	; var dig []string @ 22:2 is t50
	t51 = *t0                                                      []string
	; var dig []string @ 23:15 is t51
	t52 = new [1]string (varargs)                                *[1]string
	t53 = &t52[0:int]                                               *string
	*t53 = "╺━┫":string
	t54 = slice t52[:]                                             []string
	t55 = append(t51, t54...)                                      []string
	; *ast.CallExpr @ 23:8 is t55
	*t0 = t55
	; var dig []string @ 23:2 is t55
	t56 = *t0                                                      []string
	; var dig []string @ 24:15 is t56
	t57 = new [1]string (varargs)                                *[1]string
	t58 = &t57[0:int]                                               *string
	*t58 = "┗━┛":string
	t59 = slice t57[:]                                             []string
	t60 = append(t56, t59...)                                      []string
	; *ast.CallExpr @ 24:8 is t60
	*t0 = t60
	; var dig []string @ 24:2 is t60
	t61 = *t0                                                      []string
	; var dig []string @ 25:15 is t61
	t62 = new [1]string (varargs)                                *[1]string
	t63 = &t62[0:int]                                               *string
	*t63 = "╻ ╻":string
	t64 = slice t62[:]                                             []string
	t65 = append(t61, t64...)                                      []string
	; *ast.CallExpr @ 25:8 is t65
	*t0 = t65
	; var dig []string @ 25:2 is t65
	t66 = *t0                                                      []string
	; var dig []string @ 26:15 is t66
	t67 = new [1]string (varargs)                                *[1]string
	t68 = &t67[0:int]                                               *string
	*t68 = "┗━┫":string
	t69 = slice t67[:]                                             []string
	t70 = append(t66, t69...)                                      []string
	; *ast.CallExpr @ 26:8 is t70
	*t0 = t70
	; var dig []string @ 26:2 is t70
	t71 = *t0                                                      []string
	; var dig []string @ 27:15 is t71
	t72 = new [1]string (varargs)                                *[1]string
	t73 = &t72[0:int]                                               *string
	*t73 = "  ╹":string
	t74 = slice t72[:]                                             []string
	t75 = append(t71, t74...)                                      []string
	; *ast.CallExpr @ 27:8 is t75
	*t0 = t75
	; var dig []string @ 27:2 is t75
	t76 = *t0                                                      []string
	; var dig []string @ 28:15 is t76
	t77 = new [1]string (varargs)                                *[1]string
	t78 = &t77[0:int]                                               *string
	*t78 = "┏━╸":string
	t79 = slice t77[:]                                             []string
	t80 = append(t76, t79...)                                      []string
	; *ast.CallExpr @ 28:8 is t80
	*t0 = t80
	; var dig []string @ 28:2 is t80
	t81 = *t0                                                      []string
	; var dig []string @ 29:15 is t81
	t82 = new [1]string (varargs)                                *[1]string
	t83 = &t82[0:int]                                               *string
	*t83 = "┗━┓":string
	t84 = slice t82[:]                                             []string
	t85 = append(t81, t84...)                                      []string
	; *ast.CallExpr @ 29:8 is t85
	*t0 = t85
	; var dig []string @ 29:2 is t85
	t86 = *t0                                                      []string
	; var dig []string @ 30:15 is t86
	t87 = new [1]string (varargs)                                *[1]string
	t88 = &t87[0:int]                                               *string
	*t88 = "┗━┛":string
	t89 = slice t87[:]                                             []string
	t90 = append(t86, t89...)                                      []string
	; *ast.CallExpr @ 30:8 is t90
	*t0 = t90
	; var dig []string @ 30:2 is t90
	t91 = *t0                                                      []string
	; var dig []string @ 31:15 is t91
	t92 = new [1]string (varargs)                                *[1]string
	t93 = &t92[0:int]                                               *string
	*t93 = "┏━┓":string
	t94 = slice t92[:]                                             []string
	t95 = append(t91, t94...)                                      []string
	; *ast.CallExpr @ 31:8 is t95
	*t0 = t95
	; var dig []string @ 31:2 is t95
	t96 = *t0                                                      []string
	; var dig []string @ 32:15 is t96
	t97 = new [1]string (varargs)                                *[1]string
	t98 = &t97[0:int]                                               *string
	*t98 = "┣━┓":string
	t99 = slice t97[:]                                             []string
	t100 = append(t96, t99...)                                     []string
	; *ast.CallExpr @ 32:8 is t100
	*t0 = t100
	; var dig []string @ 32:2 is t100
	t101 = *t0                                                     []string
	; var dig []string @ 33:15 is t101
	t102 = new [1]string (varargs)                               *[1]string
	t103 = &t102[0:int]                                             *string
	*t103 = "┗━┛":string
	t104 = slice t102[:]                                           []string
	t105 = append(t101, t104...)                                   []string
	; *ast.CallExpr @ 33:8 is t105
	*t0 = t105
	; var dig []string @ 33:2 is t105
	t106 = *t0                                                     []string
	; var dig []string @ 34:15 is t106
	t107 = new [1]string (varargs)                               *[1]string
	t108 = &t107[0:int]                                             *string
	*t108 = "┏━┓":string
	t109 = slice t107[:]                                           []string
	t110 = append(t106, t109...)                                   []string
	; *ast.CallExpr @ 34:8 is t110
	*t0 = t110
	; var dig []string @ 34:2 is t110
	t111 = *t0                                                     []string
	; var dig []string @ 35:15 is t111
	t112 = new [1]string (varargs)                               *[1]string
	t113 = &t112[0:int]                                             *string
	*t113 = "  ┃":string
	t114 = slice t112[:]                                           []string
	t115 = append(t111, t114...)                                   []string
	; *ast.CallExpr @ 35:8 is t115
	*t0 = t115
	; var dig []string @ 35:2 is t115
	t116 = *t0                                                     []string
	; var dig []string @ 36:15 is t116
	t117 = new [1]string (varargs)                               *[1]string
	t118 = &t117[0:int]                                             *string
	*t118 = "  ╹":string
	t119 = slice t117[:]                                           []string
	t120 = append(t116, t119...)                                   []string
	; *ast.CallExpr @ 36:8 is t120
	*t0 = t120
	; var dig []string @ 36:2 is t120
	t121 = *t0                                                     []string
	; var dig []string @ 37:15 is t121
	t122 = new [1]string (varargs)                               *[1]string
	t123 = &t122[0:int]                                             *string
	*t123 = "┏━┓":string
	t124 = slice t122[:]                                           []string
	t125 = append(t121, t124...)                                   []string
	; *ast.CallExpr @ 37:8 is t125
	*t0 = t125
	; var dig []string @ 37:2 is t125
	t126 = *t0                                                     []string
	; var dig []string @ 38:15 is t126
	t127 = new [1]string (varargs)                               *[1]string
	t128 = &t127[0:int]                                             *string
	*t128 = "┣━┫":string
	t129 = slice t127[:]                                           []string
	t130 = append(t126, t129...)                                   []string
	; *ast.CallExpr @ 38:8 is t130
	*t0 = t130
	; var dig []string @ 38:2 is t130
	t131 = *t0                                                     []string
	; var dig []string @ 39:15 is t131
	t132 = new [1]string (varargs)                               *[1]string
	t133 = &t132[0:int]                                             *string
	*t133 = "┗━┛":string
	t134 = slice t132[:]                                           []string
	t135 = append(t131, t134...)                                   []string
	; *ast.CallExpr @ 39:8 is t135
	*t0 = t135
	; var dig []string @ 39:2 is t135
	t136 = *t0                                                     []string
	; var dig []string @ 40:15 is t136
	t137 = new [1]string (varargs)                               *[1]string
	t138 = &t137[0:int]                                             *string
	*t138 = "┏━┓":string
	t139 = slice t137[:]                                           []string
	t140 = append(t136, t139...)                                   []string
	; *ast.CallExpr @ 40:8 is t140
	*t0 = t140
	; var dig []string @ 40:2 is t140
	t141 = *t0                                                     []string
	; var dig []string @ 41:15 is t141
	t142 = new [1]string (varargs)                               *[1]string
	t143 = &t142[0:int]                                             *string
	*t143 = "┗━┫":string
	t144 = slice t142[:]                                           []string
	t145 = append(t141, t144...)                                   []string
	; *ast.CallExpr @ 41:8 is t145
	*t0 = t145
	; var dig []string @ 41:2 is t145
	t146 = *t0                                                     []string
	; var dig []string @ 42:15 is t146
	t147 = new [1]string (varargs)                               *[1]string
	t148 = &t147[0:int]                                             *string
	*t148 = "┗━┛":string
	t149 = slice t147[:]                                           []string
	t150 = append(t146, t149...)                                   []string
	; *ast.CallExpr @ 42:8 is t150
	*t0 = t150
	; var dig []string @ 42:2 is t150
	t151 = *t0                                                     []string
	; var dig []string @ 44:9 is t151
	t152 = changetype digits <- []string (t151)                      digits
	rundefers
	return t152

# Name: (*github.com/JoergReinhardt/worm.ring).stringRow
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:57:16
# Locals:
#   0:	t0 *ring
func (r *ring) stringRow() string:
0:                                                                entry P:0 S:0
	t0 = local *ring (r)                                             **ring
	*t0 = r
	t1 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 57:44 is t1
	t2 = &t1.sector [#0]                                           **sector
	t3 = *t2                                                        *sector
	t4 = &t3.str [#1]                                               *string
	; address of field str string @ 57:46 is t4
	t5 = *t4                                                         string
	; *ast.SelectorExpr @ 57:44 is t5
	rundefers
	return t5

# Name: (*github.com/JoergReinhardt/worm.ring).stringDig
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:58:16
# Locals:
#   0:	t0 *ring
#   1:	t1 string
func (r *ring) stringDig() string:
0:                                                                entry P:0 S:0
	t0 = local *ring (r)                                             **ring
	*t0 = r
	t1 = local string (ret)                                         *string
	t2 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 59:9 is t2
	t3 = &t2.sector [#0]                                           **sector
	t4 = *t3                                                        *sector
	t5 = &t4.prev [#2]                                             **sector
	; address of field prev *github.com/JoergReinhardt/worm.sector @ 59:11 is t5
	t6 = *t5                                                        *sector
	; *ast.SelectorExpr @ 59:9 is t6
	t7 = &t6.prev [#2]                                             **sector
	; address of field prev *github.com/JoergReinhardt/worm.sector @ 59:16 is t7
	t8 = *t7                                                        *sector
	; *ast.SelectorExpr @ 59:9 is t8
	t9 = &t8.str [#1]                                               *string
	; address of field str string @ 59:21 is t9
	t10 = *t9                                                        string
	; *ast.SelectorExpr @ 59:9 is t10
	t11 = t10 + "\n":string                                          string
	; *ast.BinaryExpr @ 59:9 is t11
	*t1 = t11
	; var ret string @ 59:2 is t11
	t12 = *t1                                                        string
	; var ret string @ 60:8 is t12
	t13 = *t0                                                         *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 60:14 is t13
	t14 = &t13.sector [#0]                                         **sector
	t15 = *t14                                                      *sector
	t16 = &t15.prev [#2]                                           **sector
	; address of field prev *github.com/JoergReinhardt/worm.sector @ 60:16 is t16
	t17 = *t16                                                      *sector
	; *ast.SelectorExpr @ 60:14 is t17
	t18 = &t17.str [#1]                                             *string
	; address of field str string @ 60:21 is t18
	t19 = *t18                                                       string
	; *ast.SelectorExpr @ 60:14 is t19
	t20 = t12 + t19                                                  string
	; *ast.BinaryExpr @ 60:8 is t20
	t21 = t20 + "\n":string                                          string
	; *ast.BinaryExpr @ 60:8 is t21
	*t1 = t21
	; var ret string @ 60:2 is t21
	t22 = *t1                                                        string
	; var ret string @ 61:8 is t22
	t23 = *t0                                                         *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 61:14 is t23
	t24 = &t23.sector [#0]                                         **sector
	t25 = *t24                                                      *sector
	t26 = &t25.str [#1]                                             *string
	; address of field str string @ 61:16 is t26
	t27 = *t26                                                       string
	; *ast.SelectorExpr @ 61:14 is t27
	t28 = t22 + t27                                                  string
	; *ast.BinaryExpr @ 61:8 is t28
	t29 = t28 + "\n":string                                          string
	; *ast.BinaryExpr @ 61:8 is t29
	*t1 = t29
	; var ret string @ 61:2 is t29
	t30 = *t1                                                        string
	; var ret string @ 62:9 is t30
	rundefers
	return t30

# Name: (*github.com/JoergReinhardt/worm.ring).advanceRow
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:64:16
# Locals:
#   0:	t0 *ring
func (r *ring) advanceRow():
0:                                                                entry P:0 S:0
	t0 = local *ring (r)                                             **ring
	*t0 = r
	t1 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 65:4 is t1
	; address of *ast.StarExpr @ 65:3 is t1
	t2 = &t1.sector [#0]                                           **sector
	; address of field sector *github.com/JoergReinhardt/worm.sector @ 65:7 is t2
	t3 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 65:18 is t3
	t4 = *t3                                                           ring
	; *ast.StarExpr @ 65:17 is t4
	t5 = t4.sector [#0]                                             *sector
	t6 = &t5.next [#3]                                             **sector
	; address of field next *github.com/JoergReinhardt/worm.sector @ 65:21 is t6
	t7 = *t6                                                        *sector
	; *ast.SelectorExpr @ 65:16 is t7
	*t2 = t7
	; field sector *github.com/JoergReinhardt/worm.sector @ 65:7 is t7
	rundefers
	return

# Name: (*github.com/JoergReinhardt/worm.ring).backupRow
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:67:16
# Locals:
#   0:	t0 *ring
func (r *ring) backupRow():
0:                                                                entry P:0 S:0
	t0 = local *ring (r)                                             **ring
	*t0 = r
	t1 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 68:4 is t1
	; address of *ast.StarExpr @ 68:3 is t1
	t2 = &t1.sector [#0]                                           **sector
	; address of field sector *github.com/JoergReinhardt/worm.sector @ 68:7 is t2
	t3 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 68:18 is t3
	t4 = *t3                                                           ring
	; *ast.StarExpr @ 68:17 is t4
	t5 = t4.sector [#0]                                             *sector
	t6 = &t5.prev [#2]                                             **sector
	; address of field prev *github.com/JoergReinhardt/worm.sector @ 68:21 is t6
	t7 = *t6                                                        *sector
	; *ast.SelectorExpr @ 68:16 is t7
	*t2 = t7
	; field sector *github.com/JoergReinhardt/worm.sector @ 68:7 is t7
	rundefers
	return

# Name: (*github.com/JoergReinhardt/worm.ring).incDigit
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:70:16
# Locals:
#   0:	t0 *ring
#   1:	t1 int
func (r *ring) incDigit():
0:                                                                entry P:0 S:1
	t0 = local *ring (r)                                             **ring
	*t0 = r
	t1 = local int (i)                                                 *int
	*t1 = 0:int
	; var i int @ 71:6 is 0:int
	jump 3
1:                                                             for.body P:1 S:1
	t2 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 72:5 is t2
	; address of *ast.StarExpr @ 72:4 is t2
	t3 = (*ring).advanceRow(t2)                                          ()
	; *ast.CallExpr @ 72:3 is t3
	t4 = *t1                                                            int
	t5 = t4 + 1:int                                                     int
	*t1 = t5
	; var i int @ 71:21 is t5
	jump 3
2:                                                             for.done P:1 S:0
	rundefers
	return
3:                                                             for.loop P:2 S:2
	t6 = *t1                                                            int
	; var i int @ 71:14 is t6
	t7 = t6 < 3:int                                                    bool
	; *ast.BinaryExpr @ 71:14 is t7
	if t7 goto 1 else 2

# Name: (*github.com/JoergReinhardt/worm.ring).decDigit
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:75:16
# Locals:
#   0:	t0 *ring
#   1:	t1 int
func (r *ring) decDigit():
0:                                                                entry P:0 S:1
	t0 = local *ring (r)                                             **ring
	*t0 = r
	t1 = local int (i)                                                 *int
	*t1 = 0:int
	; var i int @ 76:6 is 0:int
	jump 3
1:                                                             for.body P:1 S:1
	t2 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 77:5 is t2
	; address of *ast.StarExpr @ 77:4 is t2
	t3 = (*ring).backupRow(t2)                                           ()
	; *ast.CallExpr @ 77:3 is t3
	t4 = *t1                                                            int
	t5 = t4 + 1:int                                                     int
	*t1 = t5
	; var i int @ 76:21 is t5
	jump 3
2:                                                             for.done P:1 S:0
	rundefers
	return
3:                                                             for.loop P:2 S:2
	t6 = *t1                                                            int
	; var i int @ 76:14 is t6
	t7 = t6 < 3:int                                                    bool
	; *ast.BinaryExpr @ 76:14 is t7
	if t7 goto 1 else 2

# Name: (*github.com/JoergReinhardt/worm.ring).nextDigitDelayed
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:80:16
# Locals:
#   0:	t0 *ring
#   1:	t1 int
func (r *ring) nextDigitDelayed():
0:                                                                entry P:0 S:1
	t0 = local *ring (r)                                             **ring
	*t0 = r
	t1 = local int (i)                                                 *int
	*t1 = 0:int
	; var i int @ 81:6 is 0:int
	jump 3
1:                                                             for.body P:1 S:1
	t2 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 82:5 is t2
	; address of *ast.StarExpr @ 82:4 is t2
	t3 = (*ring).advanceRow(t2)                                          ()
	; *ast.CallExpr @ 82:3 is t3
	; func time.Sleep(d time.Duration) @ 83:8 is Sleep
	; *ast.SelectorExpr @ 83:3 is Sleep
	t4 = time.Sleep(100000000:time.Duration)                             ()
	; *ast.CallExpr @ 83:3 is t4
	t5 = *t1                                                            int
	t6 = t5 + 1:int                                                     int
	*t1 = t6
	; var i int @ 81:21 is t6
	jump 3
2:                                                             for.done P:1 S:0
	rundefers
	return
3:                                                             for.loop P:2 S:2
	t7 = *t1                                                            int
	; var i int @ 81:14 is t7
	t8 = t7 < 3:int                                                    bool
	; *ast.BinaryExpr @ 81:14 is t8
	if t8 goto 1 else 2

# Name: (*github.com/JoergReinhardt/worm.ring).prevDigitDelayed
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:86:16
# Locals:
#   0:	t0 *ring
#   1:	t1 int
func (r *ring) prevDigitDelayed():
0:                                                                entry P:0 S:1
	t0 = local *ring (r)                                             **ring
	*t0 = r
	t1 = local int (i)                                                 *int
	*t1 = 0:int
	; var i int @ 87:6 is 0:int
	jump 3
1:                                                             for.body P:1 S:1
	t2 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 88:5 is t2
	; address of *ast.StarExpr @ 88:4 is t2
	t3 = (*ring).backupRow(t2)                                           ()
	; *ast.CallExpr @ 88:3 is t3
	; func time.Sleep(d time.Duration) @ 89:8 is Sleep
	; *ast.SelectorExpr @ 89:3 is Sleep
	t4 = time.Sleep(100000000:time.Duration)                             ()
	; *ast.CallExpr @ 89:3 is t4
	t5 = *t1                                                            int
	t6 = t5 + 1:int                                                     int
	*t1 = t6
	; var i int @ 87:21 is t6
	jump 3
2:                                                             for.done P:1 S:0
	rundefers
	return
3:                                                             for.loop P:2 S:2
	t7 = *t1                                                            int
	; var i int @ 87:14 is t7
	t8 = t7 < 3:int                                                    bool
	; *ast.BinaryExpr @ 87:14 is t8
	if t8 goto 1 else 2

# Name: github.com/JoergReinhardt/worm.newRing
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:94:6
# Locals:
#   0:	t0 digits
#   1:	t2 *ring
#   2:	t11 *sector
#   3:	t15 int
#   4:	t16 int
#   5:	t18 *sector
func newRing() *ring:
0:                                                                entry P:0 S:1
	t0 = local digits (d)                                           *digits
	; func github.com/JoergReinhardt/worm.newDigits() github.com/JoergReinhardt/worm.digits @ 95:7 is newDigits
	t1 = newDigits()                                                 digits
	; *ast.CallExpr @ 95:7 is t1
	*t0 = t1
	; var d github.com/JoergReinhardt/worm.digits @ 95:2 is t1
	t2 = local *ring (r)                                             **ring
	t3 = new ring (complit)                                           *ring
	t4 = &t3.sector [#0]                                           **sector
	t5 = new sector (complit)                                       *sector
	t6 = &t5.pos [#0]                                                  *int
	t7 = &t5.str [#1]                                               *string
	t8 = *t0                                                         digits
	; var d github.com/JoergReinhardt/worm.digits @ 98:8 is t8
	t9 = &t8[0:int]                                                 *string
	t10 = *t9                                                        string
	; *ast.IndexExpr @ 98:8 is t10
	*t6 = 0:int
	; *ast.BasicLit @ 97:8 is 0:int
	*t7 = t10
	; *ast.IndexExpr @ 98:8 is t10
	; address of *ast.CompositeLit @ 96:14 is t5
	; *ast.UnaryExpr @ 96:13 is t5
	*t4 = t5
	; *ast.UnaryExpr @ 96:13 is t5
	; address of *ast.CompositeLit @ 96:8 is t3
	; *ast.UnaryExpr @ 96:7 is t3
	*t2 = t3
	; var r *github.com/JoergReinhardt/worm.ring @ 96:2 is t3
	t11 = local *sector (pred)                                     **sector
	t12 = *t2                                                         *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 100:10 is t12
	t13 = &t12.sector [#0]                                         **sector
	; address of field sector *github.com/JoergReinhardt/worm.sector @ 100:12 is t13
	t14 = *t13                                                      *sector
	; *ast.SelectorExpr @ 100:10 is t14
	*t11 = t14
	; var pred *github.com/JoergReinhardt/worm.sector @ 100:2 is t14
	t15 = local int (i)                                                *int
	*t15 = 1:int
	; var i int @ 102:6 is 1:int
	jump 3
1:                                                             for.body P:1 S:2
	t16 = local int (i)                                                *int
	t17 = *t15                                                          int
	; var i int @ 103:8 is t17
	*t16 = t17
	; var i int @ 103:3 is t17
	t18 = local *sector (s)                                        **sector
	t19 = new sector (complit)                                      *sector
	t20 = &t19.pos [#0]                                                *int
	t21 = *t16                                                          int
	; var i int @ 106:9 is t21
	t22 = &t19.str [#1]                                             *string
	t23 = *t0                                                        digits
	; var d github.com/JoergReinhardt/worm.digits @ 107:9 is t23
	t24 = *t16                                                          int
	; var i int @ 107:11 is t24
	t25 = &t23[t24]                                                 *string
	t26 = *t25                                                       string
	; *ast.IndexExpr @ 107:9 is t26
	t27 = &t19.prev [#2]                                           **sector
	t28 = *t11                                                      *sector
	; var pred *github.com/JoergReinhardt/worm.sector @ 109:10 is t28
	*t20 = t21
	; var i int @ 106:9 is t21
	*t22 = t26
	; *ast.IndexExpr @ 107:9 is t26
	*t27 = t28
	; var pred *github.com/JoergReinhardt/worm.sector @ 109:10 is t28
	; address of *ast.CompositeLit @ 105:9 is t19
	; *ast.UnaryExpr @ 105:8 is t19
	*t18 = t19
	; var s *github.com/JoergReinhardt/worm.sector @ 105:3 is t19
	t29 = *t11                                                      *sector
	; var pred *github.com/JoergReinhardt/worm.sector @ 112:5 is t29
	; address of *ast.StarExpr @ 112:4 is t29
	t30 = &t29.next [#3]                                           **sector
	; address of field next *github.com/JoergReinhardt/worm.sector @ 112:11 is t30
	t31 = *t18                                                      *sector
	; var s *github.com/JoergReinhardt/worm.sector @ 112:18 is t31
	*t30 = t31
	; field next *github.com/JoergReinhardt/worm.sector @ 112:11 is t31
	t32 = *t16                                                          int
	; var i int @ 114:6 is t32
	t33 = t32 == 29:int                                                bool
	; *ast.BinaryExpr @ 114:6 is t33
	if t33 goto 4 else 5
2:                                                             for.done P:1 S:0
	t34 = *t2                                                         *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 123:4 is t34
	; address of *ast.StarExpr @ 123:3 is t34
	t35 = (*ring).backupRow(t34)                                         ()
	; *ast.CallExpr @ 123:2 is t35
	t36 = *t2                                                         *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 129:9 is t36
	rundefers
	return t36
3:                                                             for.loop P:2 S:2
	t37 = *t15                                                          int
	; var i int @ 102:14 is t37
	t38 = t37 < 30:int                                                 bool
	; *ast.BinaryExpr @ 102:14 is t38
	if t38 goto 1 else 2
4:                                                              if.then P:1 S:1
	t39 = *t18                                                      *sector
	; var s *github.com/JoergReinhardt/worm.sector @ 115:6 is t39
	; address of *ast.StarExpr @ 115:5 is t39
	t40 = &t39.next [#3]                                           **sector
	; address of field next *github.com/JoergReinhardt/worm.sector @ 115:9 is t40
	t41 = *t2                                                         *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 115:18 is t41
	; address of *ast.StarExpr @ 115:17 is t41
	t42 = &t41.sector [#0]                                         **sector
	; address of field sector *github.com/JoergReinhardt/worm.sector @ 115:21 is t42
	t43 = *t42                                                      *sector
	; *ast.SelectorExpr @ 115:16 is t43
	*t40 = t43
	; field next *github.com/JoergReinhardt/worm.sector @ 115:9 is t43
	t44 = *t2                                                         *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 116:6 is t44
	t45 = &t44.sector [#0]                                         **sector
	; address of field sector *github.com/JoergReinhardt/worm.sector @ 116:8 is t45
	t46 = *t45                                                      *sector
	; *ast.SelectorExpr @ 116:6 is t46
	; address of *ast.StarExpr @ 116:5 is t46
	t47 = &t46.prev [#2]                                           **sector
	; address of field prev *github.com/JoergReinhardt/worm.sector @ 116:16 is t47
	t48 = *t18                                                      *sector
	; var s *github.com/JoergReinhardt/worm.sector @ 116:23 is t48
	*t47 = t48
	; field prev *github.com/JoergReinhardt/worm.sector @ 116:16 is t48
	jump 5
5:                                                              if.done P:2 S:1
	t49 = *t18                                                      *sector
	; var s *github.com/JoergReinhardt/worm.sector @ 120:10 is t49
	*t11 = t49
	; var pred *github.com/JoergReinhardt/worm.sector @ 120:3 is t49
	t50 = *t15                                                          int
	t51 = t50 + 1:int                                                   int
	*t15 = t51
	; var i int @ 102:22 is t51
	jump 3

# Name: (*github.com/JoergReinhardt/worm.digit).stringRows
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:138:17
# Locals:
#   0:	t0 *digit
#   1:	t1 []string
#   2:	t10 []string
#   3:	t16 int
#   4:	t23 int
func (d *digit) stringRows() []string:
0:                                                                entry P:0 S:2
	t0 = local *digit (d)                                           **digit
	*t0 = d
	t1 = local []string (rows)                                    *[]string
	; address of var rows []string @ 139:6 is t1
	t2 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 140:7 is t2
	; address of *ast.StarExpr @ 140:6 is t2
	t3 = &t2.hasNext [#1]                                             *bool
	; address of field hasNext bool @ 140:10 is t3
	t4 = *t3                                                           bool
	; *ast.SelectorExpr @ 140:5 is t4
	if t4 goto 1 else 3
1:                                                              if.then P:1 S:1
	; func strings.Split(s string, sep string) []string @ 141:18 is Split
	; *ast.SelectorExpr @ 141:10 is Split
	t5 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 141:24 is t5
	t6 = &t5.next [#2]                                              **digit
	; address of field next *github.com/JoergReinhardt/worm.digit @ 141:26 is t6
	t7 = *t6                                                         *digit
	; *ast.SelectorExpr @ 141:24 is t7
	t8 = (*digit).String(t7)                                         string
	; *ast.CallExpr @ 141:24 is t8
	t9 = strings.Split(t8, "\n":string)                            []string
	; *ast.CallExpr @ 141:10 is t9
	*t1 = t9
	; var rows []string @ 141:3 is t9
	t10 = local []string (append)                                 *[]string
	; func strings.Split(s string, sep string) []string @ 142:21 is Split
	; *ast.SelectorExpr @ 142:13 is Split
	t11 = *t0                                                        *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 142:29 is t11
	t12 = *t11                                                        digit
	; *ast.StarExpr @ 142:28 is t12
	t13 = t12.ring [#0]                                               *ring
	t14 = (*ring).stringDig(t13)                                     string
	; *ast.CallExpr @ 142:27 is t14
	t15 = strings.Split(t14, "\n":string)                          []string
	; *ast.CallExpr @ 142:13 is t15
	*t10 = t15
	; var append []string @ 142:3 is t15
	t16 = local int (i)                                                *int
	*t16 = 0:int
	; var i int @ 143:7 is 0:int
	jump 5
2:                                                              if.done P:2 S:0
	t17 = *t1                                                      []string
	; var rows []string @ 150:9 is t17
	rundefers
	return t17
3:                                                              if.else P:1 S:1
	; func strings.Split(s string, sep string) []string @ 148:18 is Split
	; *ast.SelectorExpr @ 148:10 is Split
	t18 = *t0                                                        *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 148:24 is t18
	t19 = &t18.ring [#0]                                             **ring
	t20 = *t19                                                        *ring
	t21 = (*ring).stringDig(t20)                                     string
	; *ast.CallExpr @ 148:24 is t21
	t22 = strings.Split(t21, "\n":string)                          []string
	; *ast.CallExpr @ 148:10 is t22
	*t1 = t22
	; var rows []string @ 148:3 is t22
	jump 2
4:                                                             for.body P:1 S:1
	t23 = local int (i)                                                *int
	t24 = *t16                                                          int
	; var i int @ 144:9 is t24
	*t23 = t24
	; var i int @ 144:4 is t24
	t25 = *t1                                                      []string
	; var rows []string @ 145:4 is t25
	t26 = *t23                                                          int
	; var i int @ 145:9 is t26
	t27 = &t25[t26]                                                 *string
	t28 = *t1                                                      []string
	; var rows []string @ 145:14 is t28
	t29 = *t23                                                          int
	; var i int @ 145:19 is t29
	t30 = &t28[t29]                                                 *string
	t31 = *t30                                                       string
	; *ast.IndexExpr @ 145:14 is t31
	t32 = t31 + " ":string                                           string
	; *ast.BinaryExpr @ 145:14 is t32
	t33 = *t10                                                     []string
	; var append []string @ 145:30 is t33
	t34 = *t23                                                          int
	; var i int @ 145:37 is t34
	t35 = &t33[t34]                                                 *string
	t36 = *t35                                                       string
	; *ast.IndexExpr @ 145:30 is t36
	t37 = t32 + t36                                                  string
	; *ast.BinaryExpr @ 145:14 is t37
	t38 = t37 + "\n":string                                          string
	; *ast.BinaryExpr @ 145:14 is t38
	*t27 = t38
	; *ast.IndexExpr @ 145:4 is t38
	t39 = *t16                                                          int
	t40 = t39 + 1:int                                                   int
	*t16 = t40
	; var i int @ 143:22 is t40
	jump 5
5:                                                             for.loop P:2 S:2
	t41 = *t16                                                          int
	; var i int @ 143:15 is t41
	t42 = t41 < 3:int                                                  bool
	; *ast.BinaryExpr @ 143:15 is t42
	if t42 goto 4 else 2

# Name: (*github.com/JoergReinhardt/worm.digit).String
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:152:17
# Locals:
#   0:	t0 *digit
#   1:	t1 []string
#   2:	t2 string
#   3:	t11 []string
#   4:	t17 int
#   5:	t23 int
func (d *digit) String() string:
0:                                                                entry P:0 S:2
	t0 = local *digit (d)                                           **digit
	*t0 = d
	t1 = local []string (rows)                                    *[]string
	; address of var rows []string @ 153:6 is t1
	t2 = local string (str)                                         *string
	; address of var str string @ 154:6 is t2
	t3 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 155:7 is t3
	; address of *ast.StarExpr @ 155:6 is t3
	t4 = &t3.hasNext [#1]                                             *bool
	; address of field hasNext bool @ 155:10 is t4
	t5 = *t4                                                           bool
	; *ast.SelectorExpr @ 155:5 is t5
	if t5 goto 1 else 3
1:                                                              if.then P:1 S:1
	; func strings.Split(s string, sep string) []string @ 156:18 is Split
	; *ast.SelectorExpr @ 156:10 is Split
	t6 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 156:24 is t6
	t7 = &t6.next [#2]                                              **digit
	; address of field next *github.com/JoergReinhardt/worm.digit @ 156:26 is t7
	t8 = *t7                                                         *digit
	; *ast.SelectorExpr @ 156:24 is t8
	t9 = (*digit).String(t8)                                         string
	; *ast.CallExpr @ 156:24 is t9
	t10 = strings.Split(t9, "\n":string)                           []string
	; *ast.CallExpr @ 156:10 is t10
	*t1 = t10
	; var rows []string @ 156:3 is t10
	t11 = local []string (append)                                 *[]string
	; func strings.Split(s string, sep string) []string @ 157:21 is Split
	; *ast.SelectorExpr @ 157:13 is Split
	t12 = *t0                                                        *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 157:29 is t12
	t13 = *t12                                                        digit
	; *ast.StarExpr @ 157:28 is t13
	t14 = t13.ring [#0]                                               *ring
	t15 = (*ring).stringDig(t14)                                     string
	; *ast.CallExpr @ 157:27 is t15
	t16 = strings.Split(t15, "\n":string)                          []string
	; *ast.CallExpr @ 157:13 is t16
	*t11 = t16
	; var append []string @ 157:3 is t16
	t17 = local int (i)                                                *int
	*t17 = 0:int
	; var i int @ 158:7 is 0:int
	jump 5
2:                                                              if.done P:2 S:0
	t18 = *t2                                                        string
	; var str string @ 166:9 is t18
	rundefers
	return t18
3:                                                              if.else P:1 S:1
	t19 = *t0                                                        *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 164:9 is t19
	t20 = &t19.ring [#0]                                             **ring
	t21 = *t20                                                        *ring
	t22 = (*ring).stringDig(t21)                                     string
	; *ast.CallExpr @ 164:9 is t22
	*t2 = t22
	; var str string @ 164:3 is t22
	jump 2
4:                                                             for.body P:1 S:1
	t23 = local int (i)                                                *int
	t24 = *t17                                                          int
	; var i int @ 159:9 is t24
	*t23 = t24
	; var i int @ 159:4 is t24
	t25 = *t1                                                      []string
	; var rows []string @ 160:4 is t25
	t26 = *t23                                                          int
	; var i int @ 160:9 is t26
	t27 = &t25[t26]                                                 *string
	t28 = *t1                                                      []string
	; var rows []string @ 160:14 is t28
	t29 = *t23                                                          int
	; var i int @ 160:19 is t29
	t30 = &t28[t29]                                                 *string
	t31 = *t30                                                       string
	; *ast.IndexExpr @ 160:14 is t31
	t32 = t31 + " ":string                                           string
	; *ast.BinaryExpr @ 160:14 is t32
	t33 = *t11                                                     []string
	; var append []string @ 160:30 is t33
	t34 = *t23                                                          int
	; var i int @ 160:37 is t34
	t35 = &t33[t34]                                                 *string
	t36 = *t35                                                       string
	; *ast.IndexExpr @ 160:30 is t36
	t37 = t32 + t36                                                  string
	; *ast.BinaryExpr @ 160:14 is t37
	t38 = t37 + "\n":string                                          string
	; *ast.BinaryExpr @ 160:14 is t38
	*t27 = t38
	; *ast.IndexExpr @ 160:4 is t38
	t39 = *t2                                                        string
	; var str string @ 161:10 is t39
	t40 = *t1                                                      []string
	; var rows []string @ 161:16 is t40
	t41 = *t23                                                          int
	; var i int @ 161:21 is t41
	t42 = &t40[t41]                                                 *string
	t43 = *t42                                                       string
	; *ast.IndexExpr @ 161:16 is t43
	t44 = t39 + t43                                                  string
	; *ast.BinaryExpr @ 161:10 is t44
	*t2 = t44
	; var str string @ 161:4 is t44
	t45 = *t17                                                          int
	t46 = t45 + 1:int                                                   int
	*t17 = t46
	; var i int @ 158:22 is t46
	jump 5
5:                                                             for.loop P:2 S:2
	t47 = *t17                                                          int
	; var i int @ 158:15 is t47
	t48 = t47 < 3:int                                                  bool
	; *ast.BinaryExpr @ 158:15 is t48
	if t48 goto 4 else 2

# Name: (*github.com/JoergReinhardt/worm.digit).addDigit
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:168:17
# Locals:
#   0:	t0 *digit
func (d *digit) addDigit():
0:                                                                entry P:0 S:2
	t0 = local *digit (d)                                           **digit
	*t0 = d
	t1 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 169:8 is t1
	; address of *ast.StarExpr @ 169:7 is t1
	t2 = &t1.hasNext [#1]                                             *bool
	; address of field hasNext bool @ 169:11 is t2
	t3 = *t2                                                           bool
	; *ast.SelectorExpr @ 169:6 is t3
	if t3 goto 3 else 1
1:                                                              if.then P:1 S:1
	t4 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 170:5 is t4
	; address of *ast.StarExpr @ 170:4 is t4
	t5 = &t4.next [#2]                                              **digit
	; address of field next *github.com/JoergReinhardt/worm.digit @ 170:8 is t5
	; func github.com/JoergReinhardt/worm.newDigit() *github.com/JoergReinhardt/worm.digit @ 170:15 is newDigit
	t6 = newDigit()                                                  *digit
	; *ast.CallExpr @ 170:15 is t6
	*t5 = t6
	; field next *github.com/JoergReinhardt/worm.digit @ 170:8 is t6
	t7 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 171:5 is t7
	; address of *ast.StarExpr @ 171:4 is t7
	t8 = &t7.hasNext [#1]                                             *bool
	; address of field hasNext bool @ 171:8 is t8
	*t8 = true:bool
	; field hasNext bool @ 171:8 is true:bool
	jump 2
2:                                                              if.done P:2 S:0
	rundefers
	return
3:                                                              if.else P:1 S:1
	t9 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 173:5 is t9
	t10 = &t9.next [#2]                                             **digit
	; address of field next *github.com/JoergReinhardt/worm.digit @ 173:7 is t10
	t11 = *t10                                                       *digit
	; *ast.SelectorExpr @ 173:5 is t11
	; address of *ast.StarExpr @ 173:4 is t11
	t12 = (*digit).addDigit(t11)                                         ()
	; *ast.CallExpr @ 173:3 is t12
	jump 2

# Name: (*github.com/JoergReinhardt/worm.digit).increase
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:176:17
# Locals:
#   0:	t0 *digit
func (d *digit) increase():
0:                                                                entry P:0 S:2
	t0 = local *digit (d)                                           **digit
	*t0 = d
	t1 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 177:4 is t1
	t2 = *t1                                                          digit
	; *ast.StarExpr @ 177:3 is t2
	t3 = t2.ring [#0]                                                 *ring
	t4 = (*ring).incDigit(t3)                                            ()
	; *ast.CallExpr @ 177:2 is t4
	t5 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 178:7 is t5
	t6 = *t5                                                          digit
	; *ast.StarExpr @ 178:6 is t6
	t7 = t6.ring [#0]                                                 *ring
	t8 = &t7.sector [#0]                                           **sector
	t9 = *t8                                                        *sector
	t10 = &t9.pos [#0]                                                 *int
	; address of field pos int @ 178:10 is t10
	t11 = *t10                                                          int
	; *ast.SelectorExpr @ 178:5 is t11
	t12 = t11 <= 2:int                                                 bool
	; *ast.BinaryExpr @ 178:5 is t12
	if t12 goto 1 else 2
1:                                                              if.then P:1 S:2
	t13 = *t0                                                        *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 179:9 is t13
	; address of *ast.StarExpr @ 179:8 is t13
	t14 = &t13.hasNext [#1]                                           *bool
	; address of field hasNext bool @ 179:12 is t14
	t15 = *t14                                                         bool
	; *ast.SelectorExpr @ 179:7 is t15
	if t15 goto 4 else 3
2:                                                              if.done P:2 S:0
	rundefers
	return
3:                                                              if.then P:1 S:1
	t16 = *t0                                                        *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 180:6 is t16
	; address of *ast.StarExpr @ 180:5 is t16
	t17 = (*digit).addDigit(t16)                                         ()
	; *ast.CallExpr @ 180:4 is t17
	jump 4
4:                                                              if.done P:2 S:1
	t18 = *t0                                                        *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 182:5 is t18
	; address of *ast.StarExpr @ 182:4 is t18
	t19 = &t18.next [#2]                                            **digit
	; address of field next *github.com/JoergReinhardt/worm.digit @ 182:8 is t19
	t20 = *t19                                                       *digit
	; *ast.SelectorExpr @ 182:3 is t20
	t21 = &t20.ring [#0]                                             **ring
	t22 = *t21                                                        *ring
	t23 = (*ring).incDigit(t22)                                          ()
	; *ast.CallExpr @ 182:3 is t23
	jump 2

# Name: (*github.com/JoergReinhardt/worm.digit).decrease
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:185:17
# Locals:
#   0:	t0 *digit
func (d *digit) decrease():
0:                                                                entry P:0 S:2
	t0 = local *digit (d)                                           **digit
	*t0 = d
	t1 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 186:4 is t1
	t2 = *t1                                                          digit
	; *ast.StarExpr @ 186:3 is t2
	t3 = t2.ring [#0]                                                 *ring
	t4 = (*ring).decDigit(t3)                                            ()
	; *ast.CallExpr @ 186:2 is t4
	t5 = *t0                                                         *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 187:7 is t5
	t6 = *t5                                                          digit
	; *ast.StarExpr @ 187:6 is t6
	t7 = t6.ring [#0]                                                 *ring
	t8 = &t7.sector [#0]                                           **sector
	t9 = *t8                                                        *sector
	t10 = &t9.pos [#0]                                                 *int
	; address of field pos int @ 187:10 is t10
	t11 = *t10                                                          int
	; *ast.SelectorExpr @ 187:5 is t11
	t12 = t11 >= 26:int                                                bool
	; *ast.BinaryExpr @ 187:5 is t12
	if t12 goto 1 else 2
1:                                                              if.then P:1 S:1
	t13 = *t0                                                        *digit
	; var d *github.com/JoergReinhardt/worm.digit @ 188:5 is t13
	t14 = &t13.next [#2]                                            **digit
	; address of field next *github.com/JoergReinhardt/worm.digit @ 188:7 is t14
	t15 = *t14                                                       *digit
	; *ast.SelectorExpr @ 188:5 is t15
	t16 = *t15                                                        digit
	; *ast.StarExpr @ 188:4 is t16
	t17 = t16.ring [#0]                                               *ring
	t18 = (*ring).decDigit(t17)                                          ()
	; *ast.CallExpr @ 188:3 is t18
	jump 2
2:                                                              if.done P:2 S:0
	rundefers
	return

# Name: github.com/JoergReinhardt/worm.newDigit
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/counter.go:191:6
# Locals:
#   0:	t0 *ring
func newDigit() *digit:
0:                                                                entry P:0 S:0
	t0 = local *ring (r)                                             **ring
	; func github.com/JoergReinhardt/worm.newRing() *github.com/JoergReinhardt/worm.ring @ 192:7 is newRing
	t1 = newRing()                                                    *ring
	; *ast.CallExpr @ 192:7 is t1
	*t0 = t1
	; var r *github.com/JoergReinhardt/worm.ring @ 192:2 is t1
	t2 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 193:4 is t2
	; address of *ast.StarExpr @ 193:3 is t2
	t3 = (*ring).incDigit(t2)                                            ()
	; *ast.CallExpr @ 193:2 is t3
	t4 = new digit (complit)                                         *digit
	t5 = &t4.ring [#0]                                               **ring
	t6 = *t0                                                          *ring
	; var r *github.com/JoergReinhardt/worm.ring @ 194:16 is t6
	t7 = &t4.hasNext [#1]                                             *bool
	t8 = &t4.next [#2]                                              **digit
	*t5 = t6
	; var r *github.com/JoergReinhardt/worm.ring @ 194:16 is t6
	*t7 = false:bool
	*t8 = nil:*digit
	; address of *ast.CompositeLit @ 194:10 is t4
	; *ast.UnaryExpr @ 194:9 is t4
	rundefers
	return t4

# Name: (github.com/JoergReinhardt/worm.cherry).picked
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/game.go:17:17
# Locals:
#   0:	t0 cherry
#   1:	t1 int
#   2:	t2 int
func (c cherry) picked(x int, y int) bool:
0:                                                                entry P:0 S:2
	t0 = local cherry (c)                                           *cherry
	*t0 = c
	t1 = local int (x)                                                 *int
	*t1 = x
	t2 = local int (y)                                                 *int
	*t2 = y
	; address of var c github.com/JoergReinhardt/worm.cherry @ 18:5 is t0
	t3 = &t0.x [#0]                                                    *int
	; address of field x int @ 18:7 is t3
	t4 = *t3                                                            int
	; *ast.SelectorExpr @ 18:5 is t4
	t5 = *t1                                                            int
	; var x int @ 18:12 is t5
	t6 = t4 == t5                                                      bool
	; *ast.BinaryExpr @ 18:5 is t6
	if t6 goto 3 else 2
1:                                                              if.then P:1 S:0
	rundefers
	return true:bool
2:                                                              if.done P:2 S:0
	rundefers
	return false:bool
3:                                                            cond.true P:1 S:2
	; address of var c github.com/JoergReinhardt/worm.cherry @ 18:17 is t0
	t7 = &t0.y [#1]                                                    *int
	; address of field y int @ 18:19 is t7
	t8 = *t7                                                            int
	; *ast.SelectorExpr @ 18:17 is t8
	t9 = *t2                                                            int
	; var y int @ 18:24 is t9
	t10 = t8 == t9                                                     bool
	; *ast.BinaryExpr @ 18:17 is t10
	if t10 goto 1 else 2

# Name: (*github.com/JoergReinhardt/worm.cherry).pop
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/game.go:25:18
# Locals:
#   0:	t0 *cherry
#   1:	t1 int
#   2:	t2 int
func (c *cherry) pop(x int, y int):
0:                                                                entry P:0 S:0
	t0 = local *cherry (c)                                         **cherry
	*t0 = c
	t1 = local int (x)                                                 *int
	*t1 = x
	t2 = local int (y)                                                 *int
	*t2 = y
	t3 = *t0                                                        *cherry
	; var c *github.com/JoergReinhardt/worm.cherry @ 26:4 is t3
	; address of *ast.StarExpr @ 26:3 is t3
	t4 = &t3.x [#0]                                                    *int
	; address of field x int @ 26:7 is t4
	t5 = *t0                                                        *cherry
	; var c *github.com/JoergReinhardt/worm.cherry @ 26:12 is t5
	; address of *ast.StarExpr @ 26:11 is t5
	t6 = &t5.y [#1]                                                    *int
	; address of field y int @ 26:15 is t6
	t7 = *t1                                                            int
	; var x int @ 26:19 is t7
	t8 = *t2                                                            int
	; var y int @ 26:22 is t8
	*t4 = t7
	; field x int @ 26:7 is t7
	*t6 = t8
	; field y int @ 26:15 is t8
	rundefers
	return

# Name: github.com/JoergReinhardt/worm.newState
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/game.go:46:6
# Locals:
#   0:	t0 func() (x int, y int)
#   1:	t1 func() (x int, y int)
func newState(sizeFn func() (x int, y int), randFn func() (x int, y int)) *state:
0:                                                                entry P:0 S:0
	t0 = local func() (x int, y int) (sizeFn)        *func() (x int, y int)
	*t0 = sizeFn
	t1 = local func() (x int, y int) (randFn)        *func() (x int, y int)
	*t1 = randFn
	t2 = new state (complit)                                         *state
	t3 = &t2.speed [#0]                                      *time.Duration
	t4 = &t2.eventState [#1]                                      *gameStat
	t5 = &t2.direction [#2]                                            *dir
	t6 = &t2.size [#3]                               *func() (x int, y int)
	t7 = *t0                                          func() (x int, y int)
	; var sizeFn func() (x int, y int) @ 51:15 is t7
	t8 = &t2.rand [#4]                               *func() (x int, y int)
	t9 = *t1                                          func() (x int, y int)
	; var randFn func() (x int, y int) @ 52:15 is t9
	*t3 = 250000000:time.Duration
	; *ast.BinaryExpr @ 48:15 is 250000000:time.Duration
	*t4 = 0:gameStat
	*t5 = 0:dir
	*t6 = t7
	; var sizeFn func() (x int, y int) @ 51:15 is t7
	*t8 = t9
	; var randFn func() (x int, y int) @ 52:15 is t9
	; address of *ast.CompositeLit @ 47:10 is t2
	; *ast.UnaryExpr @ 47:9 is t2
	rundefers
	return t2

# Name: github.com/JoergReinhardt/worm.newGame$1
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/game.go:70:12
# Parent: newGame
# Free variables:
#   0:	sizeFn *func() (x int, y int)
# Locals:
#   0:	t0 int
#   1:	t1 int
#   2:	t2 int
#   3:	t3 int
func newGame$1() (x int, y int):
0:                                                                entry P:0 S:0
	t0 = local int (x)                                                 *int
	t1 = local int (y)                                                 *int
	t2 = local int (w)                                                 *int
	t3 = local int (h)                                                 *int
	t4 = *sizeFn                                      func() (x int, y int)
	; var sizeFn func() (x int, y int) @ 71:11 is t4
	t5 = t4()                                                (x int, y int)
	; *ast.CallExpr @ 71:11 is t5
	t6 = extract t5 #0                                                  int
	*t2 = t6
	; var w int @ 71:3 is t6
	t7 = extract t5 #1                                                  int
	*t3 = t7
	; var h int @ 71:6 is t7
	; func math/rand.Intn(n int) int @ 72:15 is Intn
	; *ast.SelectorExpr @ 72:10 is Intn
	t8 = *t2                                                            int
	; var w int @ 72:20 is t8
	t9 = math/rand.Intn(t8)                                             int
	; *ast.CallExpr @ 72:10 is t9
	; func math/rand.Intn(n int) int @ 72:29 is Intn
	; *ast.SelectorExpr @ 72:24 is Intn
	t10 = *t3                                                           int
	; var h int @ 72:34 is t10
	t11 = math/rand.Intn(t10)                                           int
	; *ast.CallExpr @ 72:24 is t11
	*t0 = t9
	*t1 = t11
	rundefers
	t12 = *t0                                                           int
	t13 = *t1                                                           int
	return t12, t13

# Name: github.com/JoergReinhardt/worm.newGame
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/game.go:64:6
# Locals:
#   0:	t4 func() (x int, y int)
#   1:	t6 int
#   2:	t7 int
#   3:	t12 *state
func newGame(sizeFn func() (x int, y int)) *game:
0:                                                                entry P:0 S:0
	t0 = new func() (x int, y int) (sizeFn)          *func() (x int, y int)
	*t0 = sizeFn
	; func math/rand.Seed(seed int64) @ 66:7 is Seed
	; *ast.SelectorExpr @ 66:2 is Seed
	; func time.Now() time.Time @ 66:17 is Now
	; *ast.SelectorExpr @ 66:12 is Now
	t1 = time.Now()                                               time.Time
	; *ast.CallExpr @ 66:12 is t1
	t2 = (time.Time).Unix(t1)                                         int64
	; *ast.CallExpr @ 66:12 is t2
	t3 = math/rand.Seed(t2)                                              ()
	; *ast.CallExpr @ 66:2 is t3
	t4 = local func() (x int, y int) (randFn)        *func() (x int, y int)
	t5 = make closure newGame$1 [t0]                  func() (x int, y int)
	; *ast.FuncLit @ 70:12 is t5
	*t4 = t5
	; var randFn func() (x int, y int) @ 70:2 is t5
	t6 = local int (x)                                                 *int
	t7 = local int (y)                                                 *int
	t8 = *t4                                          func() (x int, y int)
	; var randFn func() (x int, y int) @ 74:10 is t8
	t9 = t8()                                                (x int, y int)
	; *ast.CallExpr @ 74:10 is t9
	t10 = extract t9 #0                                                 int
	*t6 = t10
	; var x int @ 74:2 is t10
	t11 = extract t9 #1                                                 int
	*t7 = t11
	; var y int @ 74:5 is t11
	t12 = local *state (s)                                          **state
	; func github.com/JoergReinhardt/worm.newState(sizeFn func() (x int, y int), randFn func() (x int, y int)) *github.com/JoergReinhardt/worm.state @ 75:7 is newState
	t13 = *t0                                         func() (x int, y int)
	; var sizeFn func() (x int, y int) @ 75:16 is t13
	t14 = *t4                                         func() (x int, y int)
	; var randFn func() (x int, y int) @ 75:24 is t14
	t15 = newState(t13, t14)                                         *state
	; *ast.CallExpr @ 75:7 is t15
	*t12 = t15
	; var s *github.com/JoergReinhardt/worm.state @ 75:2 is t15
	t16 = new game (complit)                                          *game
	t17 = &t16.state [#0]                                           **state
	t18 = *t12                                                       *state
	; var s *github.com/JoergReinhardt/worm.state @ 77:15 is t18
	t19 = &t16.cherry [#1]                                         **cherry
	t20 = new cherry (complit)                                      *cherry
	t21 = &t20.x [#0]                                                  *int
	t22 = *t6                                                           int
	; var x int @ 77:26 is t22
	t23 = &t20.y [#1]                                                  *int
	t24 = *t7                                                           int
	; var y int @ 77:29 is t24
	*t21 = t22
	; var x int @ 77:26 is t22
	*t23 = t24
	; var y int @ 77:29 is t24
	; address of *ast.CompositeLit @ 77:19 is t20
	; *ast.UnaryExpr @ 77:18 is t20
	t25 = &t16.worm [#2]                                             **worm
	; func github.com/JoergReinhardt/worm.newWorm(s *github.com/JoergReinhardt/worm.state) *github.com/JoergReinhardt/worm.worm @ 77:33 is newWorm
	t26 = *t12                                                       *state
	; var s *github.com/JoergReinhardt/worm.state @ 77:41 is t26
	t27 = newWorm(t26)                                                *worm
	; *ast.CallExpr @ 77:33 is t27
	*t17 = t18
	; var s *github.com/JoergReinhardt/worm.state @ 77:15 is t18
	*t19 = t20
	; *ast.UnaryExpr @ 77:18 is t20
	*t25 = t27
	; *ast.CallExpr @ 77:33 is t27
	; address of *ast.CompositeLit @ 77:10 is t16
	; *ast.UnaryExpr @ 77:9 is t16
	rundefers
	return t16

# Name: (*github.com/JoergReinhardt/worm.game).reset
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/game.go:81:16
# Locals:
#   0:	t0 *game
func (g *game) reset():
0:                                                                entry P:0 S:0
	t0 = local *game (g)                                             **game
	*t0 = g
	t1 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 82:3 is t1
	; func github.com/JoergReinhardt/worm.newGame(sizeFn func() (x int, y int)) *github.com/JoergReinhardt/worm.game @ 82:8 is newGame
	t2 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 82:16 is t2
	t3 = &t2.state [#0]                                             **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 82:18 is t3
	t4 = *t3                                                         *state
	; *ast.SelectorExpr @ 82:16 is t4
	t5 = &t4.size [#3]                               *func() (x int, y int)
	; address of field size func() (x int, y int) @ 82:24 is t5
	t6 = *t5                                          func() (x int, y int)
	; *ast.SelectorExpr @ 82:16 is t6
	t7 = newGame(t6)                                                  *game
	; *ast.CallExpr @ 82:8 is t7
	t8 = *t7                                                           game
	; *ast.StarExpr @ 82:7 is t8
	*t1 = t8
	; *ast.StarExpr @ 82:2 is t8
	; func github.com/JoergReinhardt/worm.newDigit() *github.com/JoergReinhardt/worm.digit @ 83:11 is newDigit
	t9 = newDigit()                                                  *digit
	; *ast.CallExpr @ 83:11 is t9
	*points = t9
	; var github.com/JoergReinhardt/worm.points *github.com/JoergReinhardt/worm.digit @ 83:2 is t9
	rundefers
	return

# Name: (*github.com/JoergReinhardt/worm.game).wrapBoard
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/game.go:87:16
# Locals:
#   0:	t0 *game
#   1:	t1 int
#   2:	t2 int
#   3:	t3 int
#   4:	t4 int
#   5:	t7 int
#   6:	t8 int
func (g *game) wrapBoard(xi int, yi int) (xo int, yo int):
0:                                                                entry P:0 S:2
	t0 = local *game (g)                                             **game
	*t0 = g
	t1 = local int (xi)                                                *int
	*t1 = xi
	t2 = local int (yi)                                                *int
	*t2 = yi
	t3 = local int (xo)                                                *int
	t4 = local int (yo)                                                *int
	t5 = *t1                                                            int
	; var xi int @ 88:11 is t5
	t6 = *t2                                                            int
	; var yi int @ 88:15 is t6
	*t3 = t5
	; var xo int @ 88:2 is t5
	*t4 = t6
	; var yo int @ 88:6 is t6
	t7 = local int (w)                                                 *int
	t8 = local int (h)                                                 *int
	t9 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 89:10 is t9
	t10 = &t9.state [#0]                                            **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 89:12 is t10
	t11 = *t10                                                       *state
	; *ast.SelectorExpr @ 89:10 is t11
	t12 = &t11.size [#3]                             *func() (x int, y int)
	; address of field size func() (x int, y int) @ 89:18 is t12
	t13 = *t12                                        func() (x int, y int)
	; *ast.SelectorExpr @ 89:10 is t13
	t14 = t13()                                              (x int, y int)
	; *ast.CallExpr @ 89:10 is t14
	t15 = extract t14 #0                                                int
	*t7 = t15
	; var w int @ 89:2 is t15
	t16 = extract t14 #1                                                int
	*t8 = t16
	; var h int @ 89:5 is t16
	t17 = *t1                                                           int
	; var xi int @ 90:5 is t17
	t18 = t17 < 0:int                                                  bool
	; *ast.BinaryExpr @ 90:5 is t18
	if t18 goto 1 else 2
1:                                                              if.then P:1 S:1
	t19 = *t7                                                           int
	; var w int @ 91:8 is t19
	t20 = t19 - 1:int                                                   int
	; *ast.BinaryExpr @ 91:8 is t20
	*t3 = t20
	; var xo int @ 91:3 is t20
	jump 2
2:                                                              if.done P:2 S:2
	t21 = *t1                                                           int
	; var xi int @ 93:5 is t21
	t22 = *t7                                                           int
	; var w int @ 93:11 is t22
	t23 = t21 >= t22                                                   bool
	; *ast.BinaryExpr @ 93:5 is t23
	if t23 goto 3 else 4
3:                                                              if.then P:1 S:1
	*t3 = 0:int
	; var xo int @ 94:3 is 0:int
	jump 4
4:                                                              if.done P:2 S:2
	t24 = *t2                                                           int
	; var yi int @ 96:5 is t24
	t25 = t24 < 0:int                                                  bool
	; *ast.BinaryExpr @ 96:5 is t25
	if t25 goto 5 else 6
5:                                                              if.then P:1 S:1
	t26 = *t8                                                           int
	; var h int @ 97:8 is t26
	t27 = t26 - 1:int                                                   int
	; *ast.BinaryExpr @ 97:8 is t27
	*t4 = t27
	; var yo int @ 97:3 is t27
	jump 6
6:                                                              if.done P:2 S:2
	t28 = *t2                                                           int
	; var yi int @ 99:5 is t28
	t29 = *t8                                                           int
	; var h int @ 99:11 is t29
	t30 = t28 >= t29                                                   bool
	; *ast.BinaryExpr @ 99:5 is t30
	if t30 goto 7 else 8
7:                                                              if.then P:1 S:1
	*t4 = 0:int
	; var yo int @ 100:3 is 0:int
	jump 8
8:                                                              if.done P:2 S:0
	t31 = *t3                                                           int
	; var xo int @ 102:9 is t31
	t32 = *t4                                                           int
	; var yo int @ 102:13 is t32
	*t3 = t31
	*t4 = t32
	rundefers
	t33 = *t3                                                           int
	t34 = *t4                                                           int
	return t33, t34

# Name: (*github.com/JoergReinhardt/worm.game).play
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/game.go:106:16
# Locals:
#   0:	t0 *game
#   1:	t1 int
#   2:	t2 int
func (g *game) play():
0:                                                                entry P:0 S:2
	t0 = local *game (g)                                             **game
	*t0 = g
	t1 = local int (x)                                                 *int
	t2 = local int (y)                                                 *int
	t3 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 110:12 is t3
	; address of *ast.StarExpr @ 110:11 is t3
	t4 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 110:27 is t4
	t5 = &t4.worm [#2]                                               **worm
	; address of field worm *github.com/JoergReinhardt/worm.worm @ 110:29 is t5
	t6 = *t5                                                          *worm
	; *ast.SelectorExpr @ 110:27 is t6
	t7 = *t6                                                           worm
	; *ast.StarExpr @ 110:26 is t7
	t8 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 110:47 is t8
	t9 = &t8.state [#0]                                             **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 110:49 is t9
	t10 = *t9                                                        *state
	; *ast.SelectorExpr @ 110:47 is t10
	t11 = &t10.direction [#2]                                          *dir
	; address of field direction github.com/JoergReinhardt/worm.dir @ 110:55 is t11
	t12 = *t11                                                          dir
	; *ast.SelectorExpr @ 110:47 is t12
	t13 = (worm).predNextPos(t7, t12)                        (x int, y int)
	; *ast.CallExpr @ 110:25 is t13
	t14 = extract t13 #0                                                int
	t15 = extract t13 #1                                                int
	t16 = (*game).wrapBoard(t3, t14, t15)                  (xo int, yo int)
	; *ast.CallExpr @ 110:10 is t16
	t17 = extract t16 #0                                                int
	*t1 = t17
	; var x int @ 110:2 is t17
	t18 = extract t16 #1                                                int
	*t2 = t18
	; var y int @ 110:5 is t18
	t19 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 113:7 is t19
	t20 = &t19.worm [#2]                                             **worm
	; address of field worm *github.com/JoergReinhardt/worm.worm @ 113:9 is t20
	t21 = *t20                                                        *worm
	; *ast.SelectorExpr @ 113:7 is t21
	t22 = *t21                                                         worm
	; *ast.StarExpr @ 113:6 is t22
	t23 = t22.segment [#0]                                         *segment
	t24 = *t1                                                           int
	; var x int @ 113:24 is t24
	t25 = *t2                                                           int
	; var y int @ 113:27 is t25
	t26 = (*segment).collides(t23, t24, t25)                           bool
	; *ast.CallExpr @ 113:5 is t26
	if t26 goto 1 else 2
1:                                                              if.then P:1 S:0
	t27 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 114:5 is t27
	t28 = &t27.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 114:7 is t28
	t29 = *t28                                                       *state
	; *ast.SelectorExpr @ 114:5 is t29
	; address of *ast.StarExpr @ 114:4 is t29
	t30 = &t29.eventState [#1]                                    *gameStat
	; address of field eventState github.com/JoergReinhardt/worm.gameStat @ 114:14 is t30
	*t30 = 8:gameStat
	; field eventState github.com/JoergReinhardt/worm.gameStat @ 114:14 is 8:github.com/JoergReinhardt/worm.gameStat
	rundefers
	return
2:                                                              if.done P:1 S:2
	t31 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 120:4 is t31
	t32 = &t31.cherry [#1]                                         **cherry
	; address of field cherry *github.com/JoergReinhardt/worm.cherry @ 120:6 is t32
	t33 = *t32                                                      *cherry
	; *ast.SelectorExpr @ 120:4 is t33
	; address of *ast.StarExpr @ 120:3 is t33
	t34 = &t33.x [#0]                                                  *int
	; address of field x int @ 120:14 is t34
	t35 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 120:19 is t35
	t36 = &t35.cherry [#1]                                         **cherry
	; address of field cherry *github.com/JoergReinhardt/worm.cherry @ 120:21 is t36
	t37 = *t36                                                      *cherry
	; *ast.SelectorExpr @ 120:19 is t37
	; address of *ast.StarExpr @ 120:18 is t37
	t38 = &t37.y [#1]                                                  *int
	; address of field y int @ 120:29 is t38
	t39 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 120:35 is t39
	; address of *ast.StarExpr @ 120:34 is t39
	t40 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 120:50 is t40
	t41 = &t40.cherry [#1]                                         **cherry
	; address of field cherry *github.com/JoergReinhardt/worm.cherry @ 120:52 is t41
	t42 = *t41                                                      *cherry
	; *ast.SelectorExpr @ 120:50 is t42
	; address of *ast.StarExpr @ 120:49 is t42
	t43 = &t42.x [#0]                                                  *int
	; address of field x int @ 120:60 is t43
	t44 = *t43                                                          int
	; *ast.SelectorExpr @ 120:48 is t44
	t45 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 120:65 is t45
	t46 = &t45.cherry [#1]                                         **cherry
	; address of field cherry *github.com/JoergReinhardt/worm.cherry @ 120:67 is t46
	t47 = *t46                                                      *cherry
	; *ast.SelectorExpr @ 120:65 is t47
	; address of *ast.StarExpr @ 120:64 is t47
	t48 = &t47.y [#1]                                                  *int
	; address of field y int @ 120:75 is t48
	t49 = *t48                                                          int
	; *ast.SelectorExpr @ 120:63 is t49
	t50 = (*game).wrapBoard(t39, t44, t49)                 (xo int, yo int)
	; *ast.CallExpr @ 120:33 is t50
	t51 = extract t50 #0                                                int
	*t34 = t51
	; field x int @ 120:14 is t51
	t52 = extract t50 #1                                                int
	*t38 = t52
	; field y int @ 120:29 is t52
	t53 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 123:7 is t53
	t54 = &t53.cherry [#1]                                         **cherry
	; address of field cherry *github.com/JoergReinhardt/worm.cherry @ 123:9 is t54
	t55 = *t54                                                      *cherry
	; *ast.SelectorExpr @ 123:7 is t55
	t56 = *t55                                                       cherry
	; *ast.StarExpr @ 123:6 is t56
	t57 = *t1                                                           int
	; var x int @ 123:24 is t57
	t58 = *t2                                                           int
	; var y int @ 123:27 is t58
	t59 = (cherry).picked(t56, t57, t58)                               bool
	; *ast.CallExpr @ 123:5 is t59
	if t59 goto 3 else 4
3:                                                              if.then P:1 S:1
	t60 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 125:5 is t60
	t61 = &t60.worm [#2]                                             **worm
	; address of field worm *github.com/JoergReinhardt/worm.worm @ 125:7 is t61
	t62 = *t61                                                        *worm
	; *ast.SelectorExpr @ 125:5 is t62
	t63 = *t62                                                         worm
	; *ast.StarExpr @ 125:4 is t63
	t64 = t63.segment [#0]                                         *segment
	t65 = (*segment).grow(t64)                                           ()
	; *ast.CallExpr @ 125:3 is t65
	t66 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 127:5 is t66
	t67 = &t66.cherry [#1]                                         **cherry
	; address of field cherry *github.com/JoergReinhardt/worm.cherry @ 127:7 is t67
	t68 = *t67                                                      *cherry
	; *ast.SelectorExpr @ 127:5 is t68
	; address of *ast.StarExpr @ 127:4 is t68
	t69 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 127:19 is t69
	t70 = &t69.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 127:21 is t70
	t71 = *t70                                                       *state
	; *ast.SelectorExpr @ 127:19 is t71
	t72 = &t71.rand [#4]                             *func() (x int, y int)
	; address of field rand func() (x int, y int) @ 127:27 is t72
	t73 = *t72                                        func() (x int, y int)
	; *ast.SelectorExpr @ 127:19 is t73
	t74 = t73()                                              (x int, y int)
	; *ast.CallExpr @ 127:19 is t74
	t75 = extract t74 #0                                                int
	t76 = extract t74 #1                                                int
	t77 = (*cherry).pop(t68, t75, t76)                                   ()
	; *ast.CallExpr @ 127:3 is t77
	t78 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 129:5 is t78
	t79 = &t78.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 129:7 is t79
	t80 = *t79                                                       *state
	; *ast.SelectorExpr @ 129:5 is t80
	; address of *ast.StarExpr @ 129:4 is t80
	t81 = &t80.speed [#0]                                    *time.Duration
	; address of field speed time.Duration @ 129:14 is t81
	t82 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 129:23 is t82
	t83 = &t82.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 129:25 is t83
	t84 = *t83                                                       *state
	; *ast.SelectorExpr @ 129:23 is t84
	t85 = &t84.speed [#0]                                    *time.Duration
	; address of field speed time.Duration @ 129:31 is t85
	t86 = *t85                                                time.Duration
	; *ast.SelectorExpr @ 129:23 is t86
	t87 = t86 / 10:time.Duration                              time.Duration
	; *ast.BinaryExpr @ 129:23 is t87
	t88 = t87 * 9:time.Duration                               time.Duration
	; *ast.BinaryExpr @ 129:22 is t88
	*t81 = t88
	; field speed time.Duration @ 129:14 is t88
	t89 = *points                                                    *digit
	; var github.com/JoergReinhardt/worm.points *github.com/JoergReinhardt/worm.digit @ 131:5 is t89
	; address of *ast.StarExpr @ 131:4 is t89
	t90 = (*digit).increase(t89)                                         ()
	; *ast.CallExpr @ 131:3 is t90
	jump 4
4:                                                              if.done P:2 S:0
	t91 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 134:4 is t91
	t92 = &t91.worm [#2]                                             **worm
	; address of field worm *github.com/JoergReinhardt/worm.worm @ 134:6 is t92
	t93 = *t92                                                        *worm
	; *ast.SelectorExpr @ 134:4 is t93
	; address of *ast.StarExpr @ 134:3 is t93
	t94 = *t1                                                           int
	; var x int @ 134:17 is t94
	t95 = *t2                                                           int
	; var y int @ 134:20 is t95
	t96 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 134:23 is t96
	t97 = &t96.state [#0]                                           **state
	; address of field state *github.com/JoergReinhardt/worm.state @ 134:25 is t97
	t98 = *t97                                                       *state
	; *ast.SelectorExpr @ 134:23 is t98
	t99 = &t98.direction [#2]                                          *dir
	; address of field direction github.com/JoergReinhardt/worm.dir @ 134:31 is t99
	t100 = *t99                                                         dir
	; *ast.SelectorExpr @ 134:23 is t100
	t101 = (*worm).move(t93, t94, t95, t100)                             ()
	; *ast.CallExpr @ 134:2 is t101
	rundefers
	return

# Name: (github.com/JoergReinhardt/worm.gameStat).String
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/gamestat_string.go:21:19
# Locals:
#   0:	t0 gameStat
func (i gameStat) String() string:
0:                                                                entry P:0 S:2
	t0 = local gameStat (i)                                       *gameStat
	*t0 = i
	t1 = *t0                                                       gameStat
	; var i github.com/JoergReinhardt/worm.gameStat @ 23:7 is t1
	t2 = t1 == 0:gameStat                                              bool
	; *ast.BinaryExpr @ 23:7 is t2
	if t2 goto 1 else 3
1:                                                          switch.body P:1 S:0
	rundefers
	return "INIT":string
2:                                                          switch.body P:1 S:0
	rundefers
	return "RUN":string
3:                                                          switch.next P:1 S:2
	t3 = *t0                                                       gameStat
	; var i github.com/JoergReinhardt/worm.gameStat @ 25:7 is t3
	t4 = t3 == 2:gameStat                                              bool
	; *ast.BinaryExpr @ 25:7 is t4
	if t4 goto 2 else 5
4:                                                          switch.body P:1 S:0
	rundefers
	return "PAUSE":string
5:                                                          switch.next P:1 S:2
	t5 = *t0                                                       gameStat
	; var i github.com/JoergReinhardt/worm.gameStat @ 27:7 is t5
	t6 = t5 == 4:gameStat                                              bool
	; *ast.BinaryExpr @ 27:7 is t6
	if t6 goto 4 else 7
6:                                                          switch.body P:1 S:0
	rundefers
	return "GAME_OVER":string
7:                                                          switch.next P:1 S:2
	t7 = *t0                                                       gameStat
	; var i github.com/JoergReinhardt/worm.gameStat @ 29:7 is t7
	t8 = t7 == 8:gameStat                                              bool
	; *ast.BinaryExpr @ 29:7 is t8
	if t8 goto 6 else 8
8:                                                          switch.next P:1 S:0
	; func fmt.Sprintf(format string, a ...interface{}) string @ 32:14 is Sprintf
	; *ast.SelectorExpr @ 32:10 is Sprintf
	t9 = *t0                                                       gameStat
	; var i github.com/JoergReinhardt/worm.gameStat @ 32:38 is t9
	t10 = new [1]interface{} (varargs)                      *[1]interface{}
	t11 = &t10[0:int]                                          *interface{}
	t12 = make interface{} <- gameStat (t9)                     interface{}
	*t11 = t12
	t13 = slice t10[:]                                        []interface{}
	t14 = fmt.Sprintf("GameStat(%d)":string, t13...)                 string
	; *ast.CallExpr @ 32:10 is t14
	rundefers
	return t14

# Name: github.com/JoergReinhardt/worm.main
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/main.go:10:6
# Recover: 3
# Locals:
#   0:	t0 error
func main():
0:                                                                entry P:0 S:2
	t0 = local error (err)                                           *error
	; func github.com/nsf/termbox-go.Init() error @ 11:17 is Init
	; *ast.SelectorExpr @ 11:9 is Init
	t1 = github.com/nsf/termbox-go.Init()                             error
	; *ast.CallExpr @ 11:9 is t1
	*t0 = t1
	; var err error @ 11:2 is t1
	t2 = *t0                                                          error
	; var err error @ 13:5 is t2
	t3 = t2 != nil:error                                               bool
	; *ast.BinaryExpr @ 13:5 is t3
	if t3 goto 1 else 2
1:                                                              if.then P:1 S:0
	t4 = *t0                                                          error
	; var err error @ 14:9 is t4
	t5 = change interface interface{} <- error (t4)             interface{}
	panic t5
2:                                                              if.done P:1 S:0
	; func github.com/nsf/termbox-go.Close() @ 16:16 is Close
	; *ast.SelectorExpr @ 16:8 is Close
	defer github.com/nsf/termbox-go.Close()
	; func github.com/JoergReinhardt/worm.run() @ 18:2 is run
	t6 = run()                                                           ()
	; *ast.CallExpr @ 18:2 is t6
	rundefers
	return
3:                                                              recover P:0 S:0
	return

# Name: github.com/JoergReinhardt/worm.initScreen
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/render.go:10:6
# Locals:
#   0:	t0 []string
#   1:	t116 int
#   2:	t117 int
#   3:	t121 int
#   4:	t127 int
#   5:	t132 int
#   6:	t133 string
#   7:	t136 int
#   8:	t143 int
#   9:	t144 string
#  10:	t149 []string
#  11:	t152 int
#  12:	t153 string
#  13:	t156 int
#  14:	t164 int
#  15:	t165 string
#  16:	t170 rune
func initScreen():
0:                                                                entry P:0 S:1
	t0 = local []string (msg)                                     *[]string
	; address of var msg []string @ 11:6 is t0
	t1 = *t0                                                       []string
	; var msg []string @ 12:15 is t1
	t2 = new [1]string (varargs)                                 *[1]string
	t3 = &t2[0:int]                                                 *string
	*t3 = "▄▄      ▄\xe2\x96...":string
	t4 = slice t2[:]                                               []string
	t5 = append(t1, t4...)                                         []string
	; *ast.CallExpr @ 12:8 is t5
	*t0 = t5
	; var msg []string @ 12:2 is t5
	t6 = *t0                                                       []string
	; var msg []string @ 13:15 is t6
	t7 = new [1]string (varargs)                                 *[1]string
	t8 = &t7[0:int]                                                 *string
	*t8 = "██      █\xe2\x96...":string
	t9 = slice t7[:]                                               []string
	t10 = append(t6, t9...)                                        []string
	; *ast.CallExpr @ 13:8 is t10
	*t0 = t10
	; var msg []string @ 13:2 is t10
	t11 = *t0                                                      []string
	; var msg []string @ 14:15 is t11
	t12 = new [1]string (varargs)                                *[1]string
	t13 = &t12[0:int]                                               *string
	*t13 = "▀█▄ ██ ...":string
	t14 = slice t12[:]                                             []string
	t15 = append(t11, t14...)                                      []string
	; *ast.CallExpr @ 14:8 is t15
	*t0 = t15
	; var msg []string @ 14:2 is t15
	t16 = *t0                                                      []string
	; var msg []string @ 15:15 is t16
	t17 = new [1]string (varargs)                                *[1]string
	t18 = &t17[0:int]                                               *string
	*t18 = " ██ ██ \xe2\x96...":string
	t19 = slice t17[:]                                             []string
	t20 = append(t16, t19...)                                      []string
	; *ast.CallExpr @ 15:8 is t20
	*t0 = t20
	; var msg []string @ 15:2 is t20
	t21 = *t0                                                      []string
	; var msg []string @ 16:15 is t21
	t22 = new [1]string (varargs)                                *[1]string
	t23 = &t22[0:int]                                               *string
	*t23 = " ███▀▀\xe2...":string
	t24 = slice t22[:]                                             []string
	t25 = append(t21, t24...)                                      []string
	; *ast.CallExpr @ 16:8 is t25
	*t0 = t25
	; var msg []string @ 16:2 is t25
	t26 = *t0                                                      []string
	; var msg []string @ 17:15 is t26
	t27 = new [1]string (varargs)                                *[1]string
	t28 = &t27[0:int]                                               *string
	*t28 = " ███  █\xe2\x96...":string
	t29 = slice t27[:]                                             []string
	t30 = append(t26, t29...)                                      []string
	; *ast.CallExpr @ 17:8 is t30
	*t0 = t30
	; var msg []string @ 17:2 is t30
	t31 = *t0                                                      []string
	; var msg []string @ 18:15 is t31
	t32 = new [1]string (varargs)                                *[1]string
	t33 = &t32[0:int]                                               *string
	*t33 = " ▀▀▀  ▀\xe2\x96...":string
	t34 = slice t32[:]                                             []string
	t35 = append(t31, t34...)                                      []string
	; *ast.CallExpr @ 18:8 is t35
	*t0 = t35
	; var msg []string @ 18:2 is t35
	t36 = *t0                                                      []string
	; var msg []string @ 19:15 is t36
	t37 = new [1]string (varargs)                                *[1]string
	t38 = &t37[0:int]                                               *string
	*t38 = "━━━━━\xe2\x94...":string
	t39 = slice t37[:]                                             []string
	t40 = append(t36, t39...)                                      []string
	; *ast.CallExpr @ 19:8 is t40
	*t0 = t40
	; var msg []string @ 19:2 is t40
	t41 = *t0                                                      []string
	; var msg []string @ 20:15 is t41
	t42 = new [1]string (varargs)                                *[1]string
	t43 = &t42[0:int]                                               *string
	*t43 = "╻ ╻┏━╸\xe2...":string
	t44 = slice t42[:]                                             []string
	t45 = append(t41, t44...)                                      []string
	; *ast.CallExpr @ 20:8 is t45
	*t0 = t45
	; var msg []string @ 20:2 is t45
	t46 = *t0                                                      []string
	; var msg []string @ 21:15 is t46
	t47 = new [1]string (varargs)                                *[1]string
	t48 = &t47[0:int]                                               *string
	*t48 = "┣━┫┣╸ \xe2...":string
	t49 = slice t47[:]                                             []string
	t50 = append(t46, t49...)                                      []string
	; *ast.CallExpr @ 21:8 is t50
	*t0 = t50
	; var msg []string @ 21:2 is t50
	t51 = *t0                                                      []string
	; var msg []string @ 22:15 is t51
	t52 = new [1]string (varargs)                                *[1]string
	t53 = &t52[0:int]                                               *string
	*t53 = "╹ ╹┗━╸\xe2...":string
	t54 = slice t52[:]                                             []string
	t55 = append(t51, t54...)                                      []string
	; *ast.CallExpr @ 22:8 is t55
	*t0 = t55
	; var msg []string @ 22:2 is t55
	t56 = *t0                                                      []string
	; var msg []string @ 23:15 is t56
	t57 = new [1]string (varargs)                                *[1]string
	t58 = &t57[0:int]                                               *string
	*t58 = "                 ...":string
	t59 = slice t57[:]                                             []string
	t60 = append(t56, t59...)                                      []string
	; *ast.CallExpr @ 23:8 is t60
	*t0 = t60
	; var msg []string @ 23:2 is t60
	t61 = *t0                                                      []string
	; var msg []string @ 24:15 is t61
	t62 = new [1]string (varargs)                                *[1]string
	t63 = &t62[0:int]                                               *string
	*t63 = "           h, ←...":string
	t64 = slice t62[:]                                             []string
	t65 = append(t61, t64...)                                      []string
	; *ast.CallExpr @ 24:8 is t65
	*t0 = t65
	; var msg []string @ 24:2 is t65
	t66 = *t0                                                      []string
	; var msg []string @ 25:15 is t66
	t67 = new [1]string (varargs)                                *[1]string
	t68 = &t67[0:int]                                               *string
	*t68 = "           l, →...":string
	t69 = slice t67[:]                                             []string
	t70 = append(t66, t69...)                                      []string
	; *ast.CallExpr @ 25:8 is t70
	*t0 = t70
	; var msg []string @ 25:2 is t70
	t71 = *t0                                                      []string
	; var msg []string @ 26:15 is t71
	t72 = new [1]string (varargs)                                *[1]string
	t73 = &t72[0:int]                                               *string
	*t73 = "           j, ↓...":string
	t74 = slice t72[:]                                             []string
	t75 = append(t71, t74...)                                      []string
	; *ast.CallExpr @ 26:8 is t75
	*t0 = t75
	; var msg []string @ 26:2 is t75
	t76 = *t0                                                      []string
	; var msg []string @ 27:15 is t76
	t77 = new [1]string (varargs)                                *[1]string
	t78 = &t77[0:int]                                               *string
	*t78 = "           k, ↑...":string
	t79 = slice t77[:]                                             []string
	t80 = append(t76, t79...)                                      []string
	; *ast.CallExpr @ 27:8 is t80
	*t0 = t80
	; var msg []string @ 27:2 is t80
	t81 = *t0                                                      []string
	; var msg []string @ 28:15 is t81
	t82 = new [1]string (varargs)                                *[1]string
	t83 = &t82[0:int]                                               *string
	*t83 = "                 ...":string
	t84 = slice t82[:]                                             []string
	t85 = append(t81, t84...)                                      []string
	; *ast.CallExpr @ 28:8 is t85
	*t0 = t85
	; var msg []string @ 28:2 is t85
	t86 = *t0                                                      []string
	; var msg []string @ 29:15 is t86
	t87 = new [1]string (varargs)                                *[1]string
	t88 = &t87[0:int]                                               *string
	*t88 = "              s :...":string
	t89 = slice t87[:]                                             []string
	t90 = append(t86, t89...)                                      []string
	; *ast.CallExpr @ 29:8 is t90
	*t0 = t90
	; var msg []string @ 29:2 is t90
	t91 = *t0                                                      []string
	; var msg []string @ 30:15 is t91
	t92 = new [1]string (varargs)                                *[1]string
	t93 = &t92[0:int]                                               *string
	*t93 = "              p :...":string
	t94 = slice t92[:]                                             []string
	t95 = append(t91, t94...)                                      []string
	; *ast.CallExpr @ 30:8 is t95
	*t0 = t95
	; var msg []string @ 30:2 is t95
	t96 = *t0                                                      []string
	; var msg []string @ 31:15 is t96
	t97 = new [1]string (varargs)                                *[1]string
	t98 = &t97[0:int]                                               *string
	*t98 = "              q :...":string
	t99 = slice t97[:]                                             []string
	t100 = append(t96, t99...)                                     []string
	; *ast.CallExpr @ 31:8 is t100
	*t0 = t100
	; var msg []string @ 31:2 is t100
	t101 = *t0                                                     []string
	; var msg []string @ 32:15 is t101
	t102 = new [1]string (varargs)                               *[1]string
	t103 = &t102[0:int]                                             *string
	*t103 = "                 ...":string
	t104 = slice t102[:]                                           []string
	t105 = append(t101, t104...)                                   []string
	; *ast.CallExpr @ 32:8 is t105
	*t0 = t105
	; var msg []string @ 32:2 is t105
	t106 = *t0                                                     []string
	; var msg []string @ 33:15 is t106
	t107 = new [1]string (varargs)                               *[1]string
	t108 = &t107[0:int]                                             *string
	*t108 = "      Feel free t...":string
	t109 = slice t107[:]                                           []string
	t110 = append(t106, t109...)                                   []string
	; *ast.CallExpr @ 33:8 is t110
	*t0 = t110
	; var msg []string @ 33:2 is t110
	t111 = *t0                                                     []string
	; var msg []string @ 34:15 is t111
	t112 = new [1]string (varargs)                               *[1]string
	t113 = &t112[0:int]                                             *string
	*t113 = "      while playi...":string
	t114 = slice t112[:]                                           []string
	t115 = append(t111, t114...)                                   []string
	; *ast.CallExpr @ 34:8 is t115
	*t0 = t115
	; var msg []string @ 34:2 is t115
	t116 = local int (w)                                               *int
	t117 = local int (h)                                               *int
	; func github.com/nsf/termbox-go.Size() (width int, height int) @ 38:18 is Size
	; *ast.SelectorExpr @ 38:10 is Size
	t118 = github.com/nsf/termbox-go.Size()         (width int, height int)
	; *ast.CallExpr @ 38:10 is t118
	t119 = extract t118 #0                                              int
	*t116 = t119
	; var w int @ 38:2 is t119
	t120 = extract t118 #1                                              int
	*t117 = t120
	; var h int @ 38:5 is t120
	t121 = local int (tb)                                              *int
	t122 = *t117                                                        int
	; var h int @ 41:9 is t122
	t123 = *t0                                                     []string
	; var msg []string @ 41:17 is t123
	t124 = len(t123)                                                    int
	; *ast.CallExpr @ 41:13 is t124
	t125 = t122 - t124                                                  int
	; *ast.BinaryExpr @ 41:9 is t125
	t126 = t125 / 2:int                                                 int
	; *ast.BinaryExpr @ 41:8 is t126
	*t121 = t126
	; var tb int @ 41:2 is t126
	t127 = local int (lb)                                              *int
	t128 = *t116                                                        int
	; var w int @ 42:9 is t128
	t129 = t128 - 39:int                                                int
	; *ast.BinaryExpr @ 42:9 is t129
	t130 = t129 / 2:int                                                 int
	; *ast.BinaryExpr @ 42:8 is t130
	*t127 = t130
	; var lb int @ 42:2 is t130
	; func github.com/nsf/termbox-go.Clear(fg github.com/nsf/termbox-go.Attribute, bg github.com/nsf/termbox-go.Attribute) error @ 45:10 is Clear
	; *ast.SelectorExpr @ 45:2 is Clear
	t131 = github.com/nsf/termbox-go.Clear(0:github.com/nsf/termbox-go.Attribute, 0:github.com/nsf/termbox-go.Attribute) error
	; *ast.CallExpr @ 45:2 is t131
	t132 = local int (y)                                               *int
	t133 = local string (line)                                      *string
	t134 = *t0                                                     []string
	; var msg []string @ 47:23 is t134
	t135 = len(t134)                                                    int
	t136 = local int ()                                                *int
	*t136 = -1:int
	jump 1
1:                                                      rangeindex.loop P:2 S:2
	t137 = *t136                                                        int
	t138 = t137 + 1:int                                                 int
	*t136 = t138
	t139 = t138 < t135                                                 bool
	if t139 goto 2 else 3
2:                                                      rangeindex.body P:1 S:1
	t140 = *t136                                                        int
	t141 = &t134[t140]                                              *string
	t142 = *t141                                                     string
	*t132 = t140
	; var y int @ 47:6 is t140
	*t133 = t142
	; var line string @ 47:9 is t142
	t143 = local int (y)                                               *int
	t144 = local string (line)                                      *string
	t145 = *t132                                                        int
	; var y int @ 48:14 is t145
	t146 = *t121                                                        int
	; var tb int @ 48:16 is t146
	t147 = t145 + t146                                                  int
	; *ast.BinaryExpr @ 48:14 is t147
	t148 = *t133                                                     string
	; var line string @ 48:20 is t148
	*t143 = t147
	; var y int @ 48:3 is t147
	*t144 = t148
	; var line string @ 48:6 is t148
	t149 = local []string (strsl)                                 *[]string
	; func strings.Split(s string, sep string) []string @ 49:20 is Split
	; *ast.SelectorExpr @ 49:12 is Split
	t150 = *t144                                                     string
	; var line string @ 49:26 is t150
	t151 = strings.Split(t150, "":string)                          []string
	; *ast.CallExpr @ 49:12 is t151
	*t149 = t151
	; var strsl []string @ 49:3 is t151
	t152 = local int (x)                                               *int
	t153 = local string (s)                                         *string
	t154 = *t149                                                   []string
	; var strsl []string @ 50:21 is t154
	t155 = len(t154)                                                    int
	t156 = local int ()                                                *int
	*t156 = -1:int
	jump 4
3:                                                      rangeindex.done P:1 S:0
	; func github.com/nsf/termbox-go.Flush() error @ 57:10 is Flush
	; *ast.SelectorExpr @ 57:2 is Flush
	t157 = github.com/nsf/termbox-go.Flush()                          error
	; *ast.CallExpr @ 57:2 is t157
	rundefers
	return
4:                                                      rangeindex.loop P:2 S:2
	t158 = *t156                                                        int
	t159 = t158 + 1:int                                                 int
	*t156 = t159
	t160 = t159 < t155                                                 bool
	if t160 goto 5 else 1
5:                                                      rangeindex.body P:1 S:1
	t161 = *t156                                                        int
	t162 = &t154[t161]                                              *string
	t163 = *t162                                                     string
	*t152 = t161
	; var x int @ 50:7 is t161
	*t153 = t163
	; var s string @ 50:10 is t163
	t164 = local int (x)                                               *int
	t165 = local string (s)                                         *string
	t166 = *t152                                                        int
	; var x int @ 51:12 is t166
	t167 = *t127                                                        int
	; var lb int @ 51:14 is t167
	t168 = t166 + t167                                                  int
	; *ast.BinaryExpr @ 51:12 is t168
	t169 = *t153                                                     string
	; var s string @ 51:18 is t169
	*t164 = t168
	; var x int @ 51:4 is t168
	*t165 = t169
	; var s string @ 51:7 is t169
	t170 = local rune (r)                                             *rune
	; func unicode/utf8.DecodeRuneInString(s string) (r rune, size int) @ 52:17 is DecodeRuneInString
	; *ast.SelectorExpr @ 52:12 is DecodeRuneInString
	t171 = *t165                                                     string
	; var s string @ 52:36 is t171
	t172 = unicode/utf8.DecodeRuneInString(t171)         (r rune, size int)
	; *ast.CallExpr @ 52:12 is t172
	t173 = extract t172 #0                                             rune
	*t170 = t173
	; var r rune @ 52:4 is t173
	t174 = extract t172 #1                                              int
	; func github.com/nsf/termbox-go.SetCell(x int, y int, ch rune, fg github.com/nsf/termbox-go.Attribute, bg github.com/nsf/termbox-go.Attribute) @ 53:12 is SetCell
	; *ast.SelectorExpr @ 53:4 is SetCell
	t175 = *t164                                                        int
	; var x int @ 53:20 is t175
	t176 = *t143                                                        int
	; var y int @ 53:23 is t176
	t177 = *t170                                                       rune
	; var r rune @ 53:26 is t177
	t178 = github.com/nsf/termbox-go.SetCell(t175, t176, t177, 8:github.com/nsf/termbox-go.Attribute, 0:github.com/nsf/termbox-go.Attribute) ()
	; *ast.CallExpr @ 53:4 is t178
	jump 4

# Name: github.com/JoergReinhardt/worm.counter
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/render.go:62:6
# Locals:
#   0:	t0 []string
#   1:	t3 int
#   2:	t7 int
#   3:	t8 int
#   4:	t17 int
#   5:	t18 string
#   6:	t21 int
#   7:	t28 int
#   8:	t29 string
#   9:	t34 []string
#  10:	t37 int
#  11:	t38 string
#  12:	t41 int
#  13:	t49 int
#  14:	t50 string
#  15:	t55 rune
func counter():
0:                                                                entry P:0 S:1
	t0 = local []string (msg)                                     *[]string
	t1 = *points                                                     *digit
	; var github.com/JoergReinhardt/worm.points *github.com/JoergReinhardt/worm.digit @ 63:12 is t1
	t2 = (*digit).stringRows(t1)                                   []string
	; *ast.CallExpr @ 63:12 is t2
	*t0 = t2
	; var msg []string @ 63:6 is t2
	t3 = local int (w)                                                 *int
	; func github.com/nsf/termbox-go.Size() (width int, height int) @ 67:18 is Size
	; *ast.SelectorExpr @ 67:10 is Size
	t4 = github.com/nsf/termbox-go.Size()           (width int, height int)
	; *ast.CallExpr @ 67:10 is t4
	t5 = extract t4 #0                                                  int
	*t3 = t5
	; var w int @ 67:2 is t5
	t6 = extract t4 #1                                                  int
	t7 = local int (tb)                                                *int
	*t7 = 2:int
	; var tb int @ 70:2 is 2:int
	t8 = local int (lb)                                                *int
	t9 = *t3                                                            int
	; var w int @ 71:8 is t9
	t10 = *t0                                                      []string
	; var msg []string @ 71:16 is t10
	t11 = &t10[0:int]                                               *string
	t12 = *t11                                                       string
	; *ast.IndexExpr @ 71:16 is t12
	t13 = len(t12)                                                      int
	; *ast.CallExpr @ 71:12 is t13
	t14 = t9 - t13                                                      int
	; *ast.BinaryExpr @ 71:8 is t14
	t15 = t14 + 2:int                                                   int
	; *ast.BinaryExpr @ 71:8 is t15
	*t8 = t15
	; var lb int @ 71:2 is t15
	; func github.com/nsf/termbox-go.Clear(fg github.com/nsf/termbox-go.Attribute, bg github.com/nsf/termbox-go.Attribute) error @ 74:10 is Clear
	; *ast.SelectorExpr @ 74:2 is Clear
	t16 = github.com/nsf/termbox-go.Clear(0:github.com/nsf/termbox-go.Attribute, 0:github.com/nsf/termbox-go.Attribute) error
	; *ast.CallExpr @ 74:2 is t16
	t17 = local int (y)                                                *int
	t18 = local string (line)                                       *string
	t19 = *t0                                                      []string
	; var msg []string @ 76:23 is t19
	t20 = len(t19)                                                      int
	t21 = local int ()                                                 *int
	*t21 = -1:int
	jump 1
1:                                                      rangeindex.loop P:2 S:2
	t22 = *t21                                                          int
	t23 = t22 + 1:int                                                   int
	*t21 = t23
	t24 = t23 < t20                                                    bool
	if t24 goto 2 else 3
2:                                                      rangeindex.body P:1 S:1
	t25 = *t21                                                          int
	t26 = &t19[t25]                                                 *string
	t27 = *t26                                                       string
	*t17 = t25
	; var y int @ 76:6 is t25
	*t18 = t27
	; var line string @ 76:9 is t27
	t28 = local int (y)                                                *int
	t29 = local string (line)                                       *string
	t30 = *t17                                                          int
	; var y int @ 77:14 is t30
	t31 = *t7                                                           int
	; var tb int @ 77:16 is t31
	t32 = t30 + t31                                                     int
	; *ast.BinaryExpr @ 77:14 is t32
	t33 = *t18                                                       string
	; var line string @ 77:20 is t33
	*t28 = t32
	; var y int @ 77:3 is t32
	*t29 = t33
	; var line string @ 77:6 is t33
	t34 = local []string (strsl)                                  *[]string
	; func strings.Split(s string, sep string) []string @ 78:20 is Split
	; *ast.SelectorExpr @ 78:12 is Split
	t35 = *t29                                                       string
	; var line string @ 78:26 is t35
	t36 = strings.Split(t35, "":string)                            []string
	; *ast.CallExpr @ 78:12 is t36
	*t34 = t36
	; var strsl []string @ 78:3 is t36
	t37 = local int (x)                                                *int
	t38 = local string (s)                                          *string
	t39 = *t34                                                     []string
	; var strsl []string @ 79:21 is t39
	t40 = len(t39)                                                      int
	t41 = local int ()                                                 *int
	*t41 = -1:int
	jump 4
3:                                                      rangeindex.done P:1 S:0
	; func github.com/nsf/termbox-go.Flush() error @ 86:10 is Flush
	; *ast.SelectorExpr @ 86:2 is Flush
	t42 = github.com/nsf/termbox-go.Flush()                           error
	; *ast.CallExpr @ 86:2 is t42
	rundefers
	return
4:                                                      rangeindex.loop P:2 S:2
	t43 = *t41                                                          int
	t44 = t43 + 1:int                                                   int
	*t41 = t44
	t45 = t44 < t40                                                    bool
	if t45 goto 5 else 1
5:                                                      rangeindex.body P:1 S:1
	t46 = *t41                                                          int
	t47 = &t39[t46]                                                 *string
	t48 = *t47                                                       string
	*t37 = t46
	; var x int @ 79:7 is t46
	*t38 = t48
	; var s string @ 79:10 is t48
	t49 = local int (x)                                                *int
	t50 = local string (s)                                          *string
	t51 = *t37                                                          int
	; var x int @ 80:12 is t51
	t52 = *t8                                                           int
	; var lb int @ 80:14 is t52
	t53 = t51 + t52                                                     int
	; *ast.BinaryExpr @ 80:12 is t53
	t54 = *t38                                                       string
	; var s string @ 80:18 is t54
	*t49 = t53
	; var x int @ 80:4 is t53
	*t50 = t54
	; var s string @ 80:7 is t54
	t55 = local rune (r)                                              *rune
	; func unicode/utf8.DecodeRuneInString(s string) (r rune, size int) @ 81:17 is DecodeRuneInString
	; *ast.SelectorExpr @ 81:12 is DecodeRuneInString
	t56 = *t50                                                       string
	; var s string @ 81:36 is t56
	t57 = unicode/utf8.DecodeRuneInString(t56)           (r rune, size int)
	; *ast.CallExpr @ 81:12 is t57
	t58 = extract t57 #0                                               rune
	*t55 = t58
	; var r rune @ 81:4 is t58
	t59 = extract t57 #1                                                int
	; func github.com/nsf/termbox-go.SetCell(x int, y int, ch rune, fg github.com/nsf/termbox-go.Attribute, bg github.com/nsf/termbox-go.Attribute) @ 82:12 is SetCell
	; *ast.SelectorExpr @ 82:4 is SetCell
	t60 = *t49                                                          int
	; var x int @ 82:20 is t60
	t61 = *t28                                                          int
	; var y int @ 82:23 is t61
	t62 = *t55                                                         rune
	; var r rune @ 82:26 is t62
	t63 = github.com/nsf/termbox-go.SetCell(t60, t61, t62, 8:github.com/nsf/termbox-go.Attribute, 0:github.com/nsf/termbox-go.Attribute) ()
	; *ast.CallExpr @ 82:4 is t63
	jump 4

# Name: github.com/JoergReinhardt/worm.render$1
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/render.go:104:11
# Parent: render
# Locals:
#   0:	t0 int
#   1:	t1 int
#   2:	t2 rune
func render$1(x int, y int, c rune):
0:                                                                entry P:0 S:0
	t0 = local int (x)                                                 *int
	*t0 = x
	t1 = local int (y)                                                 *int
	*t1 = y
	t2 = local rune (c)                                               *rune
	*t2 = c
	; func github.com/nsf/termbox-go.SetCell(x int, y int, ch rune, fg github.com/nsf/termbox-go.Attribute, bg github.com/nsf/termbox-go.Attribute) @ 105:11 is SetCell
	; *ast.SelectorExpr @ 105:3 is SetCell
	t3 = *t0                                                            int
	; var x int @ 105:19 is t3
	t4 = *t1                                                            int
	; var y int @ 105:22 is t4
	t5 = *t2                                                           rune
	; var c rune @ 105:25 is t5
	t6 = github.com/nsf/termbox-go.SetCell(t3, t4, t5, 3:github.com/nsf/termbox-go.Attribute, 0:github.com/nsf/termbox-go.Attribute) ()
	; *ast.CallExpr @ 105:3 is t6
	rundefers
	return

# Name: github.com/JoergReinhardt/worm.render
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/render.go:91:6
# Locals:
#   0:	t0 *game
#   1:	t14 func(x int, y int, c rune)
func render(g *game):
0:                                                                entry P:0 S:0
	t0 = local *game (g)                                             **game
	*t0 = g
	; func github.com/nsf/termbox-go.Clear(fg github.com/nsf/termbox-go.Attribute, bg github.com/nsf/termbox-go.Attribute) error @ 93:10 is Clear
	; *ast.SelectorExpr @ 93:2 is Clear
	t1 = github.com/nsf/termbox-go.Clear(0:github.com/nsf/termbox-go.Attribute, 0:github.com/nsf/termbox-go.Attribute) error
	; *ast.CallExpr @ 93:2 is t1
	; func github.com/JoergReinhardt/worm.counter() @ 96:2 is counter
	t2 = counter()                                                       ()
	; *ast.CallExpr @ 96:2 is t2
	; func github.com/nsf/termbox-go.SetCell(x int, y int, ch rune, fg github.com/nsf/termbox-go.Attribute, bg github.com/nsf/termbox-go.Attribute) @ 99:10 is SetCell
	; *ast.SelectorExpr @ 99:2 is SetCell
	t3 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 99:20 is t3
	t4 = &t3.cherry [#1]                                           **cherry
	; address of field cherry *github.com/JoergReinhardt/worm.cherry @ 99:22 is t4
	t5 = *t4                                                        *cherry
	; *ast.SelectorExpr @ 99:20 is t5
	; address of *ast.StarExpr @ 99:19 is t5
	t6 = &t5.x [#0]                                                    *int
	; address of field x int @ 99:30 is t6
	t7 = *t6                                                            int
	; *ast.SelectorExpr @ 99:18 is t7
	t8 = *t0                                                          *game
	; var g *github.com/JoergReinhardt/worm.game @ 99:35 is t8
	t9 = &t8.cherry [#1]                                           **cherry
	; address of field cherry *github.com/JoergReinhardt/worm.cherry @ 99:37 is t9
	t10 = *t9                                                       *cherry
	; *ast.SelectorExpr @ 99:35 is t10
	; address of *ast.StarExpr @ 99:34 is t10
	t11 = &t10.y [#1]                                                  *int
	; address of field y int @ 99:45 is t11
	t12 = *t11                                                          int
	; *ast.SelectorExpr @ 99:33 is t12
	t13 = github.com/nsf/termbox-go.SetCell(t7, t12, 79:rune, 2:github.com/nsf/termbox-go.Attribute, 0:github.com/nsf/termbox-go.Attribute) ()
	; *ast.CallExpr @ 99:2 is t13
	t14 = local func(x int, y int, c rune) (fn) *func(x int, y int, c rune)
	; *ast.FuncLit @ 104:11 is render$1
	*t14 = render$1
	; var fn func(x int, y int, c rune) @ 104:6 is render$1
	t15 = *t0                                                         *game
	; var g *github.com/JoergReinhardt/worm.game @ 108:4 is t15
	t16 = &t15.worm [#2]                                             **worm
	; address of field worm *github.com/JoergReinhardt/worm.worm @ 108:6 is t16
	t17 = *t16                                                        *worm
	; *ast.SelectorExpr @ 108:4 is t17
	t18 = *t17                                                         worm
	; *ast.StarExpr @ 108:3 is t18
	t19 = t18.segment [#0]                                         *segment
	t20 = *t14                                   func(x int, y int, c rune)
	; var fn func(x int, y int, c rune) @ 108:19 is t20
	t21 = (*segment).render(t19, t20)                                    ()
	; *ast.CallExpr @ 108:2 is t21
	; func github.com/nsf/termbox-go.Flush() error @ 110:10 is Flush
	; *ast.SelectorExpr @ 110:2 is Flush
	t22 = github.com/nsf/termbox-go.Flush()                           error
	; *ast.CallExpr @ 110:2 is t22
	rundefers
	return

# Name: (*github.com/JoergReinhardt/worm.segment).collides
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/worm.go:33:19
# Locals:
#   0:	t0 *segment
#   1:	t1 int
#   2:	t2 int
func (s *segment) collides(x int, y int) bool:
0:                                                                entry P:0 S:2
	t0 = local *segment (s)                                       **segment
	*t0 = s
	t1 = local int (x)                                                 *int
	*t1 = x
	t2 = local int (y)                                                 *int
	*t2 = y
	t3 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 35:5 is t3
	t4 = &t3.x [#0]                                                    *int
	; address of field x int @ 35:7 is t4
	t5 = *t4                                                            int
	; *ast.SelectorExpr @ 35:5 is t5
	t6 = *t1                                                            int
	; var x int @ 35:12 is t6
	t7 = t5 == t6                                                      bool
	; *ast.BinaryExpr @ 35:5 is t7
	if t7 goto 3 else 2
1:                                                              if.then P:1 S:0
	rundefers
	return true:bool
2:                                                              if.done P:2 S:2
	t8 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 38:5 is t8
	t9 = &t8.tail [#3]                                                *bool
	; address of field tail bool @ 38:7 is t9
	t10 = *t9                                                          bool
	; *ast.SelectorExpr @ 38:5 is t10
	if t10 goto 4 else 5
3:                                                            cond.true P:1 S:2
	t11 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 35:17 is t11
	t12 = &t11.y [#1]                                                  *int
	; address of field y int @ 35:19 is t12
	t13 = *t12                                                          int
	; *ast.SelectorExpr @ 35:17 is t13
	t14 = *t2                                                           int
	; var y int @ 35:24 is t14
	t15 = t13 == t14                                                   bool
	; *ast.BinaryExpr @ 35:17 is t15
	if t15 goto 1 else 2
4:                                                              if.then P:1 S:0
	rundefers
	return false:bool
5:                                                              if.done P:1 S:0
	t16 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 41:9 is t16
	t17 = &t16.next [#4]                                          **segment
	; address of field next *github.com/JoergReinhardt/worm.segment @ 41:11 is t17
	t18 = *t17                                                     *segment
	; *ast.SelectorExpr @ 41:9 is t18
	t19 = *t1                                                           int
	; var x int @ 41:25 is t19
	t20 = *t2                                                           int
	; var y int @ 41:28 is t20
	t21 = (*segment).collides(t18, t19, t20)                           bool
	; *ast.CallExpr @ 41:9 is t21
	rundefers
	return t21

# Name: (*github.com/JoergReinhardt/worm.segment).grow
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/worm.go:46:19
# Locals:
#   0:	t0 *segment
func (s *segment) grow():
0:                                                                entry P:0 S:2
	t0 = local *segment (s)                                       **segment
	*t0 = s
	t1 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 47:5 is t1
	t2 = &t1.tail [#3]                                                *bool
	; address of field tail bool @ 47:7 is t2
	t3 = *t2                                                           bool
	; *ast.SelectorExpr @ 47:5 is t3
	if t3 goto 1 else 3
1:                                                              if.then P:1 S:1
	t4 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 49:5 is t4
	; address of *ast.StarExpr @ 49:4 is t4
	t5 = &t4.tail [#3]                                                *bool
	; address of field tail bool @ 49:8 is t5
	*t5 = false:bool
	; field tail bool @ 49:8 is false:bool
	t6 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 51:5 is t6
	; address of *ast.StarExpr @ 51:4 is t6
	t7 = &t6.next [#4]                                            **segment
	; address of field next *github.com/JoergReinhardt/worm.segment @ 51:8 is t7
	t8 = new segment (complit)                                     *segment
	t9 = &t8.x [#0]                                                    *int
	t10 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 51:24 is t10
	t11 = &t10.x [#0]                                                  *int
	; address of field x int @ 51:26 is t11
	t12 = *t11                                                          int
	; *ast.SelectorExpr @ 51:24 is t12
	t13 = &t8.y [#1]                                                   *int
	t14 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 51:29 is t14
	t15 = &t14.y [#1]                                                  *int
	; address of field y int @ 51:31 is t15
	t16 = *t15                                                          int
	; *ast.SelectorExpr @ 51:29 is t16
	t17 = &t8.char [#2]                                               *rune
	t18 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 51:34 is t18
	t19 = &t18.char [#2]                                              *rune
	; address of field char rune @ 51:36 is t19
	t20 = *t19                                                         rune
	; *ast.SelectorExpr @ 51:34 is t20
	t21 = &t8.tail [#3]                                               *bool
	t22 = &t8.next [#4]                                           **segment
	*t9 = t12
	; *ast.SelectorExpr @ 51:24 is t12
	*t13 = t16
	; *ast.SelectorExpr @ 51:29 is t16
	*t17 = t20
	; *ast.SelectorExpr @ 51:34 is t20
	*t21 = true:bool
	*t22 = nil:*segment
	; address of *ast.CompositeLit @ 51:16 is t8
	; *ast.UnaryExpr @ 51:15 is t8
	*t7 = t8
	; field next *github.com/JoergReinhardt/worm.segment @ 51:8 is t8
	jump 2
2:                                                              if.done P:2 S:0
	rundefers
	return
3:                                                              if.else P:1 S:1
	t23 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 53:5 is t23
	t24 = &t23.next [#4]                                          **segment
	; address of field next *github.com/JoergReinhardt/worm.segment @ 53:7 is t24
	t25 = *t24                                                     *segment
	; *ast.SelectorExpr @ 53:5 is t25
	; address of *ast.StarExpr @ 53:4 is t25
	t26 = (*segment).grow(t25)                                           ()
	; *ast.CallExpr @ 53:3 is t26
	jump 2

# Name: (*github.com/JoergReinhardt/worm.segment).render
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/worm.go:60:19
# Locals:
#   0:	t0 *segment
#   1:	t1 func(x int, y int, c rune)
func (s *segment) render(fn func(x int, y int, c rune)):
0:                                                                entry P:0 S:2
	t0 = local *segment (s)                                       **segment
	*t0 = s
	t1 = local func(x int, y int, c rune) (fn)  *func(x int, y int, c rune)
	*t1 = fn
	t2 = *t1                                     func(x int, y int, c rune)
	; var fn func(x int, y int, c rune) @ 61:2 is t2
	t3 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 61:5 is t3
	t4 = &t3.x [#0]                                                    *int
	; address of field x int @ 61:7 is t4
	t5 = *t4                                                            int
	; *ast.SelectorExpr @ 61:5 is t5
	t6 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 61:10 is t6
	t7 = &t6.y [#1]                                                    *int
	; address of field y int @ 61:12 is t7
	t8 = *t7                                                            int
	; *ast.SelectorExpr @ 61:10 is t8
	t9 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 61:15 is t9
	t10 = &t9.char [#2]                                               *rune
	; address of field char rune @ 61:17 is t10
	t11 = *t10                                                         rune
	; *ast.SelectorExpr @ 61:15 is t11
	t12 = t2(t5, t8, t11)                                                ()
	; *ast.CallExpr @ 61:2 is t12
	t13 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 62:6 is t13
	t14 = &t13.tail [#3]                                              *bool
	; address of field tail bool @ 62:8 is t14
	t15 = *t14                                                         bool
	; *ast.SelectorExpr @ 62:6 is t15
	if t15 goto 2 else 1
1:                                                              if.then P:1 S:1
	t16 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 63:5 is t16
	t17 = &t16.next [#4]                                          **segment
	; address of field next *github.com/JoergReinhardt/worm.segment @ 63:7 is t17
	t18 = *t17                                                     *segment
	; *ast.SelectorExpr @ 63:5 is t18
	; address of *ast.StarExpr @ 63:4 is t18
	t19 = *t1                                    func(x int, y int, c rune)
	; var fn func(x int, y int, c rune) @ 63:20 is t19
	t20 = (*segment).render(t18, t19)                                    ()
	; *ast.CallExpr @ 63:3 is t20
	jump 2
2:                                                              if.done P:2 S:0
	rundefers
	return

# Name: (github.com/JoergReinhardt/worm.segment).RelPos
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/worm.go:69:18
# Locals:
#   0:	t0 segment
#   1:	t1 int
#   2:	t2 int
#   3:	t3 dir
func (s segment) RelPos(x int, y int) (d dir):
0:                                                                entry P:0 S:2
	t0 = local segment (s)                                         *segment
	*t0 = s
	t1 = local int (x)                                                 *int
	*t1 = x
	t2 = local int (y)                                                 *int
	*t2 = y
	t3 = local dir (d)                                                 *dir
	; address of var s github.com/JoergReinhardt/worm.segment @ 71:7 is t0
	t4 = &t0.y [#1]                                                    *int
	; address of field y int @ 71:9 is t4
	t5 = *t4                                                            int
	; *ast.SelectorExpr @ 71:7 is t5
	t6 = *t2                                                            int
	; var y int @ 71:13 is t6
	t7 = t5 < t6                                                       bool
	; *ast.BinaryExpr @ 71:7 is t7
	if t7 goto 2 else 4
1:                                                          switch.done P:5 S:0
	t8 = *t3                                                            dir
	; var d github.com/JoergReinhardt/worm.dir @ 80:9 is t8
	*t3 = t8
	rundefers
	t9 = *t3                                                            dir
	return t9
2:                                                          switch.body P:1 S:1
	*t3 = 2:dir
	; var d github.com/JoergReinhardt/worm.dir @ 72:3 is 2:github.com/JoergReinhardt/worm.dir
	jump 1
3:                                                          switch.body P:1 S:1
	*t3 = 0:dir
	; var d github.com/JoergReinhardt/worm.dir @ 74:3 is 0:github.com/JoergReinhardt/worm.dir
	jump 1
4:                                                          switch.next P:1 S:2
	; address of var s github.com/JoergReinhardt/worm.segment @ 73:7 is t0
	t10 = &t0.y [#1]                                                   *int
	; address of field y int @ 73:9 is t10
	t11 = *t10                                                          int
	; *ast.SelectorExpr @ 73:7 is t11
	t12 = *t2                                                           int
	; var y int @ 73:13 is t12
	t13 = t11 > t12                                                    bool
	; *ast.BinaryExpr @ 73:7 is t13
	if t13 goto 3 else 6
5:                                                          switch.body P:1 S:1
	*t3 = 8:dir
	; var d github.com/JoergReinhardt/worm.dir @ 76:3 is 8:github.com/JoergReinhardt/worm.dir
	jump 1
6:                                                          switch.next P:1 S:2
	; address of var s github.com/JoergReinhardt/worm.segment @ 75:7 is t0
	t14 = &t0.x [#0]                                                   *int
	; address of field x int @ 75:9 is t14
	t15 = *t14                                                          int
	; *ast.SelectorExpr @ 75:7 is t15
	t16 = *t1                                                           int
	; var x int @ 75:13 is t16
	t17 = t15 < t16                                                    bool
	; *ast.BinaryExpr @ 75:7 is t17
	if t17 goto 5 else 8
7:                                                          switch.body P:1 S:1
	*t3 = 4:dir
	; var d github.com/JoergReinhardt/worm.dir @ 78:3 is 4:github.com/JoergReinhardt/worm.dir
	jump 1
8:                                                          switch.next P:1 S:2
	; address of var s github.com/JoergReinhardt/worm.segment @ 77:7 is t0
	t18 = &t0.x [#0]                                                   *int
	; address of field x int @ 77:9 is t18
	t19 = *t18                                                          int
	; *ast.SelectorExpr @ 77:7 is t19
	t20 = *t1                                                           int
	; var x int @ 77:13 is t20
	t21 = t19 > t20                                                    bool
	; *ast.BinaryExpr @ 77:7 is t21
	if t21 goto 7 else 1

# Name: (*github.com/JoergReinhardt/worm.segment).move
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/worm.go:85:19
# Locals:
#   0:	t0 *segment
#   1:	t1 int
#   2:	t2 int
#   3:	t3 int
#   4:	t4 int
#   5:	t5 int
#   6:	t6 int
#   7:	t28 struct{p dir; n dir}
func (s *segment) move(x int, y int, px int, py int):
0:                                                                entry P:0 S:2
	t0 = local *segment (s)                                       **segment
	*t0 = s
	t1 = local int (x)                                                 *int
	*t1 = x
	t2 = local int (y)                                                 *int
	*t2 = y
	t3 = local int (px)                                                *int
	*t3 = px
	t4 = local int (py)                                                *int
	*t4 = py
	t5 = local int (nx)                                                *int
	t6 = local int (ny)                                                *int
	t7 = *t0                                                       *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 87:14 is t7
	; address of *ast.StarExpr @ 87:13 is t7
	t8 = &t7.x [#0]                                                    *int
	; address of field x int @ 87:17 is t8
	t9 = *t8                                                            int
	; *ast.SelectorExpr @ 87:12 is t9
	t10 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 87:22 is t10
	; address of *ast.StarExpr @ 87:21 is t10
	t11 = &t10.y [#1]                                                  *int
	; address of field y int @ 87:25 is t11
	t12 = *t11                                                          int
	; *ast.SelectorExpr @ 87:20 is t12
	*t5 = t9
	; var nx int @ 87:2 is t9
	*t6 = t12
	; var ny int @ 87:6 is t12
	t13 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 89:4 is t13
	; address of *ast.StarExpr @ 89:3 is t13
	t14 = &t13.x [#0]                                                  *int
	; address of field x int @ 89:7 is t14
	t15 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 89:12 is t15
	; address of *ast.StarExpr @ 89:11 is t15
	t16 = &t15.y [#1]                                                  *int
	; address of field y int @ 89:15 is t16
	t17 = *t1                                                           int
	; var x int @ 89:19 is t17
	t18 = *t2                                                           int
	; var y int @ 89:22 is t18
	*t14 = t17
	; field x int @ 89:7 is t17
	*t16 = t18
	; field y int @ 89:15 is t18
	t19 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 90:5 is t19
	t20 = &t19.tail [#3]                                              *bool
	; address of field tail bool @ 90:7 is t20
	t21 = *t20                                                         bool
	; *ast.SelectorExpr @ 90:5 is t21
	if t21 goto 1 else 3
1:                                                              if.then P:1 S:2
	t22 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 92:10 is t22
	t23 = *t22                                                      segment
	t24 = *t3                                                           int
	; var px int @ 92:19 is t24
	t25 = *t4                                                           int
	; var py int @ 92:23 is t25
	t26 = (segment).RelPos(t23, t24, t25)                               dir
	; *ast.CallExpr @ 92:10 is t26
	t27 = t26 == 0:dir                                                 bool
	if t27 goto 4 else 6
2:                                                              if.done P:6 S:0
	rundefers
	return
3:                                                              if.else P:1 S:1
	t28 = local struct{p dir; n dir} (relPos)         *struct{p dir; n dir}
	; address of var relPos struct{p github.com/JoergReinhardt/worm.dir; n github.com/JoergReinhardt/worm.dir} @ 104:7 is t28
	t29 = &t28.p [#0]                                                  *dir
	t30 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 108:4 is t30
	t31 = *t30                                                      segment
	t32 = *t3                                                           int
	; var px int @ 108:13 is t32
	t33 = *t4                                                           int
	; var py int @ 108:17 is t33
	t34 = (segment).RelPos(t31, t32, t33)                               dir
	; *ast.CallExpr @ 108:4 is t34
	t35 = &t28.n [#1]                                                  *dir
	t36 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 109:4 is t36
	t37 = *t36                                                      segment
	t38 = *t5                                                           int
	; var nx int @ 109:13 is t38
	t39 = *t6                                                           int
	; var ny int @ 109:17 is t39
	t40 = (segment).RelPos(t37, t38, t39)                               dir
	; *ast.CallExpr @ 109:4 is t40
	*t29 = t34
	; *ast.CallExpr @ 108:4 is t34
	*t35 = t40
	; *ast.CallExpr @ 109:4 is t40
	; address of *ast.CompositeLit @ 104:16 is t28
	t41 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 112:5 is t41
	; address of *ast.StarExpr @ 112:4 is t41
	t42 = &t41.char [#2]                                              *rune
	; address of field char rune @ 112:8 is t42
	t43 = *segChars                           map[struct{p dir; n dir}]rune
	; var github.com/JoergReinhardt/worm.segChars map[struct{p github.com/JoergReinhardt/worm.dir; n github.com/JoergReinhardt/worm.dir}]rune @ 112:15 is t43
	t44 = *t28                                         struct{p dir; n dir}
	; var relPos struct{p github.com/JoergReinhardt/worm.dir; n github.com/JoergReinhardt/worm.dir} @ 112:24 is t44
	t45 = t43[t44]                                                     rune
	; *ast.IndexExpr @ 112:15 is t45
	*t42 = t45
	; field char rune @ 112:8 is t45
	t46 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 115:5 is t46
	t47 = &t46.next [#4]                                          **segment
	; address of field next *github.com/JoergReinhardt/worm.segment @ 115:7 is t47
	t48 = *t47                                                     *segment
	; *ast.SelectorExpr @ 115:5 is t48
	; address of *ast.StarExpr @ 115:4 is t48
	t49 = *t5                                                           int
	; var nx int @ 115:18 is t49
	t50 = *t6                                                           int
	; var ny int @ 115:22 is t50
	t51 = *t1                                                           int
	; var x int @ 115:26 is t51
	t52 = *t2                                                           int
	; var y int @ 115:29 is t52
	t53 = (*segment).move(t48, t49, t50, t51, t52)                       ()
	; *ast.CallExpr @ 115:3 is t53
	jump 2
4:                                                          switch.body P:1 S:1
	t54 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 94:6 is t54
	; address of *ast.StarExpr @ 94:5 is t54
	t55 = &t54.char [#2]                                              *rune
	; address of field char rune @ 94:9 is t55
	*t55 = 9478:rune
	; field char rune @ 94:9 is 9478:rune
	jump 2
5:                                                          switch.body P:1 S:1
	t56 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 96:6 is t56
	; address of *ast.StarExpr @ 96:5 is t56
	t57 = &t56.char [#2]                                              *rune
	; address of field char rune @ 96:9 is t57
	*t57 = 9478:rune
	; field char rune @ 96:9 is 9478:rune
	jump 2
6:                                                          switch.next P:1 S:2
	t58 = t26 == 2:dir                                                 bool
	if t58 goto 5 else 8
7:                                                          switch.body P:1 S:1
	t59 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 98:6 is t59
	; address of *ast.StarExpr @ 98:5 is t59
	t60 = &t59.char [#2]                                              *rune
	; address of field char rune @ 98:9 is t60
	*t60 = 9476:rune
	; field char rune @ 98:9 is 9476:rune
	jump 2
8:                                                          switch.next P:1 S:2
	t61 = t26 == 4:dir                                                 bool
	if t61 goto 7 else 10
9:                                                          switch.body P:1 S:1
	t62 = *t0                                                      *segment
	; var s *github.com/JoergReinhardt/worm.segment @ 100:6 is t62
	; address of *ast.StarExpr @ 100:5 is t62
	t63 = &t62.char [#2]                                              *rune
	; address of field char rune @ 100:9 is t63
	*t63 = 9476:rune
	; field char rune @ 100:9 is 9476:rune
	jump 2
10:                                                         switch.next P:1 S:2
	t64 = t26 == 8:dir                                                 bool
	if t64 goto 9 else 2

# Name: (*github.com/JoergReinhardt/worm.worm).move
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/worm.go:126:16
# Locals:
#   0:	t0 *worm
#   1:	t1 int
#   2:	t2 int
#   3:	t3 dir
#   4:	t4 int
#   5:	t5 int
func (w *worm) move(x int, y int, d dir):
0:                                                                entry P:0 S:2
	t0 = local *worm (w)                                             **worm
	*t0 = w
	t1 = local int (x)                                                 *int
	*t1 = x
	t2 = local int (y)                                                 *int
	*t2 = y
	t3 = local dir (d)                                                 *dir
	*t3 = d
	t4 = local int (nx)                                                *int
	t5 = local int (ny)                                                *int
	t6 = *t0                                                          *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 128:12 is t6
	t7 = &t6.segment [#0]                                         **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 128:14 is t7
	t8 = *t7                                                       *segment
	; *ast.SelectorExpr @ 128:12 is t8
	t9 = &t8.x [#0]                                                    *int
	; address of field x int @ 128:22 is t9
	t10 = *t9                                                           int
	; *ast.SelectorExpr @ 128:12 is t10
	t11 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 128:25 is t11
	t12 = &t11.segment [#0]                                       **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 128:27 is t12
	t13 = *t12                                                     *segment
	; *ast.SelectorExpr @ 128:25 is t13
	t14 = &t13.y [#1]                                                  *int
	; address of field y int @ 128:35 is t14
	t15 = *t14                                                          int
	; *ast.SelectorExpr @ 128:25 is t15
	*t4 = t10
	; var nx int @ 128:2 is t10
	*t5 = t15
	; var ny int @ 128:6 is t15
	t16 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 130:4 is t16
	t17 = &t16.segment [#0]                                       **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 130:6 is t17
	t18 = *t17                                                     *segment
	; *ast.SelectorExpr @ 130:4 is t18
	; address of *ast.StarExpr @ 130:3 is t18
	t19 = &t18.x [#0]                                                  *int
	; address of field x int @ 130:15 is t19
	t20 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 130:20 is t20
	t21 = &t20.segment [#0]                                       **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 130:22 is t21
	t22 = *t21                                                     *segment
	; *ast.SelectorExpr @ 130:20 is t22
	; address of *ast.StarExpr @ 130:19 is t22
	t23 = &t22.y [#1]                                                  *int
	; address of field y int @ 130:31 is t23
	t24 = *t1                                                           int
	; var x int @ 130:35 is t24
	t25 = *t2                                                           int
	; var y int @ 130:38 is t25
	*t19 = t24
	; field x int @ 130:15 is t24
	*t23 = t25
	; field y int @ 130:31 is t25
	t26 = *t3                                                           dir
	; var d github.com/JoergReinhardt/worm.dir @ 132:9 is t26
	t27 = t26 == 0:dir                                                 bool
	if t27 goto 2 else 4
1:                                                          switch.done P:5 S:2
	t28 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 143:5 is t28
	t29 = &t28.segment [#0]                                       **segment
	t30 = *t29                                                     *segment
	t31 = &t30.tail [#3]                                              *bool
	; address of field tail bool @ 143:7 is t31
	t32 = *t31                                                         bool
	; *ast.SelectorExpr @ 143:5 is t32
	if t32 goto 9 else 10
2:                                                          switch.body P:1 S:1
	t33 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 134:5 is t33
	t34 = &t33.segment [#0]                                       **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 134:7 is t34
	t35 = *t34                                                     *segment
	; *ast.SelectorExpr @ 134:5 is t35
	; address of *ast.StarExpr @ 134:4 is t35
	t36 = &t35.char [#2]                                              *rune
	; address of field char rune @ 134:16 is t36
	*t36 = 94:rune
	; field char rune @ 134:16 is 94:rune
	jump 1
3:                                                          switch.body P:1 S:1
	t37 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 136:5 is t37
	t38 = &t37.segment [#0]                                       **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 136:7 is t38
	t39 = *t38                                                     *segment
	; *ast.SelectorExpr @ 136:5 is t39
	; address of *ast.StarExpr @ 136:4 is t39
	t40 = &t39.char [#2]                                              *rune
	; address of field char rune @ 136:16 is t40
	*t40 = 118:rune
	; field char rune @ 136:16 is 118:rune
	jump 1
4:                                                          switch.next P:1 S:2
	t41 = t26 == 2:dir                                                 bool
	if t41 goto 3 else 6
5:                                                          switch.body P:1 S:1
	t42 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 138:5 is t42
	t43 = &t42.segment [#0]                                       **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 138:7 is t43
	t44 = *t43                                                     *segment
	; *ast.SelectorExpr @ 138:5 is t44
	; address of *ast.StarExpr @ 138:4 is t44
	t45 = &t44.char [#2]                                              *rune
	; address of field char rune @ 138:16 is t45
	*t45 = 60:rune
	; field char rune @ 138:16 is 60:rune
	jump 1
6:                                                          switch.next P:1 S:2
	t46 = t26 == 4:dir                                                 bool
	if t46 goto 5 else 8
7:                                                          switch.body P:1 S:1
	t47 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 140:5 is t47
	t48 = &t47.segment [#0]                                       **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 140:7 is t48
	t49 = *t48                                                     *segment
	; *ast.SelectorExpr @ 140:5 is t49
	; address of *ast.StarExpr @ 140:4 is t49
	t50 = &t49.char [#2]                                              *rune
	; address of field char rune @ 140:16 is t50
	*t50 = 62:rune
	; field char rune @ 140:16 is 62:rune
	jump 1
8:                                                          switch.next P:1 S:2
	t51 = t26 == 8:dir                                                 bool
	if t51 goto 7 else 1
9:                                                              if.then P:1 S:0
	rundefers
	return
10:                                                             if.done P:1 S:0
	t52 = *t0                                                         *worm
	; var w *github.com/JoergReinhardt/worm.worm @ 148:4 is t52
	t53 = &t52.segment [#0]                                       **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 148:6 is t53
	t54 = *t53                                                     *segment
	; *ast.SelectorExpr @ 148:4 is t54
	t55 = &t54.next [#4]                                          **segment
	; address of field next *github.com/JoergReinhardt/worm.segment @ 148:14 is t55
	t56 = *t55                                                     *segment
	; *ast.SelectorExpr @ 148:4 is t56
	; address of *ast.StarExpr @ 148:3 is t56
	t57 = *t4                                                           int
	; var nx int @ 148:25 is t57
	t58 = *t5                                                           int
	; var ny int @ 148:29 is t58
	t59 = *t1                                                           int
	; var x int @ 148:33 is t59
	t60 = *t2                                                           int
	; var y int @ 148:36 is t60
	t61 = (*segment).move(t56, t57, t58, t59, t60)                       ()
	; *ast.CallExpr @ 148:2 is t61
	rundefers
	return

# Name: (github.com/JoergReinhardt/worm.worm).predNextPos
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/worm.go:150:15
# Locals:
#   0:	t0 worm
#   1:	t1 dir
#   2:	t2 int
#   3:	t3 int
#   4:	t4 int
#   5:	t5 int
func (w worm) predNextPos(d dir) (x int, y int):
0:                                                                entry P:0 S:2
	t0 = local worm (w)                                               *worm
	*t0 = w
	t1 = local dir (d)                                                 *dir
	*t1 = d
	t2 = local int (x)                                                 *int
	t3 = local int (y)                                                 *int
	t4 = local int (ox)                                                *int
	t5 = local int (oy)                                                *int
	; address of var w github.com/JoergReinhardt/worm.worm @ 152:12 is t0
	t6 = &t0.segment [#0]                                         **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 152:14 is t6
	t7 = *t6                                                       *segment
	; *ast.SelectorExpr @ 152:12 is t7
	t8 = &t7.x [#0]                                                    *int
	; address of field x int @ 152:22 is t8
	t9 = *t8                                                            int
	; *ast.SelectorExpr @ 152:12 is t9
	; address of var w github.com/JoergReinhardt/worm.worm @ 152:25 is t0
	t10 = &t0.segment [#0]                                        **segment
	; address of field segment *github.com/JoergReinhardt/worm.segment @ 152:27 is t10
	t11 = *t10                                                     *segment
	; *ast.SelectorExpr @ 152:25 is t11
	t12 = &t11.y [#1]                                                  *int
	; address of field y int @ 152:35 is t12
	t13 = *t12                                                          int
	; *ast.SelectorExpr @ 152:25 is t13
	*t4 = t9
	; var ox int @ 152:2 is t9
	*t5 = t13
	; var oy int @ 152:6 is t13
	t14 = *t1                                                           dir
	; var d github.com/JoergReinhardt/worm.dir @ 154:9 is t14
	t15 = t14 == 0:dir                                                 bool
	if t15 goto 2 else 4
1:                                                          switch.done P:5 S:0
	t16 = *t2                                                           int
	; var x int @ 169:9 is t16
	t17 = *t3                                                           int
	; var y int @ 169:12 is t17
	*t2 = t16
	*t3 = t17
	rundefers
	t18 = *t2                                                           int
	t19 = *t3                                                           int
	return t18, t19
2:                                                          switch.body P:1 S:1
	t20 = *t5                                                           int
	; var oy int @ 156:7 is t20
	t21 = t20 - 1:int                                                   int
	; *ast.BinaryExpr @ 156:7 is t21
	*t3 = t21
	; var y int @ 156:3 is t21
	t22 = *t4                                                           int
	; var ox int @ 157:7 is t22
	*t2 = t22
	; var x int @ 157:3 is t22
	jump 1
3:                                                          switch.body P:1 S:1
	t23 = *t5                                                           int
	; var oy int @ 159:7 is t23
	t24 = t23 + 1:int                                                   int
	; *ast.BinaryExpr @ 159:7 is t24
	*t3 = t24
	; var y int @ 159:3 is t24
	t25 = *t4                                                           int
	; var ox int @ 160:7 is t25
	*t2 = t25
	; var x int @ 160:3 is t25
	jump 1
4:                                                          switch.next P:1 S:2
	t26 = t14 == 2:dir                                                 bool
	if t26 goto 3 else 6
5:                                                          switch.body P:1 S:1
	t27 = *t4                                                           int
	; var ox int @ 162:7 is t27
	t28 = t27 - 1:int                                                   int
	; *ast.BinaryExpr @ 162:7 is t28
	*t2 = t28
	; var x int @ 162:3 is t28
	t29 = *t5                                                           int
	; var oy int @ 163:7 is t29
	*t3 = t29
	; var y int @ 163:3 is t29
	jump 1
6:                                                          switch.next P:1 S:2
	t30 = t14 == 4:dir                                                 bool
	if t30 goto 5 else 8
7:                                                          switch.body P:1 S:1
	t31 = *t4                                                           int
	; var ox int @ 165:7 is t31
	t32 = t31 + 1:int                                                   int
	; *ast.BinaryExpr @ 165:7 is t32
	*t2 = t32
	; var x int @ 165:3 is t32
	t33 = *t5                                                           int
	; var oy int @ 166:7 is t33
	*t3 = t33
	; var y int @ 166:3 is t33
	jump 1
8:                                                          switch.next P:1 S:2
	t34 = t14 == 8:dir                                                 bool
	if t34 goto 7 else 1

# Name: github.com/JoergReinhardt/worm.newWorm
# Package: github.com/JoergReinhardt/worm
# Location: /home/j/dev/src/github.com/JoergReinhardt/worm/worm.go:173:6
# Locals:
#   0:	t0 *state
#   1:	t1 int
#   2:	t2 int
func newWorm(s *state) *worm:
0:                                                                entry P:0 S:0
	t0 = local *state (s)                                           **state
	*t0 = s
	t1 = local int (x)                                                 *int
	t2 = local int (y)                                                 *int
	t3 = *t0                                                         *state
	; var s *github.com/JoergReinhardt/worm.state @ 174:10 is t3
	t4 = &t3.size [#3]                               *func() (x int, y int)
	; address of field size func() (x int, y int) @ 174:12 is t4
	t5 = *t4                                          func() (x int, y int)
	; *ast.SelectorExpr @ 174:10 is t5
	t6 = t5()                                                (x int, y int)
	; *ast.CallExpr @ 174:10 is t6
	t7 = extract t6 #0                                                  int
	*t1 = t7
	; var x int @ 174:2 is t7
	t8 = extract t6 #1                                                  int
	*t2 = t8
	; var y int @ 174:5 is t8
	t9 = new worm (complit)                                           *worm
	t10 = &t9.segment [#0]                                        **segment
	t11 = new segment (complit)                                    *segment
	t12 = &t11.x [#0]                                                  *int
	t13 = *t1                                                           int
	; var x int @ 177:10 is t13
	t14 = t13 / 2:int                                                   int
	; *ast.BinaryExpr @ 177:10 is t14
	t15 = &t11.y [#1]                                                  *int
	t16 = *t2                                                           int
	; var y int @ 178:10 is t16
	t17 = t16 / 2:int                                                   int
	; *ast.BinaryExpr @ 178:10 is t17
	t18 = &t11.char [#2]                                              *rune
	t19 = &t11.tail [#3]                                              *bool
	t20 = &t11.next [#4]                                          **segment
	*t12 = t14
	; *ast.BinaryExpr @ 177:10 is t14
	*t15 = t17
	; *ast.BinaryExpr @ 178:10 is t17
	*t18 = 32:rune
	; *ast.BasicLit @ 179:10 is 32:rune
	*t19 = true:bool
	*t20 = nil:*segment
	; address of *ast.CompositeLit @ 176:13 is t11
	; *ast.UnaryExpr @ 176:12 is t11
	*t10 = t11
	; *ast.UnaryExpr @ 176:12 is t11
	; address of *ast.CompositeLit @ 175:10 is t9
	; *ast.UnaryExpr @ 175:9 is t9
	rundefers
	return t9

# Name: github.com/JoergReinhardt/worm.init
# Package: github.com/JoergReinhardt/worm
# Synthetic: package initializer
# Locals:
#   0:	t17 struct{p dir; n dir}
#   1:	t21 struct{p dir; n dir}
#   2:	t25 struct{p dir; n dir}
#   3:	t29 struct{p dir; n dir}
#   4:	t33 struct{p dir; n dir}
#   5:	t37 struct{p dir; n dir}
#   6:	t41 struct{p dir; n dir}
#   7:	t45 struct{p dir; n dir}
#   8:	t49 struct{p dir; n dir}
#   9:	t53 struct{p dir; n dir}
#  10:	t57 struct{p dir; n dir}
#  11:	t61 struct{p dir; n dir}
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = github.com/nsf/termbox-go.init()                                ()
	t2 = time.init()                                                     ()
	t3 = strings.init()                                                  ()
	t4 = math/rand.init()                                                ()
	t5 = fmt.init()                                                      ()
	t6 = unicode/utf8.init()                                             ()
	t7 = &_GameStat_index_0[0:int]                                   *uint8
	t8 = &_GameStat_index_0[1:int]                                   *uint8
	*t7 = 0:uint8
	; *ast.BasicLit @ 15:33 is 0:uint8
	*t8 = 4:uint8
	; *ast.BasicLit @ 15:36 is 4:uint8
	; address of *ast.CompositeLit @ 15:22 is _GameStat_index_0
	t9 = &_GameStat_index_1[0:int]                                   *uint8
	t10 = &_GameStat_index_1[1:int]                                  *uint8
	*t9 = 0:uint8
	; *ast.BasicLit @ 16:33 is 0:uint8
	*t10 = 3:uint8
	; *ast.BasicLit @ 16:36 is 3:uint8
	; address of *ast.CompositeLit @ 16:22 is _GameStat_index_1
	t11 = &_GameStat_index_2[0:int]                                  *uint8
	t12 = &_GameStat_index_2[1:int]                                  *uint8
	*t11 = 0:uint8
	; *ast.BasicLit @ 17:33 is 0:uint8
	*t12 = 5:uint8
	; *ast.BasicLit @ 17:36 is 5:uint8
	; address of *ast.CompositeLit @ 17:22 is _GameStat_index_2
	t13 = &_GameStat_index_3[0:int]                                  *uint8
	t14 = &_GameStat_index_3[1:int]                                  *uint8
	*t13 = 0:uint8
	; *ast.BasicLit @ 18:33 is 0:uint8
	*t14 = 9:uint8
	; *ast.BasicLit @ 18:36 is 9:uint8
	; address of *ast.CompositeLit @ 18:22 is _GameStat_index_3
	; func github.com/JoergReinhardt/worm.newDigit() *github.com/JoergReinhardt/worm.digit @ 60:14 is newDigit
	t15 = newDigit()                                                 *digit
	; *ast.CallExpr @ 60:14 is t15
	*points = t15
	t16 = make map[struct{p dir; n dir}]rune 12:int map[struct{p dir; n dir}]rune
	t17 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t18 = &t17.p [#0]                                                  *dir
	t19 = &t17.n [#1]                                                  *dir
	*t18 = 0:dir
	*t19 = 2:dir
	t20 = *t17                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 7:2 is t20
	t16[t20] = 9475:rune
	t21 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t22 = &t21.p [#0]                                                  *dir
	t23 = &t21.n [#1]                                                  *dir
	*t22 = 2:dir
	*t23 = 0:dir
	t24 = *t21                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 8:2 is t24
	t16[t24] = 9475:rune
	t25 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t26 = &t25.p [#0]                                                  *dir
	t27 = &t25.n [#1]                                                  *dir
	*t26 = 4:dir
	*t27 = 8:dir
	t28 = *t25                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 9:2 is t28
	t16[t28] = 9473:rune
	t29 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t30 = &t29.p [#0]                                                  *dir
	t31 = &t29.n [#1]                                                  *dir
	*t30 = 8:dir
	*t31 = 4:dir
	t32 = *t29                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 10:2 is t32
	t16[t32] = 9473:rune
	t33 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t34 = &t33.p [#0]                                                  *dir
	t35 = &t33.n [#1]                                                  *dir
	*t34 = 4:dir
	*t35 = 0:dir
	t36 = *t33                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 11:2 is t36
	t16[t36] = 9499:rune
	t37 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t38 = &t37.p [#0]                                                  *dir
	t39 = &t37.n [#1]                                                  *dir
	*t38 = 0:dir
	*t39 = 4:dir
	t40 = *t37                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 12:2 is t40
	t16[t40] = 9499:rune
	t41 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t42 = &t41.p [#0]                                                  *dir
	t43 = &t41.n [#1]                                                  *dir
	*t42 = 4:dir
	*t43 = 2:dir
	t44 = *t41                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 13:2 is t44
	t16[t44] = 9491:rune
	t45 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t46 = &t45.p [#0]                                                  *dir
	t47 = &t45.n [#1]                                                  *dir
	*t46 = 2:dir
	*t47 = 4:dir
	t48 = *t45                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 14:2 is t48
	t16[t48] = 9491:rune
	t49 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t50 = &t49.p [#0]                                                  *dir
	t51 = &t49.n [#1]                                                  *dir
	*t50 = 8:dir
	*t51 = 0:dir
	t52 = *t49                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 15:2 is t52
	t16[t52] = 9495:rune
	t53 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t54 = &t53.p [#0]                                                  *dir
	t55 = &t53.n [#1]                                                  *dir
	*t54 = 0:dir
	*t55 = 8:dir
	t56 = *t53                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 16:2 is t56
	t16[t56] = 9495:rune
	t57 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t58 = &t57.p [#0]                                                  *dir
	t59 = &t57.n [#1]                                                  *dir
	*t58 = 8:dir
	*t59 = 2:dir
	t60 = *t57                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 17:2 is t60
	t16[t60] = 9487:rune
	t61 = local struct{p dir; n dir} (complit)        *struct{p dir; n dir}
	t62 = &t61.p [#0]                                                  *dir
	t63 = &t61.n [#1]                                                  *dir
	*t62 = 2:dir
	*t63 = 8:dir
	t64 = *t61                                         struct{p dir; n dir}
	; *ast.CompositeLit @ 18:2 is t64
	t16[t64] = 9487:rune
	*segChars = t16
	; *ast.CompositeLit @ 6:16 is t16
	jump 2
2:                                                            init.done P:2 S:0
	return

